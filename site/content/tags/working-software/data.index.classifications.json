{
  "Tool": {
    "category": "Tool",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses the concept of 'working software' as an artifact in Agile and Scrum frameworks, focusing on its role in delivering value and measuring progress. However, it does not explicitly mention any specific tools or mechanisms that facilitate this process, nor does it provide a detailed analysis of tools or their integration within Agile practices. The discussion is more centred on the methodology and outcomes rather than the tools themselves, leading to a lower confidence score in the 'Tool' category.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses working software as a key output in Agile and Scrum, which indirectly relates to accountability through the lens of value delivery and team alignment. However, it lacks explicit discussions on accountability structures, roles, or outcome ownership, making it a secondary focus rather than a primary one.",
    "level": "Ignored"
  },
  "Framework": {
    "category": "Framework",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 72.0,
    "ai_mentions": 80.0,
    "ai_alignment": 75.0,
    "ai_depth": 65.0,
    "non_ai_confidence": 30,
    "final_score": 72.0,
    "reasoning": "The content discusses 'working software' as a core artifact within Agile and Scrum frameworks, highlighting its role in delivering value and measuring success. It aligns well with the principles of Agile frameworks, particularly in terms of iterative development and continuous improvement. However, while it provides a good overview of the significance of working software, it lacks a broader discussion on various frameworks or implementation strategies, which slightly limits its depth. Overall, the content is focused on a key aspect of Agile frameworks, justifying a relatively high confidence score.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the Agile frameworks category, as it clearly explains the importance of 'working software' in Agile and Scrum, and how it supports iterative progress and value delivery. While it could cover a wider range of frameworks or methods, its focus on a central Agile principle makes it highly relevant to the topic."
  },
  "Tenet": {
    "category": "Tenet",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses 'working software' as a key output in Agile and Scrum, which relates to the principles of delivering value and continuous improvement. However, it does not explicitly mention actionable tenets or guiding rules that shape decision-making and behaviours within an organisation. The focus is more on the concept of working software rather than on specific tenets, leading to a moderate confidence score.",
    "level": "Tertiary"
  },
  "Method": {
    "category": "Method",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 42.0,
    "ai_mentions": 3,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 30,
    "final_score": 42.0,
    "reasoning": "The content discusses the importance of delivering working software within Agile, Lean, and DevOps methodologies, which aligns with the core themes of the Method category. However, it primarily focuses on the concept of working software rather than detailing specific structured procedures or methods. While it mentions continuous feedback and improvement, it lacks a step-by-step procedural approach typical of methods like Scrum or Kanban. The depth of discussion is moderate, providing insights into the implications of working software but not delving into specific methods or practices.",
    "level": "Tertiary"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 12,
    "ai_depth": 8,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of delivering working software and its role in Agile, Lean, and DevOps methodologies. However, while it touches on aspects of value delivery and adaptability, it primarily focuses on operational practices rather than high-level strategic alignment. The mention of continuous feedback and improvement hints at strategic thinking, but the overall emphasis is on execution rather than strategic planning or decision-making.",
    "level": "Ignored"
  },
  "Practice": {
    "category": "Practice",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses the importance of delivering working software, which aligns with the practice of continuous improvement and value delivery. However, it lacks explicit mentions of specific practices or actionable techniques, focusing more on the concept of working software rather than detailing practices like TDD or retrospectives. The depth of discussion is moderate, but it does not provide concrete examples or methods that teams can implement, leading to a lower confidence score.",
    "level": "Secondary"
  },
  "Philosophy": {
    "category": "Philosophy",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily focuses on the concept of 'working software' as a tangible output in Agile, Lean, and DevOps methodologies. While it touches on the importance of delivering value and fostering a culture of continuous improvement, it does not explicitly discuss the philosophical underpinnings of these methodologies. The discussion is more about the practical implications and benefits of working software rather than exploring the foundational beliefs that shape these practices. Therefore, while there is some alignment with the category, it lacks depth in philosophical exploration.",
    "level": "Ignored"
  },
  "Observability": {
    "category": "Observability",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily discusses 'working software' as a tangible output in Agile and Scrum frameworks, focusing on value delivery and team collaboration. While it touches on aspects of transparency and continuous improvement, it does not explicitly address observability or its key components such as metrics, logs, or traces. The discussion is more aligned with Agile principles rather than the specific domain of observability.",
    "level": "Ignored"
  },
  "Capability": {
    "category": "Capability",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 67.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 67.0,
    "reasoning": "The content discusses the importance of delivering working software as a measure of progress and value in Agile, Lean, and DevOps methodologies. It highlights how this focus fosters a culture of continuous feedback and improvement, which aligns with the core themes of capability. However, the primary emphasis is on the output (working software) rather than the enduring competencies that empower teams, which slightly detracts from its alignment with the Capability category. The depth of discussion is substantial, but it primarily revolves around the concept of working software rather than broader capabilities.",
    "level": "Secondary"
  },
  "Model": {
    "category": "Model",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses the importance of delivering working software within Agile, Lean, and DevOps methodologies, which aligns with the principles of value delivery and iterative development. However, it does not explicitly mention any specific models or frameworks, such as the Cynefin Framework or Lean Startup principles, which are central to the 'Model' category. The discussion is more focused on the outcomes of delivering working software rather than on conceptual models that inform decision-making or enhance organisational agility.",
    "level": "Ignored"
  },
  "Principle": {
    "category": "Principle",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 30,
    "final_score": 78.0,
    "reasoning": "The content discusses the importance of delivering working software as a measure of progress in Agile, Lean, and DevOps methodologies, which aligns with the principles of value delivery and continuous improvement. It explicitly mentions how prioritising working software fosters a culture of feedback and adaptation, which are key principles. The depth of discussion is substantial, covering the implications of working software on team behaviour, customer engagement, and quality, thus providing a comprehensive view of its role in guiding decision-making.",
    "level": "Secondary",
    "reasoning_summary": "This content clearly fits the category, as it explores how delivering working software is central to Agile, Lean, and DevOps practices. It highlights the value of feedback, adaptation, and continuous improvement, and thoroughly examines the impact on teams, customers, and quality. The discussion demonstrates a strong understanding of how these principles guide effective decision-making."
  },
  "Artifact": {
    "category": "Artifact",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses 'working software' as a tangible output of development efforts, which aligns with the concept of artifacts in Agile and Lean methodologies. However, it primarily focuses on the importance of delivering functional software rather than exploring specific artifacts like Product Backlogs or Sprint Backlogs. While it touches on the role of working software in facilitating collaboration and continuous improvement, it lacks detailed exploration of various types of artifacts and best practices for managing them.",
    "level": "Tertiary"
  },
  "Discipline": {
    "category": "Discipline",
    "calculated_at": "2025-04-10T13:19:39",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 45.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content primarily discusses 'working software' within Agile and Scrum frameworks, which indirectly relates to discipline through the structured approach to software development. However, while it mentions aspects of discipline such as quality and continuous improvement, it does not explicitly focus on discipline as a standalone concept. The depth of discussion on working software is substantial, but the direct mention of discipline is minimal, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Scrum Values": {
    "resourceId": "Working Software",
    "category": "Scrum Values",
    "calculated_at": "2025-05-06T11:55:41",
    "ai_confidence": 19.682,
    "ai_mentions": 1.1,
    "ai_alignment": 2.3,
    "ai_depth": 2.1,
    "ai_intent": 2.0,
    "ai_audience": 7.2,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content focuses almost entirely on the concept of 'working software,' its role as an artifact in Scrum and Agile, and its value as an outcome. There are only passing references to concepts that could relate to Scrum Values (e.g., collaboration, transparency, value delivery), but none of the actual Scrum Values—Commitment, Courage, Focus, Openness, Respect—are explicitly mentioned or deeply discussed. \n\n- Direct Mentions (1.1): No explicit mention of 'Scrum Values' or the individual values by name. Very light natural overlap with related themes.\n- Conceptual Alignment (2.3): Some loose conceptual links to 'Focus' and 'Openness' (transparency, adaptability), but the primary theme is on deliverables and outcomes—not the mindset, principles, or interpersonal dynamics that underpin Scrum Values.\n- Depth of Discussion (2.1): Depth is centered on explaining what working software is and why it's important, not on any of the Scrum Values themselves. The values are only vaguely alluded to.\n- Intent / Purpose Fit (2.0): The content seeks to inform about working software as an artifact, not to explain, support, or explore Scrum Values.\n- Audience Alignment (7.2): Aimed at practitioners of Agile/Scrum—likely the correct audience for Scrum Values in general, but does not address those seeking value-driven guidance directly. Slight deduction because the message is artifact/process-focused rather than behavioral/principal-focused.\n- Signal-to-Noise Ratio (8.0): The content is tightly focused on its declared topic and is on-point for discussing working software, just not for Scrum Values.\n\nNo penalties applied: No outdated references, negative tone, or contradiction to Scrum Values. \n\nOverall, the connection to Scrum Values is tertiary at best: the content lightly brushes against some supporting ideas but does not fit the category according to the strict definition.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "resourceId": "Working Software",
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-05-06T11:55:43",
    "ai_confidence": 36.3,
    "ai_mentions": 0.6,
    "ai_alignment": 4.2,
    "ai_depth": 3.8,
    "ai_intent": 5.2,
    "ai_audience": 4.6,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "The content primarily discusses 'working software' as a concept central to Agile, Scrum, and Lean. It thoroughly explains what constitutes working software, its role within Sprints, the importance of the Definition of Done, and how it delivers value. However, it does not directly or explicitly mention 'Application Lifecycle Management', ALM tools, or ALM-specific practices. It also does not cover the broader lifecycle stages (such as planning, maintenance, or retirement), governance, compliance, or metrics/KPIs at the application lifecycle level. \n\nScore breakdown:\n- Mentions (0.6): The term 'Application Lifecycle Management' or any synonyms are not mentioned at all, nor are any ALM frameworks, only general references to Agile/Scrum which are related but not directly to ALM.\n- Alignment (4.2): The content aligns tangentially—'working software' is an outcome relevant at many lifecycle stages, but the main ideas focus on deliverables and iterative progress in Agile, not on managing the entire application lifecycle.\n- Depth (3.8): There is some detail about delivering value and feedback cycles, but nothing about ALM's broader scope (tooling, governance, risk, change management, etc.).\n- Intent (5.2): The intent is to explain 'working software' as an agile deliverable, which is only indirectly related to ALM; the purpose does not match the ALM category but can serve as a foundational discussion for some ALM practitioners.\n- Audience (4.6): The audience seems to be Agile team members, Scrum Masters, and general software practitioners, not people explicitly seeking in-depth ALM knowledge or guidance.\n- Signal (5.1): The discussion remains focused and on-topic with regard to working software and value delivery in Agile contexts—though not much is tangential, most of it is not ALM-focused.\n\nNo penalties are applied as the content is not outdated nor contradictory. The overall confidence is low, categorizing this content as 'Tertiary' at best, as it only very indirectly relates to the Application Lifecycle Management category.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "resourceId": "Working Software",
    "category": "Metrics and Learning",
    "calculated_at": "2025-05-06T11:55:40",
    "ai_confidence": 49.75,
    "ai_mentions": 2.2,
    "ai_alignment": 5.6,
    "ai_depth": 5.1,
    "ai_intent": 5.4,
    "ai_audience": 6.4,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 50.0,
    "reasoning": "The content primarily discusses 'working software' as an Agile/Scrum artifact, emphasizing its role as a tangible outcome, a measure of progress, and a vehicle for value delivery. There are indirect allusions to measurement (e.g., 'primary measure of success', 'real, tangible measure of progress'), feedback ('feedback received', 'continuous feedback and improvement'), and continuous improvement. However, it does not explicitly discuss metrics, data analysis, evidence-based management, or specific feedback mechanisms—the core markers of the Metrics and Learning category as defined. Direct Mentions (2.2): There are few, non-explicit references to measurement, with no direct naming of metrics, feedback loops, or learning cycles. Conceptual Alignment (5.6): The theme of delivering value, measuring progress through artifacts, and using feedback aligns partially with the category, but is not central nor comprehensive. Depth (5.1): The exploration remains surface-level regarding metrics and learning, focusing instead on product delivery and value alignment. Intent (5.4): The main intent is to clarify what constitutes working software in Agile/Scrum, not to educate on metrics or learning systems. Audience (6.4): The material targets Agile practitioners and teams—a partially overlapping audience, but not specifically those interested in metrics or process learning. Signal (7.0): The content mostly sticks to its topic without much filler, but is not strictly focused on metrics or learning. No penalties are applied, as the tone is positive and aligned with current practice. Overall, while there is tangential relevance, the content is not primarily or substantially about Metrics and Learning as strictly defined.",
    "level": "Tertiary"
  },
  "Lean Principles": {
    "resourceId": "Working Software",
    "category": "Lean Principles",
    "calculated_at": "2025-05-06T11:55:41",
    "ai_confidence": 69.24,
    "ai_mentions": 2.3,
    "ai_alignment": 7.3,
    "ai_depth": 5.35,
    "ai_intent": 6.95,
    "ai_audience": 8.3,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 69.0,
    "reasoning": "The content centers primarily on the concept of 'working software' within Agile and Scrum contexts, with multiple indirect and one explicit mention of 'Lean.' Direct Mentions: 'Lean' is only referenced in the introductory sentence and not elaborated, resulting in a low (2.3) Direct Mentions score. Conceptual Alignment: The content discusses value delivery, continuous improvement, adaptability, and customer focus—elements consistent with Lean thinking (7.3). However, it places greater emphasis on Agile/Scrum artifacts than on Lean Principles per se. Depth of Discussion: The discussion of Lean is shallow; it does not explore Lean-specific tools, waste reduction, or process optimization beyond the general link to value and improvement (5.35). Intent/Purpose Fit: The intent is to describe what 'working software' means in iterative development—closely related to Lean in spirit, but not primarily a Lean-focused document (6.95). Audience Alignment: The material is suitable for practitioners and stakeholders interested in Agile, Lean, or Scrum, with the language appropriate to that audience (8.3). Signal-to-Noise: The content is focused and largely relevant, with little filler or digression (9.1). No penalties were applied, as the content is current and does not undermine or contradict Lean Principles, though its emphasis is on Agile with secondary applicability to Lean. The level is Secondary, as Lean Principles are mentioned and somewhat integrated but not the primary subject. The final confidence (69.24) reflects moderate but secondary alignment with the Lean Principles category.",
    "level": "Secondary"
  },
  "Market Adaptability": {
    "resourceId": "Working Software",
    "category": "Market Adaptability",
    "calculated_at": "2025-05-06T11:55:41",
    "ai_confidence": 72.807,
    "ai_mentions": 4.4,
    "ai_alignment": 8.2,
    "ai_depth": 7.7,
    "ai_intent": 7.1,
    "ai_audience": 7.6,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 73.0,
    "reasoning": "While the content does not directly name 'market adaptability', it is built upon Agile and Lean concepts that are central to enhancing market responsiveness, referencing how working software supports adaptability, iterative delivery, and feedback. The conceptual alignment is strong because working software is pivotal in Agile for responding to changing requirements and customer needs—a key trait for market adaptability. The article explores the role of increments, feedback, adapting to customer needs, and aligning team efforts, which all indirectly contribute to adaptability. However, the discussion remains focused on the artifact ('working software') rather than the broader organizational strategies for market adaptability, missing dedicated case studies, explicit methods for market sensing, or in-depth market response strategy analysis. The intent is moderately aligned: it's geared towards practitioners interested in Agile value delivery (relevant for market adaptation), but the central purpose is more about establishing the importance of working software than deep-diving into adaptability techniques. The audience fits reasonably well—practitioners and managers in software—though not explicitly market strategists. The signal is high, as most content is relevant, but a portion addresses general Agile good practices. There are no obsolete references or critical/satirical tones, so no penalties are applied. The article is clearly related to Market Adaptability as a secondary topic—foundational, but not comprehensive nor primary.",
    "level": "Secondary",
    "reasoning_summary": "The content aligns with the Market Adaptability category by emphasising Agile and Lean principles that support responsiveness to market changes. While it centres on working software rather than explicit market strategies, it highlights adaptability through feedback, iteration, and meeting customer needs. The focus is practical and relevant for practitioners, making it a solid, though not exhaustive, fit for this category."
  },
  "Evidence Based Management": {
    "resourceId": "Working Software",
    "category": "Evidence Based Management",
    "calculated_at": "2025-05-06T11:55:41",
    "ai_confidence": 48.726,
    "ai_mentions": 2.1,
    "ai_alignment": 5.8,
    "ai_depth": 5.3,
    "ai_intent": 4.4,
    "ai_audience": 4.9,
    "ai_signal": 3.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 49.0,
    "reasoning": "Direct Mentions (2.1): The content does not mention 'Evidence Based Management' by name, nor does it reference any of its direct terminology (such as EBM or empirical decision-making). The references to 'value delivery' and 'customer satisfaction' could be tangentially related, but are more generic Agile language.\n\nConceptual Alignment (5.8): There is moderate conceptual overlap, mainly in references to 'delivering value,' 'measures of progress,' and using working software as a concrete result that can inform decisions. However, the content stays within the realm of Agile principles and does not explicitly connect working software to metrics, empirical data, or strategic management practices—core to EBM.\n\nDepth of Discussion (5.3): The depth is moderate but generic—it thoroughly describes what working software is and why it matters in Agile/Scrum environments. The discussion, however, centers on general team and stakeholder alignment, value delivery, and iteration, rather than on how 'working software' supports EBM practices such as data-informed prioritization or outcome management.\n\nIntent / Purpose Fit (4.4): The main intent is to clarify what working software means within Agile and why it is important. This is adjacent to EBM, particularly where it speaks to value, adaptability, and customer satisfaction, but it does not aim to educate or inform specifically on evidence-based practices in management.\n\nAudience Alignment (4.9): The likely audience is Agile practitioners, team leads, and possibly Scrum Masters. While these groups may be interested in EBM, the content is not tailored to managers, strategists, or executives seeking to apply empirical decision-making or EBM frameworks.\n\nSignal-to-Noise Ratio (3.8): A significant portion is focused on reiterating Agile principles and the philosophical value of working software versus output. Only a minor fraction hints towards EBM-relevant ideas. The absence of outcome or evidence-focused data lowers the ratio.\n\nOverall, while 'working software' as a concept is valuable to EBM—especially around delivery of current value and as an inspectable indicator—it is not discussed in a way that directly supports or expands on Evidence Based Management principles. Thus, this content is classified as 'Tertiary' level for EBM, with moderate confidence in fit.",
    "level": "Tertiary"
  },
  "One Engineering System": {
    "resourceId": "Working Software",
    "category": "One Engineering System",
    "calculated_at": "2025-05-06T11:55:41",
    "ai_confidence": 23.783,
    "ai_mentions": 0.7,
    "ai_alignment": 2.9,
    "ai_depth": 2.7,
    "ai_intent": 2.0,
    "ai_audience": 7.7,
    "ai_signal": 5.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses on the concept of 'working software' as understood in Agile, Scrum, and Lean frameworks. There are no direct mentions of One Engineering System (1ES), nor does the content reference any core 1ES principles, its framework, or its approach to standardisation and integration across teams. The discussion is solely about the artifact of working software, its importance in measuring progress, and value delivery in agile contexts. \n\nMentions: 0.7/10 — There is no explicit reference to 1ES or its terminology. The closest overlap is implicit, with mentions of team alignment and collaboration, but these are generic Agile themes.\n\nAlignment: 2.9/10 — While 'enhancing collaboration' and 'improving quality' are mentioned, these concepts are applied to the practice of delivering working software and not to the integration or standardisation of systems or processes (core to 1ES).\n\nDepth: 2.7/10 — The content stays at the level of what working software is and its value; it does not discuss integrated engineering systems, cross-team tooling, or methodological unification.\n\nIntent: 2.0/10 — The main intent is educative regarding working software in Agile, not to inform or support 1ES-related efforts.\n\nAudience: 7.7/10 — The audience is technical practitioners (developers, Scrum Masters), overlapping with some 1ES target stakeholders, but not the precise audience (e.g., engineering system architects or process leaders).\n\nSignal: 5.4/10 — The content is highly focused but only on Agile artifacts, with no broad tangents; however, its relevance to the 1ES category is low.\n\nNo penalties have been applied as the content is current and not critical or satirical about 1ES or any related practice. The overall confidence is low (23.783/100), and the assessment level is Tertiary, meaning any connection to One Engineering System is at best indirect and conceptual (themes of measurement, collaboration, and quality) but lacking substantive system-level integration or standardisation content.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "resourceId": "Working Software",
    "category": "Portfolio Management",
    "calculated_at": "2025-05-06T11:55:42",
    "ai_confidence": 7.483,
    "ai_mentions": 0.4,
    "ai_alignment": 1.1,
    "ai_depth": 0.8,
    "ai_intent": 1.2,
    "ai_audience": 2.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content narrowly focuses on the concept of 'working software' as an outcome within Agile development. It discusses iterative delivery, the Definition of Done, and the value of increments at the team level. There is no explicit mention of portfolio management, nor are there references to strategic alignment, prioritisation frameworks, value stream mapping, portfolio-level metrics, or investment decisions. The discussion is oriented entirely toward team-level execution and delivery. As such, the content only tangentially aligns with Portfolio Management (perhaps in its broadest sense, insofar as working software contributes to value—but without contextualising that within portfolio-level practices, decision-making, or strategic alignment). The depth of discussion on portfolio-level topics is essentially absent, and the intent is not aimed at a portfolio management audience. While the content may be of some relevance to portfolio managers (as software increments ultimately roll up into portfolios), the focus and signal-to-noise ratio are very low for this category. No penalties were required as the content is current, factual, and neutral in tone. Thus, the content is categorised as 'Tertiary' for Portfolio Management, meriting a very low confidence score.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "resourceId": "Working Software",
    "category": "Self Organisation",
    "calculated_at": "2025-05-06T11:55:44",
    "ai_confidence": 53.477,
    "ai_mentions": 1.4,
    "ai_alignment": 5.9,
    "ai_depth": 5.8,
    "ai_intent": 6.3,
    "ai_audience": 7.1,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content primarily focuses on defining and exploring the importance of 'working software' as an artifact in Agile, Scrum, and Lean methodologies. \n\n1. **Direct Mentions (1.400):** The term 'self-organisation' is not mentioned at all in the content. There are indirect allusions to teamwork and collaboration, but no direct or explicit references to self-organisation.\n\n2. **Conceptual Alignment (5.900):** While the post discusses agile principles, iterative delivery, and some concepts (like adaptive planning, collaboration, and incremental delivery) that can correlate with self-organisation, its ideas are aligned mainly with Agile value delivery and product focus. The connection to self-organisation is present, but indirect and not central.\n\n3. **Depth of Discussion (5.800):** The discussion is moderately deep on the value, criteria, and function of working software, but only tangentially touches practices that facilitate self-organisation (e.g., collaboration, adaptiveness). It doesn't explore principles, tools, or leadership elements supporting self-organisation.\n\n4. **Intent / Purpose Fit (6.300):** The main intent is to describe what working software is and why it's important, highlighting value delivery, adaptability, and team collaboration. While these support self-organisation in an incidental way, the piece is not intended to educate about or guide self-organisation practices specifically.\n\n5. **Audience Alignment (7.100):** The content targets agile practitioners and stakeholders (e.g., team members, product owners), which is broadly aligned with the self-organisation category audience.\n\n6. **Signal-to-Noise Ratio (7.600):** The content is focused and relevant to Agile, with little extraneous information. However, since most content relates to working software rather than self-organisation per se, the signal is only strong if interpreting self-organisation in the broadest Agile context.\n\nThere are no penalties: the content is up-to-date, not satirical, and does not contradict the category philosophy. \n\n**Level:** Tertiary: The category is only indirectly addressed, and the content is several steps removed from the main focus of self-organisation.\n\nOverall, while the concepts mentioned can enable or be enabled by self-organising teams, 'self-organisation' itself is not the main topic, purpose, or explicit focus of the piece.",
    "level": "Tertiary"
  },
  "Decision Making": {
    "resourceId": "Working Software",
    "category": "Decision Making",
    "calculated_at": "2025-05-06T11:55:41",
    "ai_confidence": 57.654,
    "ai_mentions": 2.7,
    "ai_alignment": 7.2,
    "ai_depth": 6.8,
    "ai_intent": 6.7,
    "ai_audience": 7.8,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 58.0,
    "reasoning": "The content primarily focuses on defining the concept of 'working software' within Agile frameworks, particularly its role as a core artifact and a measure of progress and value. \n\n- **Direct Mentions (2.7):** The explicit phrase 'decision making' does not appear, nor is there a direct reference to specific decision-making frameworks. However, there are indirect mentions about how working software 'directly informs decisions' and helps teams adjust based on feedback, lending a minor connection.\n\n- **Conceptual Alignment (7.2):** The content aligns moderately well with the Decision Making category by describing how working software enables inspection, adaptation, and the ability to respond to feedback—core empirical elements of decision making. Collaboration and adaptability are mentioned, but these are more supportive than central to the theme.\n\n- **Depth of Discussion (6.8):** While the importance of working software in enabling feedback, collaboration, and continuous improvement is discussed, the content stops short of deeply exploring structured, evidence-based decision-making frameworks or explicit decision processes. The connection is implied rather than extensively explored.\n\n- **Intent / Purpose Fit (6.7):** The intent is centered on informing the benefits and significance of working software, not strictly on how to make evidence-based decisions. However, by linking working software to adaptation, feedback, and stakeholder alignment, it partially serves the purpose of helping informed decisions.\n\n- **Audience Alignment (7.8):** The content targets Agile teams and stakeholders, overlapping with some of the audience for evidence-based decision making (e.g., Scrum practitioners, Agile coaches), though not explicitly for decision-makers per se.\n\n- **Signal-to-Noise Ratio (6.9):** The content is mostly focused on the concept, but only a portion is relevant to evidence-based decision-making; much is standard explanation or advocacy for working software. Little is tangential or filler, but the relevance to the core theme isn't sustained throughout.\n\n- **Penalties:** No penalty deductions were necessary, as the content is reasonably current, neutral in tone, and not explicitly critical or outdated.\n\n- **Level:** Secondary, because while the content supports informed and iterative decision making, decision making itself is not the primary subject—the focus is on working software; the connection is a functional consequence, not a central theme.\n\nExamples: The content discusses how working software 'directly informs decisions' and how feedback from software increments leads to adaptation—a sign of empirical adjustment. However, concrete mention or deep discussion of structured decision-making practices, cognitive bias, or the use of analytics/metrics is absent.",
    "level": "Tertiary"
  },
  "Remote Working": {
    "resourceId": "Working Software",
    "category": "Remote Working",
    "calculated_at": "2025-05-06T11:55:41",
    "ai_confidence": 10.66,
    "ai_mentions": 0.3,
    "ai_alignment": 1.2,
    "ai_depth": 1.4,
    "ai_intent": 2.2,
    "ai_audience": 2.0,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content thoroughly discusses the concept of 'working software' as defined in Agile, Scrum, and Lean frameworks, highlighting its value, its role as an artifact, and its importance for teams and stakeholders. However, it does not mention or address remote working, distributed teams, remote Agile practices, communication challenges, or tools associated with remote collaboration. \n\n- Direct Mentions (0.3): There are no references to remote work, distributed teams, or tools; only Agile/working software terms are present.\n- Conceptual Alignment (1.2): The concept of working software is relevant to Agile in general but not directly linked to remote working practices or challenges—the core category meaning.\n- Depth (1.4): The content explores 'working software' in depth, but all details relate strictly to software increments, not to remote-work context or issues.\n- Intent (2.2): The main purpose is to clarify and promote the importance of working software in Agile, which only slightly overlaps with the remote working audience if they are part of an Agile team, but it is not aimed at remote working practices.\n- Audience (2.0): While Agile practitioners are the audience, the specific target of remote/distributed Agile teams is not addressed; it is general Agile content.\n- Signal-to-Noise (2.1): The entirety is focused on 'working software' with zero content on remote working, so all is noise relative to the category.\n\nNo penalties were warranted, as the content is not outdated or critical, just off-category. However, all scoring reflects the near-total absence of category relevance. The 'Tertiary' level is justified, as the only indirect connection is that remote teams also seek to deliver working software, but this is not addressed in any way. Final confidence score (10.66) accurately reflects the minor, almost negligible, alignment with the Remote Working category.",
    "level": "Ignored"
  },
  "Product Management": {
    "resourceId": "Working Software",
    "category": "Product Management",
    "calculated_at": "2025-05-06T11:55:42",
    "ai_confidence": 66.833,
    "ai_mentions": 2.9,
    "ai_alignment": 7.7,
    "ai_depth": 6.9,
    "ai_intent": 7.8,
    "ai_audience": 8.1,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content focuses on the role of 'working software' as a deliverable and artifact in Agile, Scrum, and Lean frameworks. It highlights the importance of tangible output, value delivery, customer satisfaction, stakeholder alignment, and responding to feedback—all of which are important concerns in Product Management. However, the discussion is structured more around the conceptual and practical significance of 'working software' in agile teams rather than on the strategic frameworks, decision-making methodologies, or product lifecycle management that define the core of Product Management.\n\n- **Direct Mentions (2.9)**: There is no explicit mention of 'Product Management' or 'product manager.' Instead, the content positions 'working software' in frameworks closely aligned with Product Management (Agile, Scrum, Lean). The term 'product' appears, but not in a way that clearly calls out Product Management as a discipline.\n- **Conceptual Alignment (7.7)**: The core ideas—value delivery, stakeholder alignment, adapting to customer needs, business success—are all areas Product Management cares about, but they are approached from the team/process output perspective, not from the strategic product manager viewpoint. Thus, strong alignment, but not perfect.\n- **Depth of Discussion (6.9)**: The content provides a comprehensive explanation of 'working software,' including its value, how it impacts teams, stakeholders, and organizations. However, its discussion is not as deep on Product Management frameworks, prioritization methods, or strategic trade-offs, so its depth on the category is moderate.\n- **Intent / Purpose Fit (7.8)**: The main purpose is to inform about the concept and importance of 'working software' in the agile process—not about guiding product managers specifically. However, it's still relevant to Product Management as a supporting topic.\n- **Audience Alignment (8.1)**: The content is suitable for audiences interested in agile methods, software delivery, and ensuring value delivery (including product managers). However, it is not precisely targeted at senior product leaders or strategists, but is highly relevant for practitioners who work closely with product teams.\n- **Signal-to-Noise Ratio (8.2)**: The text is consistently on-topic, relevant, and focused, with minimal filler or off-topic content.\n\nNo penalties are applied because the content is current, accurate, supportive of agile practices (in alignment with Product Management principles), and does not contradict or undermine the category.",
    "level": "Secondary"
  },
  "Platform Engineering": {
    "resourceId": "Working Software",
    "category": "Platform Engineering",
    "calculated_at": "2025-05-06T11:55:41",
    "ai_confidence": 15.833,
    "ai_mentions": 0.45,
    "ai_alignment": 1.1,
    "ai_depth": 0.95,
    "ai_intent": 0.8,
    "ai_audience": 1.25,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content explicitly centers on 'Working Software' as an Agile/Scrum/Lean artifact, focusing on concepts such as increments, delivery of value, iteration, and team alignment. It does not mention, reference, or discuss platform engineering, internal developer platforms, or any of the discipline’s key concepts such as self-service capability, standardisation, or developer productivity mechanisms tied to platform solutions. \n\n- Direct Mentions (0.450): Platform Engineering or related key terms are never named or referenced.\n- Conceptual Alignment (1.100): The content broadly relates to software development, but does not touch upon internal platforms, automation, or platform-driven developer productivity. While improving team productivity is loosely implied, it is not aligned with platform engineering principles.\n- Depth of Discussion (0.950): The discussion is deep in relation to 'working software' but not as it pertains to platform engineering; no specifics or even surface-level nods to the platform context.\n- Intent (0.800): The main purpose is to explain the value and function of 'working software' in Agile rather than to relay information about platform engineering principles. Connection is at best tangential.\n- Audience (1.250): While developers and technical teams are the intended audience, the context is general Agile practice, not specialized platform engineering practitioners or platform teams.\n- Signal-to-Noise Ratio (2.300): The content is focused and well-written, but nearly all of it is outside the scope of Platform Engineering. \n\nNo penalties were applied, as the content is current and its tone is factual. The evaluation lands this content as 'Tertiary'—at most, there is a distant, implicit relationship via the broad space of software development, but nothing substantial connects it to Platform Engineering.",
    "level": "Ignored"
  },
  "Scaling": {
    "resourceId": "Working Software",
    "category": "Scaling",
    "calculated_at": "2025-05-06T11:55:42",
    "ai_confidence": 12.35,
    "ai_mentions": 0.5,
    "ai_alignment": 1.2,
    "ai_depth": 2.1,
    "ai_intent": 1.6,
    "ai_audience": 2.3,
    "ai_signal": 1.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses exclusively on the concept of 'working software'—its definition, importance, and role in Agile and Scrum team practices. \n\n— Direct Mentions (0.5): There are no explicit or implicit mentions of 'scaling,' coordination between multiple teams, or frameworks like SAFe, LeSS, or Nexus.\n— Conceptual Alignment (1.2): The importance of working software applies in scaling contexts, but the text does not discuss scaling methodologies, cross-team strategies, or complex product delivery.\n— Depth of Discussion (2.1): The discussion is thorough about 'working software' in general Agile/Scrum practice, but offers no substantial exploration of scaling-specific topics.\n— Intent/Purpose Fit (1.6): The core intent is to articulate the importance of working software in iterative development, rather than addressing problems or approaches relevant to scaling.\n— Audience (2.3): The audience could include scaling practitioners, but the tone and focus are on general Agile/Scrum teams, not those coordinating across divisions or at enterprise scale.\n— Signal-to-Noise Ratio (1.4): Content is focused and relevant to Agile/Scrum, but not to the scaling category—almost all is off-topic for the given classification.\n\nNo penalties are applied because the text is current and does not contradict or undermine scaling principles—it is simply out of scope for the 'Scaling' category. The classification level is 'Tertiary' since the only distant connection is that 'working software' is an artifact that appears within scaled frameworks, but this is not explored. The low confidence score (12.35) accurately reflects the lack of direct relevance to the scaling definition provided.",
    "level": "Ignored"
  },
  "GitHub": {
    "resourceId": "Working Software",
    "category": "GitHub",
    "calculated_at": "2025-05-06T11:55:42",
    "ai_confidence": 7.85,
    "ai_mentions": 0.2,
    "ai_alignment": 1.0,
    "ai_depth": 1.1,
    "ai_intent": 1.2,
    "ai_audience": 2.1,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content thoroughly discusses 'working software' as a concept within Agile, Scrum, and Lean frameworks, emphasizing value delivery, iterations, customer feedback, and the Definition of Done. However, it contains no direct or indirect references to GitHub, its tools, or methodologies. There are no mentions of repositories, version control, collaboration features, CI/CD, branching, or anything related to GitHub. The audience is technical (teams, stakeholders), but focused on agile processes—not specifically GitHub practitioners. Almost all of the discussion is about Agile best practices, not about any platform or tooling (let alone GitHub). These factors result in the lowest possible scores across all dimensions, with the only slight increase in the audience and signal categories for being moderately relevant to technical practitioners, but with minimal applicability to GitHub. No penalties are applied since there is nothing obsolete or actively negative—just a complete lack of relation to the 'GitHub' category.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "resourceId": "Working Software",
    "category": "Agile Product Management",
    "calculated_at": "2025-05-06T11:55:43",
    "ai_confidence": 73.93,
    "ai_mentions": 4.8,
    "ai_alignment": 8.2,
    "ai_depth": 7.8,
    "ai_intent": 7.0,
    "ai_audience": 7.4,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 74.0,
    "reasoning": "The content directly discusses the concept of 'working software' within agile frameworks, focusing on its role as a primary measure of progress and value delivery. It references Agile, Scrum, and Lean, and provides context relating to value delivery, feedback, increments, and stakeholder alignment. \n\n- Mentions Score (4.8): The content contains several explicit mentions of 'Agile', 'Scrum', and related terms (e.g., Sprint, Increment), but does not directly state 'Agile Product Management' or heavily focus on the product management discipline itself—thus, moderately low for direct mentions.\n- Conceptual Alignment (8.2): Strong alignment exists: The content is consistent with Agile Product Management themes, such as value delivery, stakeholder alignment, iterative delivery, and adaptation to customer feedback. However, it lacks direct discussion about product strategy, backlog prioritisation, or the Product Owner’s role.\n- Depth (7.8): The piece offers a detailed explanation about 'working software' as an artifact and its role in Agile delivery, but does not go substantially in depth on Agile Product Management processes, techniques, or best practices. It remains focused on a central artifact rather than the encompassing management approach.\n- Intent/Purpose Fit (7.0): The main intent is informative, particularly for audiences interested in agile delivery and the meaning of 'working software'. However, it is not directly tailored to offer guidance or deep insights specifically for Agile Product Management practitioners or decision-makers.\n- Audience Alignment (7.4): The content appears aimed at agile team members, Scrum Masters, and potentially Product Owners, but not explicitly at product managers—so the audience fit is reasonable but not ideal.\n- Signal/Noise Ratio (8.1): The content is highly focused and relevant to agile practices, with minimal extraneous information. There are no tangents or off-topic sections.\n- Penalties: No deductions were warranted. The content is current and does not undermine the Agile Product Management framing.\n\nOverall, the content is strongly but not perfectly aligned with Agile Product Management. It is best classified as 'Secondary' because, while it relates directly to value delivery and artifacts in Agile, it does not cover the broader set of Agile Product Management practices, roles, or strategies in depth.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the 'Secondary' category for Agile Product Management. While it thoroughly explains 'working software' within agile frameworks and touches on value delivery and stakeholder alignment, it doesn’t delve deeply into product management roles, strategy, or specific practices. Its focus is more on agile delivery than on the broader discipline of Agile Product Management, making it relevant but not central to the category."
  },
  "Social Technologies": {
    "resourceId": "Working Software",
    "category": "Social Technologies",
    "calculated_at": "2025-05-06T11:55:42",
    "ai_confidence": 71.38,
    "ai_mentions": 2.3,
    "ai_alignment": 8.4,
    "ai_depth": 7.9,
    "ai_intent": 7.5,
    "ai_audience": 7.2,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 71.0,
    "reasoning": "The content focuses on 'working software' as a product of Agile, Scrum, and Lean frameworks—contexts deeply associated with Social Technologies. It describes working software as a mechanism for value delivery, transparency, iterative improvement, and collaboration, which strongly aligns with the category definition. \n\n**Direct Mentions (2.3):** The term 'social technologies' is not explicitly used, and the primary explicit focus is on 'working software.' Occasional references to frameworks (Agile, Scrum, Lean) are made, but not the abstract social-technical principles directly.\n\n**Conceptual Alignment (8.4):** The description attaches working software to core practices of Social Technologies: value delivery, continuous improvement, teamwork, transparency, and adaptability. However, more focus is on the artifact itself than social frameworks.\n\n**Depth of Discussion (7.9):** The exploration goes beyond the surface, covering the link between working software, feedback, iterative improvement, team alignment, and customer value. It implicitly discusses self-organisation and adaptability but does not deeply delve into collective intelligence or decision-making frameworks.\n\n**Intent/Purpose Fit (7.5):** The intent is to illuminate the role and broader importance of working software in value delivery and collaboration, matching the spirit of Social Technologies, though emphasis on team/social mechanisms is limited.\n\n**Audience Alignment (7.2):** The piece is aimed at practitioners familiar with Agile or Lean rather than general executives or solely technical roles, closely matching the Social Technologies audience but not specifically targeting leaders of social change frameworks.\n\n**Signal-to-Noise (7.7):** The content is focused, with very little tangential or filler material. It stays on the topic of working software’s organizational and team impact.\n\n**Level:** Rated Secondary because working software is an output of social technologies, but the content does not focus primarily on the frameworks, mechanisms, or methodologies themselves—it describes the result and briefly contextualises it within social systems rather than giving social strategies centerstage.\n\n**Penalties:** No penalties applied: content is modern, neutral or positive in tone, and references standard Agile/Lean approaches.\n\nOverall, while the description provides solid conceptual alignment and relates to the core outcomes enabled by Social Technologies, it does not deeply discuss the social frameworks or emergent problem-solving mechanisms themselves, resulting in a confidence score just above 70.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the category because it links working software to key principles of Social Technologies—such as value delivery, collaboration, and iterative improvement—within Agile, Scrum, and Lean contexts. However, it focuses more on the software as an outcome rather than exploring the underlying social frameworks or collective practices in depth, making it a secondary rather than primary example of the category."
  },
  "Shift Left Strategy": {
    "resourceId": "Working Software",
    "category": "Shift Left Strategy",
    "calculated_at": "2025-05-06T11:55:42",
    "ai_confidence": 13.833,
    "ai_mentions": 0.3,
    "ai_alignment": 2.0,
    "ai_depth": 2.1,
    "ai_intent": 2.8,
    "ai_audience": 3.0,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses exclusively on the concept of 'working software' as defined within Agile and Scrum practices—its nature as an artifact, role in measuring progress, and its value as an increment. There is no explicit or implicit mention of Shift-Left Strategy, nor discussion of integrating testing, security, or compliance earlier in the software development lifecycle. 'Working software' as an outcome is described, but without linking to Shift-Left principles, methods, or case studies. \n\n- Mentions (0.3): There are zero direct mentions of 'Shift-Left'; content doesn't allude to related terminology or practices.\n- Alignment (2.0): The content only tangentially connects to Shift-Left by referencing quality and feedback loops, but these are general Agile concepts rather than core Shift-Left strategies.\n- Depth (2.1): The discussion provides depth on 'working software' but not on Shift-Left, integration of testing/security/compliance, or proactive issue identification.\n- Intent (2.8): The purpose is Agile education around deliverables, not informing or discussing Shift-Left Strategy. Any connection is accidental or at most tangential.\n- Audience (3.0): The audience may include Agile practitioners—an overlap with likely Shift-Left strategy audiences (such as developers, quality engineers), but the discussion does not require Shift-Left expertise.\n- Signal (2.7): High focus on 'working software', but not on required signal for Shift-Left; thus, only weak relevance.\n\nNo penalties are applied, as content is not outdated or contradictory in tone. With the weighted formula, confidence for this resource's relevance to the Shift-Left Strategy is very low and at the tertiary level—any connection is indirect and non-substantive.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "resourceId": "Working Software",
    "category": "Cell Structure Design",
    "calculated_at": "2025-05-06T11:55:45",
    "ai_confidence": 8.35,
    "ai_mentions": 0.15,
    "ai_alignment": 0.3,
    "ai_depth": 0.25,
    "ai_intent": 0.35,
    "ai_audience": 0.5,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses entirely on the concept of 'working software' within Agile, Scrum, and Lean—it covers the definition, significance, and principles underlying working software increments. However, it never directly mentions Cell Structure Design, the Beta Codex, autonomous cells, decentralised structures, or any aspects specific to the defined category. There are zero explicit or implicit references to the network-based, self-organising units or to organisational model transitions. The conceptual alignment is minimal; while transparency, adaptability, and value delivery are noted, these are in the context of software iteration, not as elements of structural design. No in-depth exploration of organisational structure occurs; terms such as 'teams' and 'stakeholders' are discussed in a generic Agile context. The audience is practitioners of Agile/Scrum—possibly overlapping with some of the category's audience, but not directed to organisational structure strategists. The content is focused but is off-topic with respect to Cell Structure Design, resulting in low scores across all dimensions. No penalties were applied, as the content is neither outdated nor misaligned in tone. This earns a tertiary classification—not at all a match, except for a few generic values (e.g., transparency, adaptability) that lightly echo themes in Cell Structure Design without substantial overlap.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "resourceId": "Working Software",
    "category": "Customer Satisfaction",
    "calculated_at": "2025-05-06T11:55:42",
    "ai_confidence": 77.371,
    "ai_mentions": 7.2,
    "ai_alignment": 8.6,
    "ai_depth": 7.9,
    "ai_intent": 7.5,
    "ai_audience": 8.1,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 77.0,
    "reasoning": "The content primarily explores the definition and foundational importance of working software within Agile, Scrum, and Lean—emphasizing its role as a measure of value delivery, adaptability, and a response to customer needs. There are several explicit references and conceptual ties to customer satisfaction, particularly lines like 'addresses real-world needs and customer expectations', 'delivering value consistently', and 'teams ensure ... drive customer satisfaction, innovation, and business success.' However, the main focus remains on the artifact of working software itself—the mechanics, the process, and its significance as an Agile principle. \n\n(1) Mentions: Customer satisfaction is explicitly named in closing, but most direct references are to value delivery, customer expectations, and feedback loops. These are closely aligned but not direct repeated mentions of customer satisfaction (score: 7.2). \n(2) Alignment: The theme of ensuring software meets customer needs, using feedback for improvement, and the effect of the working software as a vehicle to create satisfaction is strong, but the content's frame is still working software, not satisfaction process/measures per se (score: 8.6). \n(3) Depth: The piece goes beyond superficial mentions by connecting working software to customer value and feedback cycles, but it does not deeply detail measurement techniques, satisfaction methodologies, or specific initiatives focused exclusively on satisfaction (score: 7.9). \n(4) Intent: The purpose is informative regarding working software, but customer satisfaction remains a secondary rather than primary intent—supportive yet not central (score: 7.5). \n(5) Audience: The content is well-aligned for Agile practitioners, Scrum teams, and product owners—matching the intended audience for customer satisfaction topics in Agile/DevOps (score: 8.1). \n(6) Signal: Content is focused, succinct, and stays on topic with minimal filler; most information is relevant to the working software/customer value/satisfaction nexus (score: 8.3). \n\nNo penalties are applied, as the content is modern, neutral-positive in framing, and references established Agile theory. However, the topic of customer satisfaction is addressed in a secondary capacity: working software as a driver toward satisfaction, not as the central analytical focus. Thus, the overall weighting reflects a 'Secondary' classification: highly relevant for those looking at customer satisfaction implications within Agile, but not a technically primary resource for the satisfaction category itself.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the category in a secondary way—it highlights how working software in Agile supports customer satisfaction, referencing value delivery and feedback loops. However, its main focus is on the software itself, not on customer satisfaction as a primary topic. It’s useful for understanding the connection, but not as a dedicated resource on satisfaction measurement or processes."
  },
  "Change Management": {
    "resourceId": "Working Software",
    "category": "Change Management",
    "calculated_at": "2025-05-06T11:55:43",
    "ai_confidence": 34.147,
    "ai_mentions": 1.5,
    "ai_alignment": 3.4,
    "ai_depth": 3.6,
    "ai_intent": 2.7,
    "ai_audience": 6.2,
    "ai_signal": 4.45,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content is about the concept of 'working software' as an Agile artifact, emphasizing its role as a measure of value, progress, collaboration, and adaptation within Agile frameworks like Scrum. However, there is no direct mention of change management. The discussion aligns with Agile principles such as continuous improvement and adaptation, which are relevant to change management, but does not discuss strategies, leadership, stakeholder resistance, or culture directly. The depth is limited to the artifact itself, not the broader organizational transformation or management strategies. The purpose is primarily to clarify a key Agile artifact for practitioners or Agile teams, matching the audience somewhat, but intent and alignment with Change Management are notably indirect. There is zero off-topic or outdated information, so no penalties are warranted. Overall, this is a tangential (tertiary) fit at best: while the content supports values that enable change (adaptability, continuous improvement), it does not substantively explore how to facilitate and manage organizational change.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "resourceId": "Working Software",
    "category": "Agile Frameworks",
    "calculated_at": "2025-05-06T11:55:43",
    "ai_confidence": 74.75,
    "ai_mentions": 7.2,
    "ai_alignment": 7.9,
    "ai_depth": 7.5,
    "ai_intent": 7.8,
    "ai_audience": 8.1,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 75.0,
    "reasoning": "The content explicitly mentions Agile, Scrum, and Lean frameworks, making clear reference to working software as a key artifact in these contexts. It strongly aligns with core Agile principles, particularly delivering working software as a measure of progress and value. The main intent is informative and educative, suitable for practitioners, Agile team members, and stakeholders interested in Agile delivery outcomes. The discussion goes beyond superficiality by describing the relationship between working software and Agile practices (e.g., Definition of Done, increments, transparency, feedback). However, there is less comparative discussion about multiple frameworks, limited mention of other Agile frameworks than Scrum and Lean, and a focus more on artifact significance than on frameworks themselves, thus not fully exploring the breadth of 'Agile Frameworks' as a category. The content maintains high signal with minimal tangential material. No penalties were required as the information is current, and the tone is consistent with Agile philosophies. 'Secondary' level is most appropriate, as the content is focused on a foundational principle central to Agile, referencing frameworks, but not providing systematic framework comparison or in-depth framework analysis.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the category as it clearly discusses Agile, Scrum, and Lean, focusing on working software as a key Agile outcome. It educates readers on how this concept ties into Agile practices, making it valuable for practitioners. However, it doesn’t deeply compare multiple frameworks, instead emphasising the importance of working software within a few frameworks. Overall, it’s informative and relevant, but not fully comprehensive."
  },
  "Continuous Learning": {
    "resourceId": "Working Software",
    "category": "Continuous Learning",
    "calculated_at": "2025-05-06T11:55:43",
    "ai_confidence": 54.6,
    "ai_mentions": 1.5,
    "ai_alignment": 5.7,
    "ai_depth": 4.9,
    "ai_intent": 6.6,
    "ai_audience": 7.2,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content is primarily a detailed explanation of 'Working Software' as a core Agile artifact—its meaning, role, and value. \n\n1. Mentions (1.5): The term 'Continuous Learning' is not explicitly mentioned. There are vague allusions to continuous improvement and adaptation but no direct references. Mentions of 'continuous feedback' and 'continuous improvement' are present but are secondary to the main focus.\n\n2. Alignment (5.7): There is partial alignment. The content touches on feedback loops, adaptive planning, and the role of working software in driving improvement. However, the main theme or message is not about continuous learning or building a learning culture. These concepts are supporting rather than central elements.\n\n3. Depth (4.9): The discussion of continuous learning practices is limited and mostly implied. Key points (like adaptation, feedback, improvement) are present but not explored in depth—most of the detail focuses on the increment and business value of working software.\n\n4. Intent (6.6): The intent is compatible but not a direct fit. The content seeks to inform and support Agile teams, discussing iterative improvement and value delivery, which resonates with continuous learning themes, albeit in a supporting role.\n\n5. Audience (7.2): The audience is well-aligned; it targets practitioners, technical teams, and Agile stakeholders who would be interested in continuous learning, but the content itself is not tailored specifically toward promoting learning culture or knowledge sharing.\n\n6. Signal (6.5): The majority of the content is relevant to Agile concepts, with secondary allusions to improvement and adaptation. Very little filler or tangential content, though focus is not directly on the continuous learning domain.\n\nNo penalties were warranted: the content is current, serious, and does not undermine the category. Thus, the confidence score is modest—this content provides secondary context for continuous learning but is not a primary fit. The level is 'Secondary' because, while not off-topic, the principles of continuous learning are neither central nor comprehensively covered.",
    "level": "Tertiary"
  },
  "Product Development": {
    "resourceId": "Working Software",
    "category": "Product Development",
    "calculated_at": "2025-05-06T11:55:43",
    "ai_confidence": 92.1,
    "ai_mentions": 8.8,
    "ai_alignment": 9.6,
    "ai_depth": 9.3,
    "ai_intent": 9.1,
    "ai_audience": 8.6,
    "ai_signal": 8.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content discusses 'working software' in the context of Agile and Scrum, emphasizing it as a primary artifact and measure of progress in iterative development. \n\n1) Mentions (8.8): The term 'working software' is frequently and explicitly referenced; Agile, Scrum, and Lean are also mentioned multiple times. While the category 'Product Development' is not named verbatim, foundational terms are used extensively and without ambiguity.\n\n2) Alignment (9.6): The core ideas—iterative development, value delivery, focus on customer needs, adaptation, and continuous improvement—map strongly to the Product Development category definition. \n\n3) Depth (9.3): The content moves well beyond surface-level mentions. It details the significance of working software, connects it to fundamental product development artifacts (Increment, Definition of Done), discusses progress, stakeholder alignment, feedback, and Agile values, demonstrating substantial depth on how working software underpins continuous delivery of value.\n\n4) Intent (9.1): The clear intent is to explain the importance and function of working software in Agile, Scrum, and Lean environments, directly supporting the purpose of exploring effective product development practices. The focus is informative and relevant.\n\n5) Audience (8.6): The content targets practitioners and teams involved in product development—Agile practitioners, cross-functional teams, and stakeholders—well-aligned with the intended audience of the category, though the tone is accessible enough for a broader set of product professionals rather than only advanced practitioners or strategists.\n\n6) Signal (8.8): The majority of the content is directly relevant and focused, with little tangential or filler material. There is some overlap with basic Agile/Scrum explanations, but these are necessary for context and do not detract from the relevance.\n\nThere are no outdated concepts, tone issues, or obsolete practices, so no penalties have been applied. Calibration safeguards are checked: Scores differ slightly across dimensions, and the confidence (92.1) feels proportionate considering the high degree of alignment and thorough exploration of product development as defined.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the Product Development category. It thoroughly explores the role of working software in Agile, Scrum, and Lean, highlighting its importance as a measure of progress and value delivery. The discussion is detailed, relevant, and clearly aimed at product development professionals, making it highly suitable for this classification."
  },
  "Empirical Process Control": {
    "resourceId": "Working Software",
    "category": "Empirical Process Control",
    "calculated_at": "2025-05-06T11:55:43",
    "ai_confidence": 82.43,
    "ai_mentions": 6.7,
    "ai_alignment": 8.8,
    "ai_depth": 7.9,
    "ai_intent": 8.3,
    "ai_audience": 8.6,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "This content discusses the concept of 'working software' within the context of Agile, Scrum, and Lean. While it does not explicitly use the phrase 'empirical process control' or directly reference transparency, inspection, and adaptation by name, it strongly alludes to these principles through descriptions of feedback, adaptation, inspection, and iterative development. \n\nDirect Mentions (6.7): The term 'empirical process control' is never directly mentioned, nor are its key advocates, but related concepts such as 'inspection,' 'adaptable,' 'continuous feedback,' and 'increase transparency' are used several times.\n\nConceptual Alignment (8.8): The discussion strongly aligns with empirical process control by emphasizing decision-making based on delivered increments, tangible progress, adaptation to feedback, and transparency through working software as an inspectable increment.\n\nDepth of Discussion (7.9): The exploration is high-level but sustained, highlighting working software as an artifact that enables adaptation, inspection, and continuous improvement, all hallmarks of empirical process control, though it does not delve into in-depth techniques or specific frameworks/literature.\n\nIntent / Purpose Fit (8.3): The piece is intended to inform on why working software matters, and frequently relates its significance to Agile principles that depend on and foster empirical process control (e.g., feedback, adaptation, transparency).\n\nAudience Alignment (8.6): The content targets Agile practitioners, Scrum teams, and those interested in adapting Agile/Lean principles—well aligned to the empiricists' audience.\n\nSignal-to-Noise Ratio (8.1): Most of the content is focused on relevant topics, connecting working software to value, adaptation, and improvement relevant to empirical process control, with minimal tangential information or filler.\n\nLevel: Secondary—The content is primarily about 'working software,' but it robustly supports, illustrates, and implies empirical process control as a foundational principle rather than making it the main focus. There are no penalties, as the content is current, positive in tone, and does not contradict any aspect of the empirical process control category. The confidence score reflects strong implied alignment and coherence with empirical process control, though the lack of explicit naming drops it below a primary classification.",
    "level": "Primary",
    "reasoning_summary": "This content fits the category as it thoroughly explores how 'working software' embodies empirical process control principles, such as feedback, adaptation, and transparency, even if it doesn’t name them directly. It’s aimed at Agile practitioners and effectively links working software to iterative improvement, making it a strong secondary fit for the category despite not being its main focus."
  },
  "Flow Efficiency": {
    "resourceId": "Working Software",
    "category": "Flow Efficiency",
    "calculated_at": "2025-05-06T11:55:43",
    "ai_confidence": 39.23,
    "ai_mentions": 0.7,
    "ai_alignment": 4.9,
    "ai_depth": 3.8,
    "ai_intent": 4.2,
    "ai_audience": 7.3,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "Direct Mentions (0.7): The content does not mention 'Flow Efficiency' or directly refer to related terminology (e.g., throughput, bottlenecks, cycle time) at all. Brief allusions to improvement and delivery are not explicit references to the category.\n\nConceptual Alignment (4.9): There is some thematic overlap in ideas like continuous improvement, iterative work, and value delivery. However, the main focus is on the definition and importance of 'working software' rather than on optimizing throughput or minimizing bottlenecks, making the alignment partial and indirect.\n\nDepth of Discussion (3.8): The content provides a thorough overview of 'working software' as an Agile artifact, but only very lightly touches on concepts (like continuous improvement or adaptation) that could relate to flow efficiency. There is no in-depth discussion of efficiency techniques, metrics, or flow-specific principles.\n\nIntent / Purpose Fit (4.2): The main purpose is to explain what 'working software' means in Agile and why it's valuable, not to optimize flow or throughput. Any alignment with flow efficiency is incidental rather than intentional or central.\n\nAudience Alignment (7.3): The intended readers (practitioners of Agile/Scrum/Lean) overlap with those interested in flow efficiency (technical team members, managers). However, the focus is broad and not specifically aimed at flow efficiency practitioners, which lowers the score slightly.\n\nSignal-to-Noise Ratio (6.8): The writing is mostly focused and informative with few tangents, but most of the signal is about 'working software' as a concept and not about flow efficiency. There is little off-topic or filler content, but the main topic itself is only tangentially related to the category.\n\nNo penalties for outdated information or tone are applied. The content is modern, professional, and the tone is neutral.\n\nOverall, the content relates only distantly to the Flow Efficiency category; it provides foundational context relevant for teams optimizing flow but does not directly address the principles, techniques, or metrics of flow efficiency. Therefore, this fits as a tertiary level resource with a moderately low confidence score.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "resourceId": "Working Software",
    "category": "Agile Philosophy",
    "calculated_at": "2025-05-06T11:55:43",
    "ai_confidence": 80.82,
    "ai_mentions": 6.6,
    "ai_alignment": 8.5,
    "ai_depth": 8.3,
    "ai_intent": 8.0,
    "ai_audience": 8.1,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 81.0,
    "reasoning": "The content provides a detailed exploration of 'working software' and its alignment with Agile values, referencing concepts such as value delivery, customer satisfaction, adaptability, feedback loops, and iterative development, all of which are central to Agile Philosophy. It contrasts artifacts (outcomes) with methods and practices and avoids treating Agile as simply a set of tools. It references terminology from Scrum due to the context, but maintains a consistent focus on why 'working software' matters philosophically for Agile adoption and mindset. \n\nDirect Mentions (6.6): The term 'Agile' and core philosophical concepts (like customer value, adaptation, continuous improvement) are referenced explicitly but not repeatedly. Most mentions are contextual or embedded in explanations about the artifact's meaning within Agile frameworks, rather than direct philosophical expositions, so this is above average but not maximized. \n\nConceptual Alignment (8.5): The content's main ideas—value delivery, transparency, collaboration, adaptability—are tightly connected to Agile Philosophy. It discusses working software as more than just code, situating it as a core philosophical and outcome-based principle. \n\nDepth (8.3): There is a thorough discussion of the implications and significance of working software, including its role in feedback, customer satisfaction, planning, and improvement. It goes beyond definition to explore relevance and impact. Slightly less than maximum, as it might have been strengthened further by framing explicitly around the Agile Manifesto's principles or contrasting specifically with non-Agile philosophies.\n\nIntent (8.0): The content aims to inform and emphasize why 'working software' matters beyond technical measurement, conveying the mindset and ethos of Agile Philosophy—a strong fit for intent. Not maximum, as it serves partly as educational content for definition rather than a deep philosophical treatise.\n\nAudience (8.1): The audience is both practitioners and strategists interested in Agile's underpinnings; executives and technical audiences would both find relevance, but it's not tailored exclusively to Agile philosophy thought leaders.\n\nSignal (7.9): Most of the content is relevant; some repetition and minor contextual explanations that briefly touch on framework specifics (e.g., Scrum artifacts) without philosophical exposition pull the signal fractionally down.\n\nNo penalties were applied, as the content is current, accurate, and positive to the Agile Philosophy framing.\n\nOverall, the piece is anchored squarely in the mindset and philosophical basis of Agile (Secondary level), but leans occasionally into framework-specific explanations (like Scrum) as context—thus, it is not Primary, but still solidly within scope.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the Agile Philosophy category, as it thoughtfully explores the deeper meaning of 'working software' within Agile, focusing on values like adaptability, value delivery, and customer satisfaction. While it occasionally references specific frameworks, its main emphasis is on the mindset and principles that underpin Agile, making it highly relevant for those interested in Agile's philosophical foundations."
  },
  "Collaboration Tools": {
    "resourceId": "Working Software",
    "category": "Collaboration Tools",
    "calculated_at": "2025-05-06T11:55:44",
    "ai_confidence": 27.22,
    "ai_mentions": 0.7,
    "ai_alignment": 2.6,
    "ai_depth": 2.9,
    "ai_intent": 2.3,
    "ai_audience": 4.0,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses on 'working software' as an Agile/Scrum artifact, explaining its value, purpose, and impact on team alignment and delivery. There is no direct mention of collaboration tools, nor does the content discuss features, examples, or best practices relating to platforms that enhance communication or coordination within Agile teams. The theme conceptually touches on outcomes of teamwork and transparency, which may result from using collaboration tools, but these are not the focus or intent. There is a single, passing mention of how working software 'enhances collaboration' and 'increases transparency,' but this is in the context of value delivery, not technology or tooling. The depth is limited to elaboration on working software’s definition and benefits, with no tool or platform content. The intent is informative and intended for Agile practitioners, somewhat aligning with the category’s audience but not its topical focus. The signal-to-noise ratio is moderate: the content is focused, but on a different category (Agile Artifacts/Measurements). No penalties were applied since there is no outdated or negative framing. The overall confidence score is low, proportionate to the lack of direct content about collaboration tools; the category is only tangentially and very indirectly related.",
    "level": "Ignored"
  },
  "Test Driven Development": {
    "resourceId": "Working Software",
    "category": "Test Driven Development",
    "calculated_at": "2025-05-06T11:55:44",
    "ai_confidence": 12.105,
    "ai_mentions": 0.3,
    "ai_alignment": 0.6,
    "ai_depth": 0.4,
    "ai_intent": 0.6,
    "ai_audience": 1.0,
    "ai_signal": 1.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content is focused on the concept of 'Working Software' as defined and celebrated within Agile, Scrum, and Lean methodologies. There are no direct or indirect mentions of Test Driven Development (TDD), nor any discussion around the TDD cycle, writing tests before code, or the practices and tooling associated with TDD. The alignment is almost entirely with Agile ceremonial and outcome language, not with specific TDD principles or practices. The depth is limited to explanations of the significance and value of working software, with no exploration of testing methodologies or the development process. The intent is to explain what working software means and why it matters for teams and stakeholders in Agile contexts, which is tangential to the core TDD audience and purpose; only a small overlap exists in that high-quality, working code could be an outcome of TDD, but that causal link is not discussed or implied. The audience is broad Agile practitioners, possibly developers or team facilitators, but not specifically TDD practitioners. Signal-to-noise is relatively low for TDD as the term and all exemplars center squarely on working software, not the means (such as TDD) to produce it. No penalty points are applied, as the content is not outdated and maintains a neutral, informative tone. Level of fit is Tertiary, given that TDD is neither a primary, secondary, nor implied focus.",
    "level": "Ignored"
  },
  "Transparency": {
    "resourceId": "Working Software",
    "category": "Transparency",
    "calculated_at": "2025-05-06T11:55:44",
    "ai_confidence": 61.03,
    "ai_mentions": 3.6,
    "ai_alignment": 6.8,
    "ai_depth": 5.9,
    "ai_intent": 5.5,
    "ai_audience": 7.0,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content primarily discusses 'working software' as an Agile artifact central to Scrum, Lean, and Agile methodologies. It emphasizes working software as a measure of progress, value delivery, and adaptation. There are several indirect links to transparency, especially where the content states that working software 'demonstrates progress,' is 'inspectable,' and helps teams and stakeholders align around what has been completed. However, explicit direct mentions of 'transparency' are limited: aside from a single passing mention ('increase transparency'), the focus is not a deep or substantial discussion of transparency practices or principles, but rather on the value and characteristics of working software. \n\n- **Direct Mentions (3.6):** Transparency is mentioned once directly and discussed a little through associated terms like 'inspectable,' but the majority of the language centers on working software.\n- **Conceptual Alignment (6.8):** The idea of making progress visible, enabling inspection, and stakeholder alignment aligns with transparency principles, but the main thrust remains on value delivery through software, not transparency per se.\n- **Depth of Discussion (5.9):** The discussion on transparency is shallow; transparency is framed as a beneficial outcome rather than a major theme. The content does not discuss transparency techniques, challenges, or case studies.\n- **Intent/Purpose Fit (5.5):** The primary intent is to inform about working software. Transparency is a supporting concept rather than the focal purpose.\n- **Audience Alignment (7.0):** The audience (Agile practitioners, Scrum teams) matches those interested in transparency, but the framing is general and not tailored specifically to transparency-focused readers.\n- **Signal-to-Noise (8.0):** The content is tightly focused and relevant; there is very little off-topic or filler content.\n\nNo penalties are applied as the content is up-to-date and tone-aligned. 'Working Software' is therefore best classified as 'Secondary' with regards to Transparency: it plays an enabling role, but transparency is not the central message. The confidence score reflects that while transparency is present and important within the content, it is not the dominant or primary focus.",
    "level": "Secondary"
  },
  "Continuous Improvement": {
    "resourceId": "Working Software",
    "category": "Continuous Improvement",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 81.79,
    "ai_mentions": 6.6,
    "ai_alignment": 8.7,
    "ai_depth": 8.2,
    "ai_intent": 8.4,
    "ai_audience": 8.0,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "The content centers on 'Working Software' as defined in Agile methodologies, especially Scrum. Direct mention of 'continuous improvement' is present, and there are multiple indirect references via phrases such as 'continuous feedback and improvement,' 'adaptive planning,' and ongoing delivery. The alignment with the Continuous Improvement category is strong: the description highlights iterative development, inspectable increments, use of real customer feedback, and the enhancement of collaboration and learning. The depth is substantial: the link between working software and continuous improvement concepts is explained, although the primary focus is not an in-depth guide on continuous improvement but rather on how working software embodies its principles. The content explicitly references team adaptation, transparency, and value delivery over time, aligning well with the philosophies in the classification definition. Intent is supportive—educating on the significance and function of working software and its role in higher-level organizational agility and improvement. The audience is Agile/Scrum practitioners, product leaders, and technical teams, which matches the expected category audience. The signal is high, with minimal filler or tangential content and a clear throughline connecting working software with principles of empirical feedback and adaptation. There is no outdated or contradictory tone requiring penalties. However, 'Continuous Improvement' itself is not the main subject; rather, it is a significant benefit and outcome discussed within the context of working software. This positions the article primarily within software/Agile core topics, with continuous improvement as a key but secondary theme—hence the 'Secondary' category level. Scores are slightly staggered to meet calibration safeguards and proportionately reflect strong, but not dominant, category fit.",
    "level": "Primary",
    "reasoning_summary": "The content is a strong fit for the Continuous Improvement category, as it clearly links Agile practices—like working software and iterative delivery—to ongoing enhancement and adaptation. While continuous improvement isn’t the main focus, it’s a significant theme, making the category a good, though secondary, match. The explanation is relevant for Agile practitioners and highlights how feedback and adaptation drive better outcomes."
  },
  "Common Goals": {
    "resourceId": "Working Software",
    "category": "Common Goals",
    "calculated_at": "2025-05-06T11:55:44",
    "ai_confidence": 44.1,
    "ai_mentions": 2.3,
    "ai_alignment": 4.8,
    "ai_depth": 4.5,
    "ai_intent": 5.5,
    "ai_audience": 8.1,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content thoroughly discusses 'Working Software' as a key Agile/Scrum artifact, emphasizing its role as the tangible output of a team's work and a primary measure of Sprint success. It explores the importance of value delivery, transparency, continuous improvement, and collaboration. However, it does not directly mention or frame its discussion in terms of 'Common Goals' or the alignment of strategy with execution. While there is a passing contextual connection—such as alignment between teams and stakeholders on the delivered product—it never explicitly ties these ideas back to the formal concept of Common Goals in Agile/DevOps, nor does it mention strategic alignment, OKRs, or shared objectives as foundational drivers. Its main intent is to clarify what working software is and why it's valued, which is adjacent to, but not synonymous with, fostering Common Goals. The intended audience (Agile/Scrum practitioners and related roles) substantially overlaps with that for Common Goals, but the actual signal-to-noise ratio is only moderate for the Common Goals category due to the artifact-specific focus. No penalties were applied because the information is current and respects the appropriate framing. Overall, the fit for the Common Goals category is tertiary: the connection is contextual and indirect rather than central or explicit.",
    "level": "Tertiary"
  },
  "Team Collaboration": {
    "resourceId": "Working Software",
    "category": "Team Collaboration",
    "calculated_at": "2025-05-06T11:55:44",
    "ai_confidence": 54.15,
    "ai_mentions": 2.1,
    "ai_alignment": 6.75,
    "ai_depth": 6.4,
    "ai_intent": 6.6,
    "ai_audience": 7.2,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content thoroughly discusses the concept of 'Working Software' as a core Agile/Scrum artifact, focusing primarily on its role as a deliverable and measure of progress within iterative development cycles. \n\n- **Mentions (2.100):** The category 'Team Collaboration' is not directly named. While there are some allusions to teamwork ('aligns teams and stakeholders', 'enhance collaboration'), explicit and frequent reference to team collaboration as a concept is minimal.\n\n- **Conceptual Alignment (6.750):** The content is conceptually aligned in that it references \n    * alignment of teams and stakeholders,\n    * enhancement of collaboration,\n    * and the organizational outcomes (e.g., transparency, continuous improvement) that arise from iterative delivery.\n  However, the core focus is on the artifact (working software), not on exploring techniques or strategies for effective team collaboration itself.\n\n- **Depth (6.400):** Discussion about how working software improves alignment, transparency, and adaptation provides some depth regarding collaborative dynamics. Nevertheless, the main substance is about 'what working software is' rather than a nuanced exploration of collaborative mechanics or the role of shared ownership, psychological safety, or direct collaboration strategies.\n\n- **Intent (6.600):** The educational intent is adjacent but not completely focused on team collaboration—the main goal is to clarify the purpose and significance of working software, with team collaboration referenced as a supporting effect, not as the principal subject.\n\n- **Audience (7.200):** The target audience (Agile/Scrum/Lean team members, possibly product owners and stakeholders) is well aligned with that of team collaboration discussions in Agile contexts.\n\n- **Signal-to-Noise (8.300):** The content is highly focused, relevant, and free from digressions, filler, or off-topic material. Nearly all discussion is tied to Agile/Scrum context and to value delivery.\n\n- **Penalty Review:** No penalties applied; the content is current, and the tone is neutral and educational. No contradictory or outdated practices present.\n\n- **Level:** The connection to 'Team Collaboration' is 'Secondary'—the theme is supportive but not the main axis; the core topic is the artifact (working software), with collaboration discussed as a benefit or context rather than as the subject for exploration.\n\nIn summary, while the content acknowledges that working software fosters alignment and collaboration within Agile teams, it neither explores techniques nor deeply investigates the mechanisms of team collaboration as a primary topic. This justifies a moderate confidence score and a 'Secondary' level.",
    "level": "Tertiary"
  },
  "Pragmatic Thinking": {
    "resourceId": "Working Software",
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-05-06T11:55:44",
    "ai_confidence": 80.21,
    "ai_mentions": 5.6,
    "ai_alignment": 8.9,
    "ai_depth": 7.7,
    "ai_intent": 8.2,
    "ai_audience": 8.1,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 80.0,
    "reasoning": "The content explicitly discusses 'working software' as a key artifact in Agile, Scrum, and Lean. It emphasizes practical delivery, value, and adaptability—strongly aligning with Pragmatic Thinking principles. \n\n'Working software' is framed as a tangible, deliverable output, central to real-world Agile practice. The piece repeatedly references iterative development, customer value, adaptation, feedback, and continuous improvement, all of which are core pragmatic approaches. \n\nHowever, the content stops short of providing step-by-step problem-solving strategies, in-depth case studies, or granular techniques, which would be necessary for primary classification. The discussion is thorough on the value and definition of working software, the Increment, and the Definition of Done, but it is more descriptive and motivational than deeply instructional. \n\nThere are direct references to practical considerations and the importance of delivering value, responding to change, collaboration, and iteration—all pragmatic themes. Still, there is little explicit mention of novel problem-solving methods or explicit techniques for navigating complexity, which prevents a higher depth or alignment score.\n\nThe intended audience appears to be practitioners and facilitators seeking to understand or reinforce the importance of working software in Agile environments, matching the expected audience for Pragmatic Thinking. The content is well focused, with very little off-topic detail or filler. \n\nNo content is outdated nor are there contradictions, so no penalties are applied. The overall confidence is solidly in the 'secondary' range—it closely supports Pragmatic Thinking through strong conceptual alignment and practical framing, but is not a direct, instructional, or heavily strategic discussion specifically on the topic itself.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the Pragmatic Thinking category as it clearly highlights the value of 'working software' in Agile, Scrum, and Lean, focusing on practical delivery, adaptability, and customer value. While it aligns well conceptually and is relevant for practitioners, it lacks detailed problem-solving methods or in-depth techniques, making it a strong secondary fit rather than a primary, instructional resource."
  },
  "Technical Mastery": {
    "resourceId": "Working Software",
    "category": "Technical Mastery",
    "calculated_at": "2025-05-06T11:55:45",
    "ai_confidence": 50.36,
    "ai_mentions": 2.2,
    "ai_alignment": 5.6,
    "ai_depth": 4.9,
    "ai_intent": 6.2,
    "ai_audience": 6.7,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 50.0,
    "reasoning": "The content focuses on the concept of 'working software' as defined within Agile, Scrum, and Lean methodologies. It provides a general explanation of the artifact's importance, its role as a measure of progress, its function in alignment and feedback, and its impact on collaboration, value delivery, and adaptability. \n\n**Mentions (2.2):** The term 'working software' is referenced explicitly and repeatedly throughout the text, but the phrase 'Technical Mastery' or its synonymous domain concepts (like software craftsmanship, code quality, engineering practices) are not directly mentioned. \n\n**Alignment (5.6):** The content conceptually touches upon value delivery and the importance of 'Definition of Done,' but it does not delve into best practices, design principles, or technical engineering principles. While related to outcomes of technical mastery, the focus is more on the product and its stakeholder impact than the underlying technical methodologies. \n\n**Depth (4.9):** The explanation is thorough regarding the artifact's role in process and customer value but lacks depth about engineering practices that ensure technical mastery (e.g., clean code, architecture, testing). There is no mention of underlying software craftsmanship, tools, or how 'working software' is technically achieved. \n\n**Intent (6.2):** The intent is somewhat aligned—it aims to educate on the meaning and significance of working software, but not specifically to inform or instruct on technical mastery itself. The purpose is more informative about Agile/Scrum deliverables and their business value. \n\n**Audience (6.7):** The language is broad and accessible to practitioners but not deeply technical, suggesting an audience of both technical and non-technical stakeholders (e.g., Scrum Masters, Product Owners, Developers). It does not narrowly address technical engineers or software craftsmen. \n\n**Signal (6.0):** The content is focused on working software, without major digressions or filler. However, much of the discussion centers on process and customer value rather than technical quality or mastery. \n\n**Level:** The content is 'Tertiary' to the category: while working software is a product of technical mastery, the article treats it in terms of process outcomes and team/stakeholder value delivery, rather than the technical methods or best practices that generate it. \n\nNo penalties were assigned because the content is current and the tone is neither satirical nor critical. Overall, while the concept of 'working software' is adjacent to the category of Technical Mastery, this article does not substantially address technical excellence, practices, or software engineering methodology, and as such receives a moderate to low confidence score for the Technical Mastery classification.",
    "level": "Tertiary"
  },
  "Agile Strategy": {
    "resourceId": "Working Software",
    "category": "Agile Strategy",
    "calculated_at": "2025-05-06T11:55:45",
    "ai_confidence": 63.492,
    "ai_mentions": 4.182,
    "ai_alignment": 6.351,
    "ai_depth": 6.479,
    "ai_intent": 6.013,
    "ai_audience": 6.733,
    "ai_signal": 7.158,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 63.0,
    "reasoning": "The content 'Working Software' is tightly related to Agile practices, focusing on the core artifact of value delivery in Agile frameworks (Scrum, Lean). However, it is primarily concerned with articulating the importance of working software within Agile teams and the principles behind its use as a measure of progress. There are implicit strategic themes (alignment on value, responsiveness to feedback, adaptability, transparency), but the discussion stops short of engaging deeply with organizational strategic planning, large-scale implementation, or explicit Agile strategy alignment as narrowly defined. \n\nDirect Mentions (4.182): Terms such as 'Agile', 'value delivery', 'iterative', 'adaptable', and 'adaptive planning' are referenced, but the phrase 'Agile Strategy' is not directly named, nor is there a granular focus on strategic alignment beyond team or project level.\n\nConceptual Alignment (6.351): The content aligns moderately with Agile Strategy, notably through themes of continuous value delivery, adaptability, and responding to customer needs. However, the strategic scope is mostly implicit—there is no substantive focus on aligning organizational vision, integrating Agile into strategic planning, or measuring performance at the organizational/strategic level.\n\nDepth (6.479): The discussion goes beyond superficial treatment, emphasizing how working software enables transparency, adaptation, and sustainable delivery. However, it lacks examples, case studies, or exploration of leadership, scaling, or strategic integration at an enterprise level.\n\nIntent/Purpose (6.013): The purpose is to inform about an essential Agile principle and its benefits, which is supportive of an Agile mindset. Still, the intent is more about practical/operational significance than strategy or decision-making at a higher level.\n\nAudience Alignment (6.733): The content targets Agile teams, practitioners, and possibly leads—somewhat adjacent to the strategic audience (executives, strategists), but not tailored for them. It does not address or advise organizational leaders or focus on strategy creation.\n\nSignal-to-Noise Ratio (7.158): The content is focused and concise with little to no filler, and it's consistently relevant to Agile value delivery, though strategic themes remain indirect.\n\nLevel: Secondary—The material provides foundational context for Agile strategy by emphasizing the importance of value delivery and adaptability, but does not address higher-order strategic topics in detail. Thus, while relevant as an underpinning concept, it should be considered a secondary fit for the Agile Strategy category.",
    "level": "Secondary"
  },
  "Behaviour Driven Development": {
    "resourceId": "Working Software",
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-05-06T11:55:45",
    "ai_confidence": 18.433,
    "ai_mentions": 0.2,
    "ai_alignment": 2.4,
    "ai_depth": 2.8,
    "ai_intent": 2.9,
    "ai_audience": 5.5,
    "ai_signal": 5.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content is primarily focused on defining and explaining the relevance of 'working software' within Agile, Scrum, and Lean frameworks. \n\n- **Direct Mentions (0.200):** There are no direct or indirect mentions of Behaviour Driven Development (BDD), nor any of its tools, practices, or key terminology. The content is centered around 'working software' in general Agile contexts, not BDD.\n\n- **Conceptual Alignment (2.400):** The concept of delivering value and aligning with customer expectations is broadly in line with general Agile principles, which are also foundational to BDD. However, the description remains at a high-level and never connects these ideas to BDD-specific practices or aims (e.g., writing behavioural specifications, using Given/When/Then, fostering shared understanding through concrete scenarios).\n\n- **Depth of Discussion (2.800):** The depth of discussion is moderate with respect to Agile artifacts and values, but there's no substantial exploration of BDD practices, principles, collaboration methods, or tools. The mention of collaboration, transparency, and improvement reflects generic Agile discourse, not the specifics of BDD.\n\n- **Intent / Purpose Fit (2.900):** The main intent is to educate about the value and role of 'working software' as an Agile/Scrum artifact. This is only tangential to BDD—the content does not aim to inform, persuade, or guide on BDD methodology or its application.\n\n- **Audience Alignment (5.500):** The audience appears to be practitioners interested in Agile methods broadly, which may include people practicing BDD, but is not specific to them. There is moderate overlap.\n\n- **Signal-to-Noise Ratio (5.000):** The content is thoroughly focused on its stated topic (working software) and does not introduce irrelevant information. However, none of that focus translates into relevant signal for the BDD category.\n\n- **Level:** Tertiary — At best, there is distant, indirect relevance. The focus is on high-level Agile artifacts, with some thematic overlap with BDD's value aims, but without any substantive discussion of BDD itself.\n\n- **Penalty Check:** No out-of-date practices or contradictory framing (satire/critique), so no penalties applied.\n\n- **Calibration:** The confidence score (18.433) is consistent with content that is only very weakly connected to BDD: minor overlaps in terminology or philosophy, but not in practice, depth, or targeting.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "resourceId": "Working Software",
    "category": "Scrum Team",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 45.82,
    "ai_mentions": 2.4,
    "ai_alignment": 4.7,
    "ai_depth": 4.9,
    "ai_intent": 4.1,
    "ai_audience": 4.6,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 46.0,
    "reasoning": "The content focuses substantively on the concept of 'working software' as an artifact across Agile methodologies, with numerous but general references to Scrum. Direct mentions of the 'Scrum Team' as an accountability or its formal definition are entirely absent. The only explicit linkage to Scrum is when it discusses 'the Increment' being a Scrum artifact, but it does not elaborate on the self-managing, cross-functional nature, structure, responsibilities, or boundaries of the Scrum Team as per the Scrum Guide. The content primarily targets practitioners interested in product delivery and working software, a partially overlapping but not identical audience to those learning about Scrum Team accountability. The depth of discussion is moderate, but consistently artifact- and outcome-focused, not team-accountability focused. There is minimal noise, but the main subject is not the Scrum Team; rather, the team is referred to as generic 'teams' producing increments. No penalty deductions are required, as the content is up-to-date and neutral in tone. Ultimately, this resource may provide indirect context for understanding what a Scrum Team delivers, but does not itself address the team or its accountability directly. Thus, this is scored as a Tertiary (incidental) fit for the category.",
    "level": "Tertiary"
  },
  "Daily Scrum": {
    "resourceId": "Working Software",
    "category": "Daily Scrum",
    "calculated_at": "2025-05-06T11:55:45",
    "ai_confidence": 20.45,
    "ai_mentions": 0.5,
    "ai_alignment": 2.2,
    "ai_depth": 2.8,
    "ai_intent": 1.9,
    "ai_audience": 6.9,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content focuses exclusively on the concept of 'working software' as an artifact and measure of progress in Agile and Scrum. There is no direct mention of the Daily Scrum or its structure, purpose, or best practices. The alignment score is very low because none of the Daily Scrum’s key topics are substantively addressed. The depth score is slightly higher as the content does deeply discuss its own topic, but this is not the relevant category for this classification. The intent is off-purpose and does not align with facilitating, evaluating, or improving the Daily Scrum event. The only minor relevance comes from shared audience context (Scrum practitioners), and the general Agile/Scrum focus provides a moderate signal-to-noise ratio. No penalties are applied since the content is current and not counter-framed, but overall, the content is only marginally relevant (tertiary) to the Daily Scrum category, as it could be tangentially referenced in a Daily Scrum setting (e.g., when teams inspect work), but the focus is not on the event itself.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "Working Software",
    "category": "Product Backlog",
    "calculated_at": "2025-05-06T11:55:45",
    "ai_confidence": 24.805,
    "ai_mentions": 0.9,
    "ai_alignment": 2.8,
    "ai_depth": 3.1,
    "ai_intent": 2.2,
    "ai_audience": 9.7,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "This content focuses almost exclusively on the concept of 'working software' as defined in Agile and Scrum frameworks. There are no explicit mentions or discussions of the Product Backlog—neither the term 'backlog' nor synonyms appear in the text. Conceptual alignment with the Product Backlog is minimal: while 'working software' is technically the output of items from the Product Backlog, this relationship is only implied (e.g., 'delivers value', 'increment produced at the end of each Sprint') and not discussed in the context of backlog management, refinement, prioritisation, or the Product Owner's responsibilities. The depth of the discussion is strong with respect to 'working software'—exploring purpose, benefits, and Agile context—but not with regard to backlogs, which it does not address beyond the background implication that backlog items lead to software increments. The primary intent is to explain the value, purpose, and role of working software in Agile teams, not to inform or educate on Product Backlog practices or management. Audience alignment receives a high score because it targets Agile practitioners and teams—the usual audience for Product Backlog discussions. Signal-to-noise is high since the content is focused and stays on topic, but the topic is not Product Backlog. No penalties were applied; content is up-to-date and neutral in tone. Level is rated as 'Tertiary' because Product Backlog is only tangentially (if at all) connected—the main subject is a downstream artifact ('working software') formed from Sprint execution, not backlog management or prioritisation.",
    "level": "Ignored"
  },
  "Engineering Excellence": {
    "resourceId": "Working Software",
    "category": "Engineering Excellence",
    "calculated_at": "2025-05-06T11:55:45",
    "ai_confidence": 63.15,
    "ai_mentions": 2.8,
    "ai_alignment": 7.4,
    "ai_depth": 6.6,
    "ai_intent": 7.2,
    "ai_audience": 8.0,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 63.0,
    "reasoning": "The content thoroughly discusses the concept of 'working software' as an output and central artifact in Agile, Scrum, and Lean frameworks. In terms of Direct Mentions, 'engineering excellence' or its synonyms are never used explicitly (score: 2.8), and references are mostly implicit. Conceptual Alignment is moderate (7.4), since the text emphasizes continuous improvement, quality (through Definition of Done), iterative development, and value delivery—principles closely related to engineering excellence but does not delve into specific engineering practices as defined in the classification. For Depth (6.6), while it provides a nuanced description of the importance and function of working software, it lacks detail on how to achieve excellence in producing it (e.g., no mention of coding standards, CI/CD, or code review). Intent/Purpose Fit is solid (7.2), as the text aims to inform teams about the importance of creating quality deliverables and continuous improvement, which supports the category but isn't expressly about engineering practices. Audience Alignment is strong at 8.0, targeting practitioners and team members in engineering-oriented Agile teams. Signal-to-Noise is very good (8.4), remaining focused and tightly written without filler. No penalties were necessary, as the content is neither outdated nor contrary to the spirit of engineering excellence. However, as the discussion centers on the output ('working software') rather than the process of 'engineering excellence' itself, the content is better classified at the 'Secondary' level in relation to this category.",
    "level": "Secondary"
  },
  "Release Management": {
    "resourceId": "Working Software",
    "category": "Release Management",
    "calculated_at": "2025-05-06T11:55:49",
    "ai_confidence": 38.419,
    "ai_mentions": 1.9,
    "ai_alignment": 4.7,
    "ai_depth": 3.8,
    "ai_intent": 3.9,
    "ai_audience": 4.1,
    "ai_signal": 4.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content centers on the Agile concept of 'working software' as a core artifact/measure of value, but makes only light, implicit connections to Release Management. \n\nMentions (1.9): 'Release' appears only once incidentally, as in 'ready for release', rather than the main topic or focus, so explicit direct reference is weak.\n\nConceptual Alignment (4.7): The content overlaps with Release Management in the sense that working software is ultimately meant to be released to customers; however, the main body instead emphasizes progress, value, iteration, and Agile philosophy more than specific practices, strategies, or coordination of software releases.\n\nDepth (3.8): The content discusses the importance, inspection, and impact of working software, but does not discuss release planning, scheduling, risk management, release tools, CI/CD, or other depth topics specific to Release Management. Superficial, tangential references are present but not developed.\n\nIntent (3.9): The primary purpose is to describe working software as a valuable artifact and measure of progress in Agile/Scrum—not to inform or guide release management. Any alignment is secondary or incidental.\n\nAudience (4.1): The content targets practitioners interested in Agile/Scrum and progress metrics. There is some overlap with audiences who care about delivery or release, but it's not tailored to release managers or the specialized release team audience.\n\nSignal (4.8): The majority of the text is focused and not off-topic/filler, but most of the focus is not directly on Release Management. It is, however, cleanly written and on point about 'working software'.\n\nNo penalty was applied, as the content is current (not outdated) and does not criticize or undermine the category.\n\nOverall, this content is at best tangentially related to Release Management—it could support understanding of what gets released, but does not discuss the strategies, coordination, or practices that define the category. Therefore, the confidence score is low and this content should be considered only tertiary for the topic.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "resourceId": "Working Software",
    "category": "Engineering Practices",
    "calculated_at": "2025-05-06T11:55:45",
    "ai_confidence": 57.37,
    "ai_mentions": 2.6,
    "ai_alignment": 5.0,
    "ai_depth": 4.7,
    "ai_intent": 5.7,
    "ai_audience": 6.5,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content focuses primarily on defining and emphasizing the importance of 'working software' as an artifact and delivery measure in Agile frameworks, especially Scrum. \n\n**Direct Mentions (2.6):** The content does not explicitly mention core Engineering Practices such as clean code, TDD, refactoring, CI/CD, or automation. The main focus is 'working software,' which is more of an outcome than a practice, and only tangentially references 'quality' via the Definition of Done.\n\n**Conceptual Alignment (5.0):** There is moderate conceptual overlap; 'Definition of Done,' 'iterative development,' 'high-quality working software,' 'continuous improvement,' and 'enhanced collaboration' all relate to the goals of Engineering Practices. However, the piece remains at a high level, focusing on outcomes and value delivery instead of the specific principles or coding methodologies outlined in the classification.\n\n**Depth of Discussion (4.7):** The coverage is thorough regarding the role and significance of working software in Agile, but does not delve into concrete engineering methodologies or coding practices—there is no discussion of how teams ensure code quality, perform testing, or use automation beyond referencing the Definition of Done.\n\n**Intent / Purpose Fit (5.7):** The primary intent is to inform about the significance and function of working software as an artifact, rather than to teach or debate engineering practices or software craftsmanship directly. There's an indirect supportive alignment: high-quality, working increments depend on strong engineering, but those practices are not described or advocated here.\n\n**Audience Alignment (6.5):** The target audience is Agile teams and stakeholders generally. Technical practitioners (engineers) are included, but also Scrum Masters, Product Owners, and even executives interested in Agile value delivery. As such, the content is moderately aligned with the intended audience for Engineering Practices, but not focused on practitioners looking for technical methodologies.\n\n**Signal-to-Noise Ratio (7.1):** Most of the content remains on point, discussing characteristics, implications, and value of working software. However, relatively little of it connects directly to software engineering practices and principles.\n\n**Level: Tertiary:** The engineering link is several steps removed: high-quality working software presupposes good engineering, but is not a treatment of engineering practices themselves. The content is informative, but would not serve as guidance for adopting or improving Engineering Practices specifically.\n\n**No penalties were applied:** The content is not outdated, nor does it undermine the engineering values. It is simply not tightly aligned.",
    "level": "Tertiary"
  },
  "Technical Debt": {
    "resourceId": "Working Software",
    "category": "Technical Debt",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 13.36,
    "ai_mentions": 0.25,
    "ai_alignment": 2.35,
    "ai_depth": 1.9,
    "ai_intent": 1.7,
    "ai_audience": 3.6,
    "ai_signal": 2.25,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses exclusively on the concept of 'working software' in Agile and Scrum frameworks, discussing its role as a measure of progress, value delivery, and team alignment. There is no direct or indirect mention of technical debt, nor any exploration of code maintainability, remediation strategies, or trade-offs synonymous with technical debt. \n\n- Mentions: Only marginal alignment; technical debt is not named or referenced (0.25). \n- Alignment: The content is conceptually adjacent in the sense that sustainable delivery and quality can relate to technical debt indirectly, but this is only tangential (2.35). \n- Depth: The discussion is about working software as an artifact, not about its relationship to technical debt. Any overlap is shallow and unintentional (1.9). \n- Intent: The primary intent is to clarify what working software means in Agile; not to inform, discuss, or address technical debt (1.7). \n- Audience: Geared toward Agile practitioners, which partially overlaps with a technical debt audience, but content is framed for a broader group (3.6). \n- Signal: Almost none of the content is relevant to technical debt management, making most details off-topic for this category (2.25).\n\nNo penalties were applied as the content is current, neutral in tone, and not misleading. The very low confidence and tertiary level reflect that the category is, at best, peripherally related.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "resourceId": "Working Software",
    "category": "Organisational Agility",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 83.08,
    "ai_mentions": 6.2,
    "ai_alignment": 8.5,
    "ai_depth": 8.0,
    "ai_intent": 8.1,
    "ai_audience": 8.4,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 83.0,
    "reasoning": "The content directly addresses a central tenet of Agile delivery ('working software') and explains its significance within Agile, Scrum, and Lean frameworks. The term 'agility' itself is not named, but the practices, implications, and rationale clearly align with the principles of organisational agility: adaptability, iterative value delivery, continuous feedback, and the ability to pivot based on stakeholder input. For Direct Mentions, the article repeatedly references Agile, Scrum, and Lean, and implicitly discusses agility, but never uses the exact phrase 'Organisational Agility'; hence a moderate score (6.2). For Conceptual Alignment, the ideas strongly match the category definition—showing how working software facilitates real-time adaptation and customer responsiveness (8.5). The Depth of Discussion is solid: it goes beyond the artifact to discuss its impact on adaptation, feedback, continuous improvement, and business outcomes (8.0). The Intent/Purpose score is high (8.1): the goal is clearly to inform on a concept pivotal to fostering agility, even if 'organisational agility' isn't the main topic. Audience Alignment (8.4) reflects the content's suitability for Agile practitioners, teams, product owners, and organisational leaders—a close fit with the intended category audience. The Signal-to-Noise Ratio (8.0) is strong; the content remains on-theme throughout with no notable tangents or irrelevant filler. No penalties are applied as the practices and tone are up to date and constructive. The 'Secondary' level is chosen, as while this topic is extremely relevant to organisational agility, the principal focus is the artifact (working software), not a holistic treatise on agility itself. The confidence score (83.08) accurately reflects high, but not exhaustive, relevance and fit.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the category, as it explores how 'working software' underpins key Agile, Scrum, and Lean principles—like adaptability, iterative delivery, and feedback loops. While it doesn’t explicitly mention 'organisational agility', its focus on practices that enable rapid response and improvement aligns closely with the category’s intent, making it highly relevant for Agile professionals and leaders."
  },
  "Time to Market": {
    "resourceId": "Working Software",
    "category": "Time to Market",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 42.48,
    "ai_mentions": 1.2,
    "ai_alignment": 4.9,
    "ai_depth": 3.5,
    "ai_intent": 5.3,
    "ai_audience": 7.1,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content focuses on 'working software' within Agile and Scrum, emphasizing its value as a deliverable, its role in demonstrating progress, and ensuring customer satisfaction. However, 'Time to Market' as a concept or term is not directly mentioned, and the content does not engage with metrics (lead time, cycle time), process optimization, or explicit strategies for reducing delivery times. \n\nScoring breakdown:\n\n- Direct Mentions (1.2): No direct mention of 'Time to Market'; all references are indirect at best (e.g., value delivery, iteratively delivering software).\n- Conceptual Alignment (4.9): Some conceptual overlap exists, such as 'delivering value', 'ready for release', and 'continuous improvement', but the main focus is the definition and significance of working software—not on transforming ideas into market-ready features quickly.\n- Depth of Discussion (3.5): The discussion is relatively deep regarding the value and characteristics of working software but does not substantially explore Time to Market or associated improvement tactics.\n- Intent / Purpose Fit (5.3): The content's main purpose is to explain working software, not to address how to improve Time to Market, though it indirectly touches on relevant Agile values (value delivery, adaptation).\n- Audience Alignment (7.1): Target audience is Agile practitioners and teams, which includes the stakeholders likely concerned with Time to Market.\n- Signal-to-Noise Ratio (8.7): The content is focused, with little filler or off-topic material, but its focus is not tightly on Time to Market.\n\nNo penalties were required; the content is up-to-date, respectful of the topic, and free from contradictory or satirical tones. This places the alignment at a tertiary level: related but not central or substantial toward the category.",
    "level": "Tertiary"
  },
  "Large Scale Agility": {
    "resourceId": "Working Software",
    "category": "Large Scale Agility",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 21.943,
    "ai_mentions": 0.6,
    "ai_alignment": 2.3,
    "ai_depth": 2.5,
    "ai_intent": 2.2,
    "ai_audience": 8.1,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "This content primarily explains the concept of 'Working Software' as an Agile artifact, focusing on its value as a team-level deliverable during Sprints in Scrum and other Agile frameworks. \n\nMentions (0.6): There are no explicit references to large scale agility, scaling frameworks (e.g., SAFe, LeSS), or enterprise transformation; all terminology is about team-level output rather than cross-team or enterprise topics.\n\nConceptual Alignment (2.3): While 'working software' is important at all scales, this content focuses on team processes, not on the alignment, frameworks, or transformation processes described in the Large Scale Agility category. There is a very minimal implicit alignment in sentences about 'aligning teams and stakeholders,' but not in a scaled context.\n\nDepth (2.5): The discussion is moderately thorough for the topic of working software at the team level but does not provide depth about how working software is managed or leveraged at scale, across teams, or for organisational alignment.\n\nIntent (2.2): The content's aim is to clarify a core Agile artifact, possibly for general Agile teams or practitioners. It is not geared toward addressing enterprise-scaled agility nor does it support organisational transformation or cross-team strategy.\n\nAudience (8.1): The description and content are accessible to Agile practitioners at any level, but most relevant for team-level members (developers, Scrum Masters). It is less tailored to executives or enterprise strategists, but the broad relevance keeps this score reasonably high.\n\nSignal (8.6): The content is focused and highly relevant to its declared topic (working software). There is minimal off-topic or filler material, even if the topic does not map to Large Scale Agility.\n\nNo penalties are applied, as the content is current and does not contradict the category's framing. Overall, there's only a weak connection to Large Scale Agility, justifying a low tertiary confidence score.",
    "level": "Ignored"
  },
  "Lean": {
    "resourceId": "Working Software",
    "category": "Lean",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 54.45,
    "ai_mentions": 2.7,
    "ai_alignment": 5.1,
    "ai_depth": 4.8,
    "ai_intent": 5.4,
    "ai_audience": 7.2,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content explicitly mentions Lean alongside Agile and Scrum, but the discussion revolves predominantly around the Agile/Scrum context of 'working software,' rather than core Lean methodologies. While value delivery and continuous improvement are touched upon, these are presented generically rather than through the lens of Lean principles such as waste elimination, value stream mapping, or specific Lean tools (5S, Just-In-Time, Kanban). The main concepts (value, increment, continuous feedback) overlap with Lean thinking, but the depth of Lean-specific content is low. The audience (teams and stakeholders) matches that of Lean but through an Agile/Scrum framing. There is little off-topic distraction, but the bulk of the exploration is not tied to Lean’s distinctive practices or provenances. No penalties apply as the content does not misinterpret Lean or reference obsolete practices, but Lean is a secondary (perhaps even tertiary) mention rather than the foreground of the discussion.",
    "level": "Tertiary"
  },
  "Systems Thinking": {
    "resourceId": "Working Software",
    "category": "Systems Thinking",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 15.25,
    "ai_mentions": 0.0,
    "ai_alignment": 2.1,
    "ai_depth": 1.8,
    "ai_intent": 2.0,
    "ai_audience": 4.2,
    "ai_signal": 4.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content does not explicitly mention 'Systems Thinking' nor any foundational principles, tools, or frameworks associated with it (Mentions: 0.0). The main focus is on the concept of working software as an artifact in Agile, Scrum, and Lean methodologies, emphasizing iterative development, value delivery, and feedback—all of which can relate to system improvement but are discussed here in a linear, process-centric manner rather than from a holistic, interconnected, or systems perspective (Alignment: 2.1). There is no exploration of systemic factors, feedback loops within broader organizational structures, or mapping of interdependencies beyond team-product-stakeholder connections (Depth: 1.8). The primary intent is to clarify the concept of working software, not to examine or apply systems thinking to organizational dynamic or change (Intent: 2.0). The audience is likely Agile practitioners, which overlaps somewhat with potential systems thinkers, but is not clearly targeted at those interested in holistic analysis (Audience: 4.2). The majority of content is on-topic for Agile product delivery, though little of it aligns specifically with Systems Thinking; the focus is clear but narrowly scoped (Signal: 4.5). No penalties are applied because there is no outdated or contradictory information. Overall, the fit for Systems Thinking is minimal, reflecting a tertiary and tangential relationship at best.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "resourceId": "Working Software",
    "category": "Agentic Agility",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 37.25,
    "ai_mentions": 0.7,
    "ai_alignment": 3.2,
    "ai_depth": 2.8,
    "ai_intent": 5.1,
    "ai_audience": 8.0,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "This content focuses on the definition, significance, and impact of 'working software' within Agile, Scrum, and Lean. There are no direct or explicit mentions of 'Agentic Agility,' nor explicit discussions on agency, accountability, or the ability to adapt through intentional, autonomous actions—core tenets of the definition. The piece references adaptive planning, continuous improvement, and value delivery, which are conceptually adjacent, but these are discussed as attributes of working software rather than agency-driven actions or capabilities. There is no direct distinction between human and AI agency or discussion of agency as a mechanism (as required for 'Agentic Agility'). The depth is moderate, as it addresses value delivery and adaptation, but always through the artifact (working software), not through the lens of agency or agentic actions. The purpose is informative for practitioners or stakeholders in Agile domains, and the audience alignment and focus are strong, but the signal-to-noise ratio loses points because the discussion of agency is only implicit, never explicit. No penalties were applied, as the tone is fully aligned and the content is up to date. In sum, while the content relates to Agile themes, its fit under 'Agentic Agility' is tertiary/subsidiary, and the confidence score of 37.250 accurately reflects this limited but tangential relevance.",
    "level": "Ignored"
  },
  "Agile Transformation": {
    "resourceId": "Working Software",
    "category": "Agile Transformation",
    "calculated_at": "2025-05-06T11:55:46",
    "ai_confidence": 61.88,
    "ai_mentions": 5.3,
    "ai_alignment": 7.7,
    "ai_depth": 6.9,
    "ai_intent": 6.6,
    "ai_audience": 5.3,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 62.0,
    "reasoning": "The content directly references Agile, Scrum, and Lean, and repeatedly explains working software in those contexts, which gives it moderate direct mention (score: 5.3). Conceptually, its focus on working software as an artifact within Agile aligns with a component of Agile transformation (score: 7.7), but does not extend to methods, strategy, or leading an organizational transformation. Depth is solid, as there is detailed explanation of working software, its measurable value, and its relevance in incremental development, including the Definition of Done and continuous improvement (score: 6.9), but discussion does not directly address broader transformation matters such as change management, leadership, or transformation roadmaps.\n\nThe intent is educational and informative but narrowly focused on a single Agile principle/artifact, rather than the transformation process itself (score: 6.6). Audience alignment is moderate (5.3): the content seems aimed at Agile practitioners and teams (those building software or overseeing delivery), not necessarily executives, strategists, or those driving wide-scope Agile transformations. Signal is fairly high (6.6), with most content directly relevant, but it does not expand into off-topic areas—however, the lack of broader context brings this down from a perfect score.\n\nNo penalties are applied: the content is current, not contradictory, and aligns positively (not superficially or satirically) with the Agile transformation category.\n\nOverall, while 'working software' is a pillar of Agile values and an important outcome of transformation, this piece fits as a Secondary resource under 'Agile Transformation.' It is useful for grounding discussions but is not primarily about the transformation journey, structures, or strategies necessary for Agile change at the organizational level. The confidence score accurately reflects the alignment and limits described, with no score ties and calibration checked.",
    "level": "Secondary"
  },
  "Service Level Expectation": {
    "resourceId": "Working Software",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T11:55:48",
    "ai_confidence": 47.4,
    "ai_mentions": 1.1,
    "ai_alignment": 5.2,
    "ai_depth": 5.0,
    "ai_intent": 6.3,
    "ai_audience": 7.0,
    "ai_signal": 6.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content offers a comprehensive explanation of 'working software' in Agile/Scrum/Lean contexts, focusing on its tangible value, its relationship to progress measurement, feedback cycles, and the definition of done. However, it does not directly mention or discuss 'Service Level Expectation' (SLE) as a formal concept or as terminology, and therefore scores very low on the Direct Mentions dimension (1.1). \n\nFor Conceptual Alignment (5.2), while the ideas of delivering value, meeting customer expectations, and ensuring readiness for release are indirectly related to service level expectations (in that SLEs are about what is expected by when, in what condition), the content never frames them specifically as service levels or discusses commitments to timeframes, predictability, or performance that are central to SLEs. For Depth (5.0), though the content discusses working software in some detail, it does not deeply cover expectation management, standards, or predictability relative to service levels. \n\nIntent/Purpose Fit (6.3) is moderately rated since the purpose is to convey the value and function of working software, which loosely aligns with delivering expectations, but SLEs are not the main selling point or frame. The audience is likely practitioners (teams and stakeholders within Agile), fitting reasonably well (7.0), as would be the case for SLE discussions, though not exclusively. Signal-to-noise (6.5) is strong—most content is focused and relevant to delivery and expectations, but not specifically SLE-related, so some reduction applies. No penalties are applied; the content is current and its tone is neutral/informative. Overall, the confidence is low-to-moderate: while there are some conceptual overlaps, the absence of direct mention and focus makes this at best a tertiary fit for 'Service Level Expectation.'",
    "level": "Tertiary"
  },
  "Team Performance": {
    "resourceId": "Working Software",
    "category": "Team Performance",
    "calculated_at": "2025-05-06T11:55:48",
    "ai_confidence": 68.833,
    "ai_mentions": 3.7,
    "ai_alignment": 7.2,
    "ai_depth": 6.6,
    "ai_intent": 6.8,
    "ai_audience": 7.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 69.0,
    "reasoning": "The content focuses primarily on the concept of 'working software' as an Agile artifact, emphasizing its role in demonstrating value delivery. \n\n(1) Direct Mentions (3.7): 'Team' and team-level delivery are referenced several times, but 'team performance' as a phrase or delivery metrics are not directly mentioned; most mentions are indirect (e.g., 'team's work,' 'teams align around completed work').\n\n(2) Conceptual Alignment (7.2): The main ideas (working software as a measure of output, iterative delivery, team alignment) closely align with measuring team outcomes, which is core to team performance. There is some drift, as the content is more about what working software represents, not how to analyze or improve team delivery capability.\n\n(3) Depth of Discussion (6.6): The content gives a thorough overview of what working software is, its significance, and its effect on value and stakeholder alignment. However, it does not discuss delivery metrics, system constraints, or patterns/trends in delivery, which would be necessary for high depth on 'team performance.'\n\n(4) Intent / Purpose Fit (6.8): The purpose is to explain what 'working software' is and why it matters. It supports understanding of outcomes at the team level and (to a moderate extent) why focusing on working software leads to better delivery. Nonetheless, the central aim is not to discuss team performance directly.\n\n(5) Audience Alignment (7.1): The content is suitable for agile practitioners, Scrum teams, and potentially technical leads—closely matching the likely audience for team performance topics, rather than executives or HR.\n\n(6) Signal-to-Noise Ratio (6.3): Most of the content is on-topic regarding work output, iteration, value, and stakeholder alignment. There is some generalization about business success and customer satisfaction that strays into value territory more than team performance, slightly lowering the score.\n\nNo penalties are applied; content is current and follows a neutral, informative tone. The confidence score is moderate, reflecting that although team outcomes are core to the artifact discussed, direct discussion of team performance metrics, system constraints, or improvement is limited. The secondary level classification is appropriate: while the content is highly relevant to understanding how a team delivers, it does not explore systemic team-level delivery capability in depth. Final confidence therefore lands just below 70.",
    "level": "Secondary"
  },
  "Lean Startup": {
    "resourceId": "Working Software",
    "category": "Lean Startup",
    "calculated_at": "2025-05-06T11:55:51",
    "ai_confidence": 31.15,
    "ai_mentions": 1.3,
    "ai_alignment": 3.6,
    "ai_depth": 2.7,
    "ai_intent": 3.2,
    "ai_audience": 5.4,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "The content primarily describes 'working software' in the context of Agile and Scrum, focusing on its role as an increment and a measure of progress. While there are a few subtle nods to iterative development, feedback, and delivering value—which overlap conceptually with Lean Startup principles—the discussion does not explicitly reference Lean Startup, nor does it explore its core concepts like minimum viable product (MVP), Build-Measure-Learn, validated learning, or customer development. The depth of discussion pertains to Agile methodology, quality, teamwork, and value delivery without connecting to Lean Startup’s iterative hypothesis testing or startup risk mitigation. The audience may include Lean Startup practitioners secondarily, but the primary focus is on Agile/Scrum teams. The content has a moderately good signal-to-noise ratio but is not specifically relevant to Lean Startup’s core instructional purpose. No penalties were applied, as there is neither outdatedness nor contradiction with Lean Startup, just a lack of alignment. Therefore, the content fits only peripherally under Lean Startup (tertiary level), mainly due to broad thematic overlap with iterative and value-driven development. The confidence score reflects this marginal relevance: low mentions, misaligned focus, and shallow connection to the Lean Startup methodology.",
    "level": "Ignored"
  },
  "Test First Development": {
    "resourceId": "Working Software",
    "category": "Test First Development",
    "calculated_at": "2025-05-06T11:55:54",
    "ai_confidence": 23.32,
    "ai_mentions": 0.7,
    "ai_alignment": 2.6,
    "ai_depth": 2.8,
    "ai_intent": 2.4,
    "ai_audience": 6.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content provides an overview of 'working software' as understood in Agile, Scrum, and Lean contexts, focusing on its significance as an artifact and a measure of value delivery. However, there are no explicit or implicit references to Test First Development or its principles. \n\n- **Mentions (0.7):** There are no explicit or direct mentions of Test First Development, TDD, ATDD, success criteria, or the Test First mindset. The closest connection is the indirect mention of 'Definition of Done,' which can be related to criteria, but this is not developed towards Test First concepts.\n\n- **Conceptual Alignment (2.6):** While some overlap exists in the emphasis on quality and success criteria (e.g., Definition of Done), these are described solely in the context of finished software, not as driving design or implementation upfront. The main idea is not about defining or using tests first, but about delivering increments of value.\n\n- **Depth of Discussion (2.8):** The discussion remains broad and does not delve into any aspect of Test First practices, success criteria before implementation, or collaboration around test criteria. The 'Definition of Done' is the only slight tie-in, but it is discussed only superficially.\n\n- **Intent / Purpose Fit (2.4):** The content's purpose is to describe the value of working software in Agile and Scrum, not to inform, support, or explore Test First practices. At best, it is tangentially relevant.\n\n- **Audience Alignment (6.1):** The intended audience likely overlaps partially with the Test First Development audience (Agile practitioners, team members), but the focus sits at a higher, more general process-artifact level rather than practical methods or testing approaches.\n\n- **Signal-to-Noise Ratio (6.3):** The content stays mostly on topic to 'working software' in Agile contexts, but its relevance to Test First Development is marginal, thus making most of the content outside the required classification.\n\n- **Deductions:** No penalties applied. The content is not outdated, satirical, or undermining.\n\n- **Level:** Tertiary, as the relationship to Test First Development is faint, purely by conceptual proximity in Agile practice, but it does not engage with Test First principles or techniques.\n\n- **Final Confidence:** The calculated confidence (23.32) reflects a very weak fit—there are superficial connections through the shared Agile context and references to quality criteria (Definition of Done), but the content does not address any of the key topics or guiding principles of the Test First Development category.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "resourceId": "Working Software",
    "category": "Cycle Time",
    "calculated_at": "2025-05-06T11:55:47",
    "ai_confidence": 11.0,
    "ai_mentions": 0.1,
    "ai_alignment": 1.7,
    "ai_depth": 1.8,
    "ai_intent": 0.7,
    "ai_audience": 2.2,
    "ai_signal": 1.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content exclusively focuses on the concept of 'working software' in Agile and Scrum contexts, describing its value, how it represents an increment, and its relationship to stakeholders and team feedback. However, Cycle Time—as defined by the classification scope (measuring the duration of work from start to finish with implications for workflow efficiency)—is neither directly mentioned nor implied. \n\nDirect Mentions (0.1): There is no explicit reference to Cycle Time anywhere in the content. The closest related concepts (e.g., increment, iteration, progress) are used only to explain working software, not Cycle Time as a metric. \n\nConceptual Alignment (1.7): While the outcome (working software) is tangentially related to what is produced at the end of the Cycle Time window in Agile, the content does not tie any of its explanations to the temporal aspect of workflow. There is marginal overlap in terms of Agile process outcome, but this does not make it conceptually aligned with Cycle Time. \n\nDepth (1.8): The discussion goes moderately deep into the purpose and definition of working software, but Cycle Time itself is not explored, nor is measurement or workflow duration discussed. Any depth present pertains solely to the artifact (working software), not to timing or efficiency. \n\nIntent (0.7): The intent is to inform about the value, definition, and process for working software—not Cycle Time, metrics, or workflow efficiency. \n\nAudience (2.2): The audience is likely Agile practitioners or Scrum teams, which is tangentially related, but because the primary focus is on artifacts rather than metrics, it only partially overlaps with the likely Cycle Time audience. \n\nSignal (1.8): Nearly all of the content is about working software, not Cycle Time or its implications. Content is focused but off-category throughout. \n\nNo penalty for currency or tone was applied, as the content is current, neutral, and not critical of metrics or practices. \n\nOverall, the article sits at a tertiary level at best: there is near-zero direct overlap with Cycle Time, only the most distant indirect connections through the framing of Agile delivery, producing a very low confidence score consistent with these findings.",
    "level": "Ignored"
  },
  "Coaching": {
    "resourceId": "Working Software",
    "category": "Coaching",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 13.748,
    "ai_mentions": 0.4,
    "ai_alignment": 1.5,
    "ai_depth": 1.2,
    "ai_intent": 2.1,
    "ai_audience": 2.6,
    "ai_signal": 2.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is centered around the concept of 'working software' as a measure of Agile progress and value delivery. \n\n1. Direct Mentions (0.4): The content does not mention 'coaching', nor any synonyms (mentor, facilitate, etc.), nor any of the key coaching frameworks, explicitly or implicitly. \n\n2. Conceptual Alignment (1.5): The piece aligns only peripherally with Coaching by highlighting collaboration, feedback, and improvement—ideas that are sometimes present in coaching discussions. However, these references are strictly framed in terms of the artifact (software) and process outcome, not the behaviors, relationships, or practices central to coaching. \n\n3. Depth of Discussion (1.2): There is minimal exploration beyond explaining the characteristics and value of working software. Coaching themes are absent beyond passing overlap in words like 'collaboration' and 'feedback'. No techniques, roles, or frameworks relevant to coaching are described. \n\n4. Intent / Purpose Fit (2.1): The main intent is to inform or educate about 'working software' in Agile—not about coaching practices or mindsets. While the tone is constructive and positive, it is not meant to develop, support, or foster growth in individuals or teams through coaching. \n\n5. Audience Alignment (2.6): The likely audience is Agile practitioners, Scrum team members, and perhaps their technical leads. While some overlap exists with a coaching audience, the core 'coaching as a practice' audience is not targeted here. \n\n6. Signal-to-Noise Ratio (2.9): The content is focused and mostly relevant to 'working software' as a topic, with minimal off-topic filler. However, little of it is relevant to the coaching category.\n\nTherefore, the article is classified as 'Tertiary' relevance: its connection to coaching is mild and indirect at best. Confidence is consequently very low and proportionate to the lack of coaching content.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "resourceId": "Working Software",
    "category": "Miscellaneous",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 7.33,
    "ai_mentions": 1.3,
    "ai_alignment": 2.2,
    "ai_depth": 2.1,
    "ai_intent": 1.2,
    "ai_audience": 0.8,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content is wholly focused on 'working software' as defined within Agile, Scrum, and Lean frameworks. There are direct references to Scrum artifacts (Increment), processes (Sprint), and Agile principles (Definition of Done, iterative development, continuous improvement). These link the content directly and repeatedly to established frameworks rather than general or miscellaneous discussion. \n\n1. **Direct Mentions (1.3/10)**: There is no explicit mention of 'Miscellaneous' and the topic is consistently discussed within the context of specific frameworks.\n2. **Conceptual Alignment (2.2/10)**: The core ideas align directly with Agile/Scrum/Lean, not with the generic, misaligned, or catch-all nature required for Miscellaneous.\n3. **Depth of Discussion (2.1/10)**: The content explores 'working software' in a thorough, framework-specific way, lacking the non-specific or anecdotal depth suitable for Miscellaneous.\n4. **Intent/Purpose Fit (1.2/10)**: The purpose is to articulate a well-recognized principle core to Agile/Scrum, outside the intended catch-all role of Miscellaneous.\n5. **Audience Alignment (0.8/10)**: The primary audience appears to be Agile practitioners or those interested in Agile frameworks, not an undifferentiated or non-framework audience.\n6. **Signal-to-Noise Ratio (0.6/10)**: While focused, the relevance is misaligned; almost all content is explicitly about established frameworks, not unrelated or wide-ranging discussion.\n\nNo penalties were applied (content is up-to-date and not satirical); the low tertiary level and low confidence reflect that this content does not fit *at all* in Miscellaneous and belongs firmly to the recognizable frameworks it references.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "resourceId": "Working Software",
    "category": "Decision Theory",
    "calculated_at": "2025-05-06T11:55:48",
    "ai_confidence": 29.43,
    "ai_mentions": 0.6,
    "ai_alignment": 3.6,
    "ai_depth": 2.8,
    "ai_intent": 3.2,
    "ai_audience": 4.15,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content focuses almost entirely on the definition and significance of 'working software' as an artifact in Agile and Scrum frameworks, emphasizing value delivery, tangible progress, and customer focus. \n\n1. Direct Mentions (0.60): The category 'Decision Theory' is not named or referenced directly. Only very implicit connections to decision-making (teams can inspect software and adapt) are present.\n\n2. Conceptual Alignment (3.60): There is some tangential alignment in that 'working software' can support decision-making by providing feedback and helping teams adapt. However, there is almost no discussion of uncertainty, heuristics, probability, behavioral economics, or decision frameworks—the core elements of 'Decision Theory.'\n\n3. Depth of Discussion (2.80): Any link to decision-making is superficial. Decisions are alluded to (teams can adapt based on feedback), but no substantive exploration of decision-making processes, uncertainty, or frameworks occurs.\n\n4. Intent/Purpose Fit (3.20): The content’s main intent is informational about 'working software,' not to provide guidance or analysis on decision-making under uncertainty. The fit is weak and at best secondary.\n\n5. Audience Alignment (4.15): The intended audience seems to be Agile practitioners and stakeholders, which partially overlaps with audiences interested in decision theory as applied to Agile contexts, but not strongly so.\n\n6. Signal-to-Noise Ratio (3.00): The content is consistently focused on 'working software,' with little off-topic noise, but it is not directly relevant to Decision Theory; the signal with respect to the category is not strong.\n\nNo penalties were applied as the content is current, neutral in tone, and does not reference obsolete practice.\n\nOverall, 'Decision Theory' connections are weak, with at best tertiary alignment. The confidence score is low, reflecting the marginal conceptual relevance—little to no substantive discussion of decision-making under uncertainty, heuristics, or frameworks.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "resourceId": "Working Software",
    "category": "Digital Transformation",
    "calculated_at": "2025-05-06T11:55:48",
    "ai_confidence": 34.54,
    "ai_mentions": 0.6,
    "ai_alignment": 4.8,
    "ai_depth": 4.95,
    "ai_intent": 3.85,
    "ai_audience": 6.1,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "The content examines the concept of 'working software' within Agile, Scrum, and Lean frameworks, focusing on value delivery, iteration, and stakeholder alignment. However, it lacks explicit mention of 'Digital Transformation' or the strategic adoption of digital technologies to enhance business agility at an organisational level. \n\n- Mentions (0.60): The category is not directly named or referenced, nor are key terms such as 'digital transformation' or 'strategic digital adoption' present; the only implicit element relates to improved practices enabled by software.\n- Conceptual Alignment (4.80): There is a partial connection since Agile practices and focus on working software can be components within a digital transformation strategy, but the content centers more on team-level delivery and iteration, not on the holistic, organisation-wide impact or strategy associated with digital transformation. \n- Depth (4.95): The discussion is moderately thorough about Agile principles but does not engage with frameworks, metrics, enterprise-level change, or technologies central to the category definition. There’s exploration of value delivery and adaptation but not in a digital transformation context.\n- Intent / Purpose (3.85): The intent is educational and informative on Agile and working software, with only tangential relevance to the purpose of the category, which is to highlight strategic, organisational use of digital technologies.\n- Audience (6.10): The primary audience appears to be Agile practitioners, Scrum Masters, or development teams, some of whom may play a tactical role in digital transformation, but executives or transformation strategists are not directly addressed.\n- Signal-to-Noise Ratio (6.90): The content is focused on the defined topic, with almost no filler, but much of it is not directly relevant to digital transformation. \n\nThere are no outdated practices or explicit contradictions, so no penalties apply. Overall, while 'working software' is a critical outcome of digital product teams and supportive of transformation, this content does not sufficiently address digital transformation as a strategic, organisational discipline. The confidence level is thus low, and the assignment is tertiary: only a peripheral fit.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "resourceId": "Working Software",
    "category": "Technical Leadership",
    "calculated_at": "2025-05-06T11:55:48",
    "ai_confidence": 52.82,
    "ai_mentions": 1.9,
    "ai_alignment": 5.3,
    "ai_depth": 5.6,
    "ai_intent": 4.7,
    "ai_audience": 6.5,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content thoroughly explains the concept of 'working software' as an artifact and its value in Agile and Scrum, highlighting its importance for progress, feedback, and customer value. \n\n(1) Mentions (1.9): The piece does not explicitly reference 'Technical Leadership' nor name specific leadership roles or practices. Any reference to leadership is indirect, typically implied (e.g., aligning teams and stakeholders).\n\n(2) Conceptual Alignment (5.3): There is a moderate connection to technical leadership concepts because the content discusses how teams deliver value, transparency, adaptability, and continuous improvement. However, the core focus is the artifact itself rather than leadership actions or roles. It very lightly touches on relevant topics (collaboration, feedback loops).\n\n(3) Depth (5.6): The discussion is detailed regarding what 'working software' means, the working process, and its significance in Agile/Scrum, but it is not deep regarding technical leadership itself. There are allusions to practices relevant to leaders (e.g., quality, feedback), yet the piece does not provide strategies, recommendations, or frameworks for leaders.\n\n(4) Intent/Purpose Fit (4.7): The main intent is educational/informative about an artifact, not primarily about providing guidance or insights into technical leadership. Some tangential value for leaders is present, but it's not the main focus.\n\n(5) Audience Alignment (6.5): The content is suitable for agile practitioners, Scrum team members, and potentially technical leaders who need clear definitions and shared understanding, but it does not distinctly address technical leadership as its primary audience.\n\n(6) Signal-to-Noise Ratio (6.8): The content is highly focused, with very little off-topic information. Everything is relevant to 'working software.' However, portions reiterate the artifact’s definition rather than expanding on technical leadership.\n\nOverall, the content is informative on working software and touches on a few leadership-relevant concepts, such as transparency and adaptability, but it is not primarily about technical leadership or leadership practices. Thus, confidence in this content directly fitting the 'Technical Leadership' category is moderate to low and best classified as 'Tertiary' relevance.",
    "level": "Tertiary"
  },
  "Operational Practices": {
    "resourceId": "Working Software",
    "category": "Operational Practices",
    "calculated_at": "2025-05-06T11:55:48",
    "ai_confidence": 82.45,
    "ai_mentions": 3.9,
    "ai_alignment": 8.6,
    "ai_depth": 7.8,
    "ai_intent": 7.6,
    "ai_audience": 8.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "The content focuses predominantly on 'working software' as an artifact within Agile and Scrum methodologies, emphasizing its role in demonstrating progress, delivering value, and supporting continuous improvement. \n\n- Mentions (3.9): The category itself ('operational practices') isn't directly named, but essential terminology ('Iterative development', 'Definition of Done', 'continuous improvement', 'increment', 'value delivery') is repeatedly referenced—justifying a moderate score slightly below 4.\n\n- Alignment (8.6): The description is strongly aligned with core operational goals—such as measuring value delivered, iterative process, and continuous feedback—even if it does not enumerate specific process optimization techniques or tools (like Kanban or DevOps automation). The focus on feedback as an operational driver strengthens alignment.\n\n- Depth (7.8): The content moves beyond a simple definition, exploring why working software matters (value, measurement, adaptability, customer focus) but does not delve into detailed strategies or case study-level application. There is substantial discussion but it isn’t highly technical or comprehensive in operational techniques.\n\n- Intent (7.6): The goal is broadly to inform and frame 'working software' in a way that supports operational improvement, but the piece serves more to articulate its conceptual significance than to be a direct how-to for practitioners, thus just below 8.\n\n- Audience (8.1): It appears to target an audience familiar with Agile—likely practitioners and team leads—less so executives. This is a strong fit given the subject.\n\n- Signal (7.3): The text is almost entirely focused and relevant, with little filler, but some content is more conceptual ('why it matters') rather than exclusively actionable for operational improvement.\n\nNo penalties were applied: The content is current, accurate in its context, and does not undermine operational practice principles.\n\nOverall, this is a 'Secondary' fit: the artifact (working software) is a core measure and driver of operational effectiveness, but the discussion is less about optimizing delivery methods or workflow mechanics, and more about aligning teams and stakeholders around delivered value. It clearly supports operational practices, especially within Agile, but lacks highly detailed or advanced practices coverage.",
    "level": "Primary",
    "reasoning_summary": "This content is a good, though not perfect, fit for the 'operational practices' category. It centres on 'working software' as a key Agile artefact, highlighting its importance for value delivery and team alignment. While it strongly supports operational goals and is relevant for practitioners, it doesn’t go deep into specific optimisation methods or advanced techniques, making it more conceptual than hands-on."
  },
  "Employee Engagement": {
    "resourceId": "Working Software",
    "category": "Employee Engagement",
    "calculated_at": "2025-05-06T11:55:49",
    "ai_confidence": 13.418,
    "ai_mentions": 0.7,
    "ai_alignment": 1.9,
    "ai_depth": 2.1,
    "ai_intent": 1.2,
    "ai_audience": 3.2,
    "ai_signal": 1.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses primarily on the role and definition of 'working software' within Agile and Scrum frameworks, treating it as an artifact and a measure of progress. There is no direct mention—explicit or implicit—of employee engagement, motivation, commitment, or related psychological and social constructs. Concepts such as collaboration and transparency are noted, but solely in the context of Agile process outcomes and software delivery, not as deep explorations of employee motivation or engagement strategies. The main intent is to inform readers about the value of working software as an Agile deliverable, not to elaborate on human-centric engagement or satisfaction. Audience alignment is partially relevant because Agile practitioners may also care about engagement, but the primary focus is technical and procedural. Signal-to-noise is low with respect to the category, as little content is relevant to employee engagement; it's primarily about process and output. No penalties are applied as content is current and the tone is neutral. Overall, the content is at best a tertiary fit for the employee engagement category.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "resourceId": "Working Software",
    "category": "Frequent Releases",
    "calculated_at": "2025-05-06T11:55:49",
    "ai_confidence": 57.81,
    "ai_mentions": 2.8,
    "ai_alignment": 6.9,
    "ai_depth": 7.1,
    "ai_intent": 5.7,
    "ai_audience": 8.1,
    "ai_signal": 8.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 58.0,
    "reasoning": "The content explicitly discusses core Agile concepts such as working software, iteration, increments, and delivering value to customers, which are related to 'Frequent Releases.' However, it does not directly mention 'Frequent Releases,' nor does it explicitly discuss release cycles, continuous delivery, or the software delivery pipeline. \n\n— Mentions: The term 'release' appears only once in a minor context, and terms like 'continuous delivery' or 'frequent releases' are not present. Most discussion is about 'increments' and 'sprints.' Hence, mentions are low (2.8).\n— Alignment: The content's main ideas about delivering working software iteratively are conceptually aligned with the ethos of frequent releases but never discuss the practices, technologies, or goals from a release management viewpoint. Many descriptions could apply broadly to Agile or Scrum as well (6.9).\n— Depth: The detailed exploration of working software, and the stress on iterative delivery and its importance, is solid. However, discussion of actual release techniques, automation, or delivery mechanisms is missing. There's some depth in tying value to completed increments (7.1).\n— Intent: The piece's intent is to explain what working software is and why it matters, not primarily to discuss how to achieve frequent releases or their organizational benefits. Frequent releases are tangential to the main focus (5.7).\n— Audience: The article is directed at Agile and Scrum practitioners, aligning well with software delivery audiences (8.1).\n— Signal: Nearly all content is relevant to incremental software delivery and value, with little tangential or filler writing (8.9).\n\nNo penalties apply as the content is neither outdated nor critical of frequent releases. The level is 'Secondary', as frequent releases are a side effect of the focus on 'working software', not the primary topic.",
    "level": "Tertiary"
  },
  "Agile Planning": {
    "resourceId": "Working Software",
    "category": "Agile Planning",
    "calculated_at": "2025-05-06T11:55:49",
    "ai_confidence": 71.083,
    "ai_mentions": 4.4,
    "ai_alignment": 8.8,
    "ai_depth": 7.7,
    "ai_intent": 7.6,
    "ai_audience": 8.4,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 71.0,
    "reasoning": "The content focuses on 'Working Software' as a core artifact and outcome within Agile, Scrum, and Lean methodologies. While the term 'Agile' and related frameworks are directly mentioned, 'Agile Planning' itself is not explicitly named, resulting in a moderate Direct Mentions score (4.4). \n\nOn Conceptual Alignment (8.8), the piece strongly aligns with Agile principles emphasizing value delivery, customer feedback, iterativity, and adaptability—core elements of Agile Planning. However, it is not about the planning process per se, but describes outputs and the importance of these outputs to planning and adaptation. \n\nDepth of Discussion (7.7) is above average: the text explores inspectability, Definition of Done, value delivery, increments, and transparency, but it does not delve into detailed planning mechanisms such as backlog refinement, estimation, or sprint planning techniques. \n\nIntent/Purpose Fit (7.6) is relevant but not fully on point—the content's purpose is informative, showing how working software drives value and adaptability. Still, the focus remains more on the outcome than the process of planning. \n\nAudience Alignment (8.4) scores well; it's suitable for practitioners, team leads, and product owners typical of the Agile Planning audience. \n\nSignal-to-Noise Ratio (7.0) reflects that the entire piece is relevant, but its focus is on outputs rather than planning practices. \n\nNo penalties were applied; no outdated concepts or contradiction to Agile philosophy are present. \n\nOverall, the article is best classified as Secondary: it meaningfully supports discussions on Agile Planning (e.g., the importance of increments for iterative planning), but does not directly instruct, discuss planning ceremonies, or elaborate on planning frameworks.",
    "level": "Secondary",
    "reasoning_summary": "This content is a good secondary fit for the Agile Planning category. While it doesn’t directly cover planning processes or ceremonies, it strongly supports Agile Planning by highlighting how working software and increments enable adaptability and value delivery. The discussion is relevant for Agile practitioners, but the main focus is on outcomes rather than the planning activities themselves."
  },
  "Agile Values and Principles": {
    "resourceId": "Working Software",
    "category": "Agile Values and Principles",
    "calculated_at": "2025-05-06T11:55:49",
    "ai_confidence": 74.7,
    "ai_mentions": 5.8,
    "ai_alignment": 8.2,
    "ai_depth": 8.6,
    "ai_intent": 7.7,
    "ai_audience": 7.4,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 75.0,
    "reasoning": "This content provides a substantial discussion on 'working software' as a central concept in Agile and related frameworks. It references iterative development, value delivery, adaptability, and continuous improvement — all critical Agile principles. The explicit mention of Agile, Scrum, and Lean establishes context, and the frequent linkage to value delivery and inspection adapts key Agile ideas. The content discusses how working software is tied to customer expectations and team alignment, echoing core Agile values. However, it does not directly reference the Agile Manifesto or its four explicit values, nor does it list the twelve Agile principles, which are key for a 'Primary' level rating. The majority of the content explores the conceptual importance of working software (a primary Agile principle), but there is notable focus on its role in Scrum and technical aspects — verging close to framework-specific discussion. There are few direct, explicit mentions of 'Agile values' or 'principles,' so the 'mentions' score is moderate. Given the intent centers on explaining the significance of 'working software' in an Agile context, intent and audience fit are strong but not perfect; some information pertains more to implementation detail than value-centric education. No penalties are warranted for tone, topicality, or out-of-date content. Overall, the confidence reflects strong thematic alignment and depth, but the lack of explicit value/principle listing or discussion, and partial framework focus, keeps it at Secondary level.",
    "level": "Secondary",
    "reasoning_summary": "This content effectively explores the concept of 'working software' within Agile, highlighting its importance for value delivery, adaptability, and team alignment. While it references Agile frameworks and principles, it doesn’t directly cite the Agile Manifesto or list its core values, focusing more on practical application than explicit value education. This makes it a strong, but not primary, fit for the Agile principles category."
  },
  "Continuous Integration": {
    "resourceId": "Working Software",
    "category": "Continuous Integration",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 23.13,
    "ai_mentions": 0.15,
    "ai_alignment": 1.6,
    "ai_depth": 1.75,
    "ai_intent": 2.2,
    "ai_audience": 4.4,
    "ai_signal": 3.45,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content is centered around the concept of 'working software' as an Agile artifact, primarily within Scrum and Lean, describing its value, definition, and its role as the main measurable output of each Sprint or iteration. \n\nMentions (0.15): There are no direct or explicit mentions of 'Continuous Integration,' CI tools, or classic CI terminology at all. The closest relevancy is broad, referencing iterative development and value delivery, concepts compatible with CI but not explicitly linked.\n\nConceptual Alignment (1.6): The themes of frequent delivery, incremental advancement, feedback, and adaptability have loose conceptual overlap with some CI principles (like delivering integrated, shippable increments), but the content never addresses code integration, automation, or CI practices directly. The alignment is incidental at best, centered on Agile value delivery, not integration practices.\n\nDepth (1.75): The discussion is reasonably thorough on the topic of working software and Agile, but it only touches high-level concepts that may be prerequisites for effective CI. There is no substantive exploration of CI processes, automation, merging, or technical practices beyond general 'continuous improvement' and 'iteration.'\n\nIntent (2.2): The purpose appears to be education about working software's role in Agile, not to inform about Continuous Integration. While technical practitioners in agile environments might find some underlying inspiration for CI, it is not intended as a CI discussion.\n\nAudience (4.4): The target audience is primarily Agile practitioners—scrum teams, product owners, coaches—most of whom would overlap with the technical audience for CI, so some partial alignment is noted.\n\nSignal-to-Noise (3.45): Nearly all content is on-topic for Agile, Scrum, and working software, but from a CI viewpoint, most is tangential or background rather than directly relevant. \n\nNo penalties are applied, as the content is contemporary, neutral in tone, and avoids obsolete or critical misunderstandings.\n\nLevel: The connection to Continuous Integration is tertiary—the content may contribute contextually (e.g., working software as an outcome enabled by good integration practices), but it is not a primary or even secondary fit for this category; CI is not discussed in form, principle, or practice.",
    "level": "Ignored"
  },
  "Customer Retention": {
    "resourceId": "Working Software",
    "category": "Customer Retention",
    "calculated_at": "2025-05-06T11:55:53",
    "ai_confidence": 57.68,
    "ai_mentions": 2.8,
    "ai_alignment": 6.7,
    "ai_depth": 6.2,
    "ai_intent": 5.9,
    "ai_audience": 7.0,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 58.0,
    "reasoning": "The content primarily explains the concept of 'Working Software' in Agile and Scrum, focusing on its definition, alignment with value delivery, and the mechanics of iterative development. \n\nFor Direct Mentions (2.8), the text very rarely, if ever, explicitly refers to 'customer retention'—instead, it references related concepts such as 'delivering value,' 'customer expectations,' and 'customer satisfaction,' but does not name the category. \nConceptual Alignment (6.7) is moderate: while the themes of delivering value and responding to customer needs are aligned with aspects of customer retention, the primary framing is around successful delivery and team progress, not retention strategies per se. \nDepth of Discussion (6.2): The article explores the value of working software for stakeholders and iteratively improving via feedback, but these points, while relevant, are not deeply focused on retention as such—they suggest enabling conditions rather than explicit retention mechanisms. \nIntent/Purpose Fit (5.9): The main intent is to clarify what working software is and how it benefits teams and stakeholders, with only tangential links to customer retention; the purpose is only partially aligned. \nAudience Alignment (7.0): The content is suitable for a technical and practitioner audience (such as product owners, Scrum Masters, developers), which overlaps with the audience interested in retention strategies, though not exclusively. \nSignal-to-Noise Ratio (7.5): The content is focused and relevant to iterative value delivery and continuous improvement, with minimal tangents or filler, but the specificity to customer retention is low. \n\nNo penalties were applied, as the content is neither outdated nor off-tone. \n\nIn summary, 'Working Software' is a foundational enabler for customer retention but does not directly address retention strategies, metrics, or dedicated methodologies. It is best classified as tertiary to the customer retention category, with key connections present but not as the primary focus.",
    "level": "Tertiary"
  },
  "Lean Product Development": {
    "resourceId": "Working Software",
    "category": "Lean Product Development",
    "calculated_at": "2025-05-06T11:55:48",
    "ai_confidence": 60.344,
    "ai_mentions": 3.8,
    "ai_alignment": 6.5,
    "ai_depth": 5.8,
    "ai_intent": 6.1,
    "ai_audience": 7.3,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 60.0,
    "reasoning": "The content primarily discusses 'working software' as an output in Agile, Scrum, and Lean contexts. Direct mentions (3.8): The term 'Lean' is mentioned in passing only once in relation to Agile and Scrum, with no direct exploration of Lean Product Development. Conceptual alignment (6.5): There is moderate alignment since 'working software' embodies Lean principles like value delivery, adaptability, and continuous improvement, but the piece does not delve into Lean-specific techniques (waste minimisation, value stream mapping, A3 problem solving, etc.). Depth (5.8): The content is substantial about working software, its value, and iterative, customer-focused delivery, but only lightly touches on themes pertinent to Lean Product Development. Intent (6.1): The main purpose is to define and highlight the significance of working software, which is indirectly related to Lean Product Development, as both share an emphasis on tangible value and learning, but Lean frameworks and methods are not the core focus. Audience (7.3): The intended audience would likely include Agile, Scrum, and Lean practitioners—a partial overlap with the Lean Product Development audience. Signal (7.4): The vast majority of content is relevant to value creation, iteration, and continuous improvement, all key Lean concepts, but the framing remains general to Agile/Scrum. No penalties: The piece is current, not satirical or critical, and there is no reference to obsolete practices. The overall confidence score reflects a secondary fit, since the content supports—but does not directly focus on—Lean Product Development. It is more general, using Lean as a descriptor rather than a subject for in-depth discussion.",
    "level": "Tertiary"
  },
  "Ability to Innovate": {
    "resourceId": "Working Software",
    "category": "Ability to Innovate",
    "calculated_at": "2025-05-06T11:55:49",
    "ai_confidence": 41.347,
    "ai_mentions": 1.1,
    "ai_alignment": 4.3,
    "ai_depth": 4.8,
    "ai_intent": 3.7,
    "ai_audience": 5.4,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content is fundamentally an explanation of 'working software' within Agile/Scrum, focusing on its importance, its role as a measure of progress, and how it relates to value delivery, feedback, and continuous improvement. There is a modest, but indirect, acknowledgment that delivering increments can lead to innovation (e.g., 'drive innovation and business success'), but this is not elaborated beyond a single surface mention. \n\nDirect Mentions (1.1): There are no explicit or frequent references to 'Ability to Innovate', innovation metrics, or the category's terminology. Only one passing mention to 'innovation' is present in a list of business outcomes, giving this a minimal score.\n\nConceptual Alignment (4.3): The piece aligns tangentially with the category insofar as working in increments, responding to feedback, and continuous improvement are enabling factors for innovation, but it doesn’t explicitly discuss mechanisms or strategies for organizational innovation, nor does it reference Agile/DevOps innovation frameworks, metrics, or case studies.\n\nDepth of Discussion (4.8): The discussion is thorough regarding working software’s role in Agile/Scrum but only tangential about innovation itself. The exploration lacks detailed linking between working software and how it enables innovation as understood in Evidence-Based Management.\n\nIntent/Purpose Fit (3.7): The main purpose is to educate on the concept of working software—not to inform or support an evaluation of innovation capacity. The mention of innovation is a byproduct of describing broader Agile benefits rather than a focused intent.\n\nAudience Alignment (5.4): The material targets practitioners and those interested in Agile frameworks—the same general audience as those interested in innovation capacities. This gives it an average-to-slightly-above-average score for audience alignment.\n\nSignal-to-Noise Ratio (5.8): The majority of the content is on-topic (working software in Agile), but relatively little is specifically about innovation or the Ability to Innovate as an Evidence-Based Management concern. Thus, while there is minimal fluff, the key category focus is weak, resulting in a middling relevance score.\n\nNo penalties were applied: The content is not outdated, and the tone does not contradict or undermine the framing; if anything, it is supportive, if not focused. \n\nOverall, 'Working Software' as described is an enabler of innovation within Agile but is not presented or explored as such within the context of innovation management metrics or practices, thus meriting a tertiary level of confidence for fit under the Ability to Innovate category.",
    "level": "Tertiary"
  },
  "Internal Developer Platform": {
    "resourceId": "Working Software",
    "category": "Internal Developer Platform",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 8.15,
    "ai_mentions": 0.3,
    "ai_alignment": 1.2,
    "ai_depth": 1.3,
    "ai_intent": 1.0,
    "ai_audience": 2.0,
    "ai_signal": 1.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses exclusively on the concept of 'working software' within Agile and Scrum frameworks. There are no direct mentions of Internal Developer Platforms (IDPs), nor of their key components, functions, or benefits. \n\n- Mentions (0.3): There are no explicit references to IDPs. The closest alignment is discussion of delivering software, which is only tangentially relevant.\n- Conceptual Alignment (1.2): The subject is only loosely related; while the value of automation, delivery, and efficiency are implied, there is no explicit connection to IDPs as platforms or frameworks. The closest overlap is the general focus on streamlining software delivery, a tenet of both general Agile and IDPs, but this is not elaborated in platform terms.\n- Depth (1.3): The content does not discuss anything about IDP architectures, best practices, tools, or DevOps implications. Depth is confined to Agile artifacts and the importance of shipping incremental software.\n- Intent (1.0): The purpose is to inform readers about what 'working software' means in Agile/Scrum, rather than to inform or educate about IDPs.\n- Audience (2.0): While the language is technical and targets practitioners, these are not specifically practitioners of IDPs, but rather general Agile/Scrum teams. Thus, only surface-level overlap with the intended IDP audience.\n- Signal (1.5): The content is highly focused, but not on the IDP category, so only a small portion could peripherally inform an IDP conversation (e.g., the value of automation and continuous delivery).\n\nNo penalties were applied since the content is current and does not contradict or undermine IDP principles. Overall, the text is a tertiary fit, useful only as general background for understanding why platforms might exist (to enable working software), but not about platforms themselves.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "resourceId": "Working Software",
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 34.16,
    "ai_mentions": 1.2,
    "ai_alignment": 3.5,
    "ai_depth": 3.8,
    "ai_intent": 3.5,
    "ai_audience": 6.2,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content comprehensively defines and describes 'Working Software' as a core artifact in Agile methodologies, emphasizing its importance for delivery, value, and transparency. However, it does NOT directly mention Evidence Based Leadership or discuss the use of empirical data in leadership decisions. There's an implicit connection to evidence-based practices (e.g., using working software as a measure of progress and value), but the focus remains on the artifact and Agile team practices, not leadership actions. \n\n- Mentions (1.2): There is no explicit mention of 'evidence-based leadership' or similar terminology. The only alignment is implicit, hence the low score. \n- Alignment (3.5): The discussion tangentially aligns with the category by noting that working software is 'inspectable' and serves as a measure, but doesn't connect this with leadership decision-making nor reference evidence-based principles like KPIs, management, or data-driven leadership. \n- Depth (3.8): The analysis of working software is in-depth as an artifact but does not explore evidence-based leadership or how leaders might use these outputs for decision-making. \n- Intent (3.5): The primary intent is to inform about the concept of working software, not to instruct or support evidence-based leadership. \n- Audience (6.2): The content is aimed at agile teams and practitioners, which may marginally include leaders, but is not tailored for executives or leadership roles. \n- Signal (5.8): Most of the content is on-topic about working software, with little filler, but it is off-topic for the Evidence Based Leadership category, so the relevance signal is diluted. \n\nNo penalties are applied as the content is current and does not contradict or satirize the category. Thus, the content holds tertiary relevance: it is potentially useful as an artifact leveraged in evidence-based leadership discussions, but on its own, it does not fit solidly within the category.",
    "level": "Ignored"
  },
  "Throughput": {
    "resourceId": "Working Software",
    "category": "Throughput",
    "calculated_at": "2025-05-06T11:55:49",
    "ai_confidence": 10.954,
    "ai_mentions": 0.5,
    "ai_alignment": 1.4,
    "ai_depth": 1.2,
    "ai_intent": 1.8,
    "ai_audience": 4.3,
    "ai_signal": 2.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses entirely on defining and describing 'working software' as the primary artifact in Agile and Scrum contexts. There are no direct mentions of 'throughput' or related terminology (such as cycle time, delivery metrics, completed items per time unit, or Cumulative Flow Diagrams). The main themes revolve around quality, value delivery, and iterative progress, but these are discussed abstractly—there is no attempt to quantify, measure, or analyze delivery in terms of work items completed over time. The intent is informative, but it is not specifically aligned to throughput as a delivery metric, and no visualizations, data, or performance inspection techniques are presented. The content is for a general practitioner or stakeholder audience, overlapping in part with throughput's audience, but its focus is not on delivery capacity, forecasting, or system constraints. The signal-to-noise ratio is somewhat higher only because the artifact is relevant to delivery practices, but the vast majority of the article would not assist someone seeking insight into throughput. No penalties are warranted as the content is not outdated or contradictory. Tertiary level is assigned because working software is a prerequisite for delivery, but its discussion here in no way centers throughput as a metric, method, or line of analysis.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "resourceId": "Working Software",
    "category": "Install and Configuration",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 6.62,
    "ai_mentions": 0.1,
    "ai_alignment": 0.2,
    "ai_depth": 0.2,
    "ai_intent": 0.1,
    "ai_audience": 4.0,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content revolves entirely around the concept of 'working software' as an Agile artifact. There are zero explicit references to installation, configuration, setup processes, or any technical guidance related to tools, platforms, or technology implementation. The focus is purely on agile theory, definitions, team behaviors, and value delivery—theoretical and outcome-oriented rather than procedural or technical. This is outside the defined scope for the 'Install and Configuration' category. \n\n- Direct Mentions (0.1): 'Install and Configuration' is never mentioned, nor are installation or configuration terms present. For calibration, only a token score is assigned since software as an entity is referenced, but not its installation/configuration.\n- Conceptual Alignment (0.2): The main idea—delivering working software—aligns peripherally in that software must be installed at some point to be 'working,' but that's not the theme or focus. The content is almost entirely misaligned with the category's technical intent.\n- Depth of Discussion (0.2): No exploration of install/config; discussion is deep, but on the wrong topic. The closest reference is the general mention of readiness for release, which is not the same as installation or configuration.\n- Intent / Purpose Fit (0.1): The intent is to educate about the importance and definition of working software as an Agile outcome, not to guide or support installation or configuration efforts.\n- Audience Alignment (4.0): The hypothetical audience—practitioners in Agile teams—sometimes overlaps with those interested in installation/configuration, but here, the focus is on process and delivery, not technical enablement. Score reflects some overlap, but mainly a process-oriented audience.\n- Signal-to-Noise Ratio (4.4): The content is wholly focused and has zero irrelevant filler, but it's off-topic from the install/config category. The signal is strong for its own topic, but not for install/config.\n\nNo penalties were applied, as the information isn't obsolete or contradictory; it is just not within the required category scope. The very low weighted confidence (6.620) properly reflects this extreme misfit. The categorization is clearly Tertiary, with the topic being tangential at best to 'Install and Configuration.'",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "resourceId": "Working Software",
    "category": "Asynchronous Development",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 9.55,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 1.0,
    "ai_intent": 0.4,
    "ai_audience": 3.3,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content comprehensively discusses the concept and value of 'Working Software' within Agile, Scrum, and Lean frameworks. There are no explicit or implicit references to asynchronous development principles, tools, best practices, or challenges. 'Working Software' is framed almost exclusively from the standpoint of outcome (i.e., software increments produced in sprints), rather than from the collaboration practices (asynchronous or otherwise) employed to create it. The closest conceptual proximity is an indirect mention of 'enhancing collaboration', 'transparency', 'adaptive planning', and 'continuous improvement,' but these are standard Agile tenets and not uniquely tied to asynchronous workflows. All other themes—definition, value, iterative delivery, stakeholder alignment—are categorically not about asynchronous development. The audience (agile practitioners) only slightly overlaps with those seeking information about asynchronous teams, but the content's purpose and signal-to-noise ratio for the category are very low. There are no references to time zone distribution, asynchronous communication, or participation modalities. Thus, each dimension scores very low, with no need for penalties as there's neither discouragement nor outdated practice. The content might be tertiary-relevant only if used as an example of an artifact that asynchronous teams could also pursue, but this is a stretch and not covered here.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "resourceId": "Working Software",
    "category": "Definition of Ready",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 9.92,
    "ai_mentions": 1.0,
    "ai_alignment": 1.0,
    "ai_depth": 1.2,
    "ai_intent": 1.5,
    "ai_audience": 2.0,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "Direct Mentions (1.0): The content does not mention 'Definition of Ready' at all. The only term close to the category is 'Definition of Done', referenced once as part of the Scrum process, but not in connection with readiness or backlog item preparation.\n\nConceptual Alignment (1.0): The main ideas and themes focus on 'Working Software' as an artifact and outcome in Agile and Scrum, rather than the criteria or checklist for preparing work items. There is no meaningful alignment with the purpose or definition of 'Definition of Ready'.\n\nDepth of Discussion (1.2): There is some very minor overlap, in that the importance of having standards (e.g., 'Definition of Done') is touched on, but the content does not engage with readiness, preparation, or refinement of backlog items. The depth pertaining to 'Definition of Ready' is negligible.\n\nIntent / Purpose Fit (1.5): The content’s intent is to inform readers about what working software means in an Agile context, and not about the readiness of backlog items. However, the general Agile audience overlap gives it a slightly higher edge here, but it's not on purpose for 'Definition of Ready'.\n\nAudience Alignment (2.0): While the target audience includes Agile practitioners (which could also be the same as those interested in DoR), everything is framed around understanding the outcome of a Sprint, rather than the readiness criteria for tasks or user stories. Thus, modest alignment.\n\nSignal-to-Noise Ratio (3.2): The vast majority of the content is on topic for 'Working Software' but not at all about 'Definition of Ready'. Only one mention of 'Definition of Done', and no tangents or irrelevant content otherwise, so most information is focused, just not relevant for DoR.\n\nNo penalties were applied, as the content is up to date, neutral in tone, and does not contradict or undermine the intended framing of 'Definition of Ready'.\n\nLevel: Tertiary – The connection to 'Definition of Ready' is extremely superficial; the content neither directly mentions nor explores the topic, but it does exist within the broader Agile context.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "resourceId": "Working Software",
    "category": "Unrealised Value",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 19.613,
    "ai_mentions": 0.684,
    "ai_alignment": 1.253,
    "ai_depth": 2.015,
    "ai_intent": 2.341,
    "ai_audience": 6.057,
    "ai_signal": 6.343,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content is focused on the concept of 'working software' as an artifact in Agile, Scrum, and Lean frameworks. There is no direct mention of 'Unrealised Value' or its conceptual framing as described in Evidence-Based Management. \n\n- Direct Mentions (0.684): There are zero explicit references to 'Unrealised Value' or any of its indicators, synonyms, or frameworks; therefore, score is very low, above zero only to reflect a slight implication in discussing value delivery.\n- Conceptual Alignment (1.253): The main theme is realised value (i.e., what has been delivered), not potential or untapped value. While it mentions 'business success' and 'continuous improvement,' these are byproducts of working software, not a discussion on identifying or measuring unrealised value.\n- Depth (2.015): The text thoroughly discusses working software and value delivery but offers only the most tenuous connection to potential value (unrealised). The exploration of untapped potential, opportunity backlogs, or strategic improvement is absent.\n- Intent (2.341): The intent is to educate about the benefits and significance of working software, not to explore areas of unrealised value or innovation potential. It is tangential at best to the Unrealised Value theme.\n- Audience Alignment (6.057): The content targets Agile practitioners and teams, not specifically the strategic/executive audience who would benefit from Unrealised Value discussions. However, since some Agile professionals might be interested in Evidence-Based Management, the audience partially overlaps.\n- Signal-to-Noise (6.343): The content is focused on its topic (working software) with clear, relevant information and little tangential or filler content; however, it is not relevant to Unrealised Value specifically, so the score reflects the relative focus but not the appropriateness to this category.\n\nNo penalties were warranted as the content is current, accurate, and does not contradict the category framing, only that it is misaligned. The content is tertiary for this category, as it addresses realised value, not the latent value Unrealised Value entails.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "resourceId": "Working Software",
    "category": "Organisational Physics",
    "calculated_at": "2025-05-06T11:55:50",
    "ai_confidence": 28.15,
    "ai_mentions": 0.25,
    "ai_alignment": 2.45,
    "ai_depth": 2.3,
    "ai_intent": 2.65,
    "ai_audience": 3.35,
    "ai_signal": 2.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content explicitly discusses 'working software' as a core artifact in Agile, Scrum, and Lean frameworks. However, it does not directly reference systems thinking or organisational physics, nor does it address organisational dynamics, feedback loops, or the holistic interplay between structure, processes, and culture. The only indirect allusions are in statements about collaboration, continuous improvement, and adaptive planning but these remain within the scope of product delivery, not organisational systems. \n\nScore justifications:\n1. Direct Mentions (0.25): There are no direct references to 'Organisational Physics' or systems thinking. Any connections are highly inferential at best.\n2. Conceptual Alignment (2.45): While adaptive and iterative work is discussed, it's in the context of delivering software, not systemic analysis of organisational dynamics.\n3. Depth of Discussion (2.30): Exploration is limited to software artifacts and agile principles, not organisational physics topics; lacks depth in category-relevant issues.\n4. Intent/Purpose Fit (2.65): The main intent is to define and elaborate on 'working software' within agile frameworks, not to explore or explain organisational system dynamics.\n5. Audience Alignment (3.35): The audience is likely software teams, scrum masters, or agile practitioners, some of whom may be interested in organisational improvement, but not specifically in organisational physics.\n6. Signal-to-Noise Ratio (2.90): The content is focused, but its relevance to organisational physics is minimal; the signal for the category is weak.\n\nThe score is 'Tertiary' because any alignment with 'Organisational Physics' is indirect and peripheral. There were no outdated references or contradictory tones, thus no penalties applied. The final confidence is proportional to the lack of explicit linkage with the category and minimal thematic overlap.",
    "level": "Ignored"
  },
  "Leadership": {
    "resourceId": "Working Software",
    "category": "Leadership",
    "calculated_at": "2025-05-06T11:55:51",
    "ai_confidence": 18.723,
    "ai_mentions": 0.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.7,
    "ai_intent": 0.7,
    "ai_audience": 7.4,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content 'Working Software' centers on defining and explaining the importance of the working software artifact within Agile, especially Scrum. \n\n1. Mentions (0.6): The word 'leadership' and related leadership-specific terminology are not mentioned directly. The closest are generic terms like 'enhance collaboration' or 'drive continuous improvement,' but these aren't explicitly linked to leadership roles or responsibilities within Agile or DevOps contexts.\n\n2. Alignment (2.8): While the text makes broad references to teamwork, transparency, and value delivery, these are core Agile themes but not leadership-specific. The featured themes (progress, value delivery, stakeholder alignment) are more about team practice and operational effectiveness than leadership philosophy or capability. There is minimal direct conceptual alignment with leadership as defined in the classification guidelines.\n\n3. Depth (2.7): The exploration is moderately deep but focused almost exclusively on the artifact's role, workflow, and benefits for teams and stakeholders. There is no substantial discussion of leadership behaviors, strategies, or models.\n\n4. Intent (0.7): The main intent is informative and targets understanding working software as an Agile concept, not to develop leadership qualities, outline leader responsibilities, or inspire leadership in transformational contexts.\n\n5. Audience (7.4): The content broadly addresses Agile practitioners, including team members, product owners, and possibly managers, but not specifically leaders or executive sponsors. However, because it speaks to organizational value and stakeholder needs, there's some indirect overlap with leadership audiences.\n\n6. Signal (8.1): The content is focused, relevant to its topic, and free of filler. It stays on point with its artifact description without drifting into unrelated or off-topic areas.\n\nNo penalty adjustments were required as the content is up to date, neutral, and not contradictory in tone. The low confidence score and tertiary level reflect that, while some elements align broadly with qualities leaders care about (like value delivery and adaptability), the discussion never actually touches on leadership practices, frameworks, or challenges. Thus, this resource at best only tangentially relates to the leadership category.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "resourceId": "Working Software",
    "category": "Scrum Master",
    "calculated_at": "2025-05-06T11:55:51",
    "ai_confidence": 15.225,
    "ai_mentions": 2.1,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.0,
    "ai_audience": 2.6,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content focuses almost entirely on the concept of 'working software' as an Agile and Scrum artifact, emphasizing its value as an increment and the role it plays in demonstrating progress and enabling transparency. There are very limited, indirect references to the responsibilities or accountability of the Scrum Master. \n\nMentions: The term 'Scrum' appears a few times, but 'Scrum Master' is never directly mentioned. No responsibilities or accountabilities tied to the Scrum Master role are described. (Score: 2.1)\n\nAlignment: The main ideas align far more with the general delivery artifact (the Increment) and team/stakeholder value delivery than with anything unique to the Scrum Master accountability. The closest fit is the brief mention of how working software 'allows teams to adjust their efforts based on feedback,' which could be loosely interpreted as enabling empiricism, but is not tied to the Scrum Master role. (Score: 2.7)\n\nDepth: There is no substantive discussion of the Scrum Master's responsibilities, systemic impacts, or accountabilities—only the mechanism and benefits of working software. (Score: 2.9)\n\nIntent: The purpose is to inform about the meaning, measures, and value of 'working software,' not to discuss or clarify the Scrum Master accountability, purpose, or how it affects system conditions. (Score: 2.0)\n\nAudience: The content is written broadly for Agile/Scrum team members and stakeholders, rather than specifically for those interested in the Scrum Master role. (Score: 2.6)\n\nSignal-to-Noise Ratio: Nearly all of the content is about 'working software' as an artifact, not the Scrum Master role—the relevant signal for this category is very low. (Score: 2.5)\n\nNo penalties were imposed as the content is not outdated, nor does it contradict the Scrum Master category via tone or obsolete framing.\n\nOverall, while the material touches on Scrum process terminology, it is not about the Scrum Master accountability itself and therefore scores extremely low for this category—well below the threshold for primary or even secondary relevance.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "resourceId": "Working Software",
    "category": "Agile Leadership",
    "calculated_at": "2025-05-06T11:55:51",
    "ai_confidence": 39.257,
    "ai_mentions": 1.3,
    "ai_alignment": 3.6,
    "ai_depth": 3.8,
    "ai_intent": 2.5,
    "ai_audience": 4.2,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "This content focuses on the concept of 'working software' as a central artifact in Agile frameworks, elaborating on its role as the tangible output of iterative development and its importance for delivering customer value. \n\n1. Mentions (1.3): The content never explicitly references 'Agile Leadership' or leadership roles; it only refers to Agile, Scrum, and Lean in the context of working software. There are indirect links to leadership concepts through references to collaboration, adaptability, and value delivery, but no direct mention.\n\n2. Conceptual Alignment (3.6): Some alignment exists: the discussion about transparency, feedback, value delivery, and stakeholder alignment are adjacent themes in Agile Leadership, but the focus is entirely on the artifact and its value, not on leadership roles, behaviors, or cultural impact.\n\n3. Depth (3.8): The piece explores the meaning and impact of 'working software' in an Agile context, noting practices like Definition of Done, feedback, and iteration. However, it avoids deeper discussion of leadership responsibilities, coaching, team empowerment, or cultural transformation.\n\n4. Intent/Purpose (2.5): The main purpose is to educate about the significance of 'working software' as an Agile artifact, not to guide leaders or explore their role in Agile adoption or culture. Only indirectly does it touch on topics that might interest leadership (value, adaptability, transparency), but always through the lens of the artifact.\n\n5. Audience Alignment (4.2): The audience could include Agile practitioners, product owners, and stakeholders—groups sometimes associated with leadership—but the target reader is more likely to be a team member, Scrum Master, or anyone wanting to understand what 'working software' means.\n\n6. Signal-to-Noise (5.1): All of the content is on-topic for Agile process artifacts, with little filler, but only a marginal portion is relevant to leadership considerations.\n\nNo penalties were applied, as the piece is current, neutral in tone, and provides an accurate technical summary. Ultimately, the content is clearly tertiary to Agile Leadership—it doesn't mislead or contradict, but it's several steps removed from the category. The confidence score reflects this highly indirect linkage.",
    "level": "Ignored"
  },
  "Project Management": {
    "resourceId": "Working Software",
    "category": "Project Management",
    "calculated_at": "2025-05-06T11:55:51",
    "ai_confidence": 65.02,
    "ai_mentions": 2.7,
    "ai_alignment": 6.4,
    "ai_depth": 6.7,
    "ai_intent": 6.2,
    "ai_audience": 7.4,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 65.0,
    "reasoning": "The content is centered on the concept of 'working software' as an agile artifact, particularly focused on its value delivery, role as an increment, and its alignment with success criteria in Scrum and similar frameworks. \n\nMentions (2.7): The term 'Project Management' is not directly used. Indirect mentions occur via references to teams, stakeholders, success measures, value delivery, and incremental development, but the explicit category is infrequently or indirectly referenced.\n\nConceptual Alignment (6.4): The content aligns with several project management tenets: focus on deliverables, value tracking, quality (Definition of Done), customer focus, and continuous improvement. However, it's narrowly focused on a single artifact within agile practices, rather than the broader spectrum of project management principles or methodologies.\n\nDepth (6.7): While the discussion details the role, purpose, and significance of working software, it does not delve into full project lifecycle phases, cross-methodology comparisons, risk management, governance, or planning tools. The explanation is insightful but narrow.\n\nIntent/Purpose Fit (6.2): The content is informative, aiming to clarify the concept of working software. Its purpose indirectly aligns with project management by conveying how value is derived and measured, but the main focus is on articulating the artifact's meaning rather than guiding project management practice per se.\n\nAudience Alignment (7.4): The content targets practitioners and teams familiar with Agile/Scrum, which overlaps with project management audiences, though not explicitly addressing managers, sponsors, or a broader project governance audience.\n\nSignal-to-Noise Ratio (8.1): The discussion is focused, stays on-topic, and offers no filler, with all details reinforcing the artifact's significance in iterative delivery and value realization. No tangential or irrelevant content observed.\n\nNo penalties were applied as the content is current, constructive, and neutral in tone.\n\nOverall, this piece is 'Secondary' for Project Management: it is related and informative regarding value measurement and delivery—important project management considerations—but does not substantially address methodologies, broader principles, governance, or the project lifecycle.",
    "level": "Secondary"
  },
  "Estimation": {
    "resourceId": "Working Software",
    "category": "Estimation",
    "calculated_at": "2025-05-06T11:55:51",
    "ai_confidence": 14.56,
    "ai_mentions": 0.5,
    "ai_alignment": 1.8,
    "ai_depth": 1.2,
    "ai_intent": 2.3,
    "ai_audience": 3.4,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content is centered on the meaning and impact of 'working software' as an artifact in Agile and Scrum, emphasizing tangible outputs, customer value, and the Definition of Done. There are no direct mentions or overt references to estimation, forecasting, or the techniques central to the Estimation category (e.g., Planning Poker, empirical data use, collaborative estimation). Any potential alignment with estimation is at best indirect—for example, the use of 'working software as a measure of progress' could tangentially feed estimation, but this is neither explicit nor explored. The content's main intent is to educate on the significance and characteristics of working software in Agile contexts, not to inform or advance discussion about estimation practices. Its audience (Agile practitioners) might overlap with those interested in estimation, but the content, depth, and focus do not target Estimation-related challenges, tools, or empirical techniques. Most of the content is focused, but entirely on value, delivery, and feedback cycles—not on the estimation practices themselves. No penalties were applied as the piece is current and the tone is aligned with Agile values. With minimal mentions, weak conceptual alignment, low explorative depth, and only partial overlap in audience and signal, this receives a low Tertiary-level confidence score for the Estimation category.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "resourceId": "Working Software",
    "category": "Psychological Safety",
    "calculated_at": "2025-05-06T11:55:53",
    "ai_confidence": 8.65,
    "ai_mentions": 0.4,
    "ai_alignment": 1.3,
    "ai_depth": 0.8,
    "ai_intent": 1.0,
    "ai_audience": 2.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0.0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The provided content delves into the Agile concept of 'Working Software,' emphasizing its value and role as a deliverable and measure of progress. It covers definitions, artifact importance, and its place in frameworks like Scrum and Lean. However, there are no explicit or implicit references to psychological safety; the term is never mentioned, and the discussion never addresses feelings of safety, openness, team risk-taking, or leadership actions related to psychological safety. Conceptually, the alignment is extremely minimal: while the content mentions team collaboration and transparency, it solely in the context of process effectiveness and value delivery, not as factors of psychological safety. The depth on psychological safety is absent (surface or implied at best), and the intent is not related to fostering a safe, open, or innovative team environment but instead operational efficiency and delivery standards. The audience seems mostly Agile practitioners, which can sometimes overlap with psychological safety discussions, but here it's focused entirely on process and output, not team culture or dynamics. The signal-to-noise ratio is very low for psychological safety, as the entire piece is on the artifact/functionality aspect, not on psychological or behavioral factors. No penalties were necessary as the content is not outdated and does not contradict the category’s framing. The confidence score is appropriately extremely low, clearly indicating this is at best a tertiary fit.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "resourceId": "Working Software",
    "category": "Open Space Agile",
    "calculated_at": "2025-05-06T11:55:51",
    "ai_confidence": 18.875,
    "ai_mentions": 0.3,
    "ai_alignment": 2.6,
    "ai_depth": 1.9,
    "ai_intent": 2.3,
    "ai_audience": 6.5,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses purely on the concept of 'working software' as a tangible output in Scrum and Agile frameworks. It does not explicitly mention 'Open Space Agile' or discuss any aspects of Open Space Technology, emergence, co-creation, psychological safety, or complexity theory. \n\nMentions (0.3): There is effectively no direct reference to 'Open Space Agile'—the closest ties are indirect generic Agile mentions.\n\nAlignment (2.6): The theme is Agile-aligned generally, but not with the niche of Open Space Agile; it lacks discussion of collective participation, shared ownership, or emergent change processes central to the category.\n\nDepth (1.9): Discussion is substantial on 'working software,' but does not enter into practices, principles, or mechanisms distinctive to Open Space Agile.\n\nIntent (2.3): The content is intended to inform about value delivery in Agile, with minor overlap on broader Agile principles, but not about organizational change, facilitation, or Open Space Agile transformation.\n\nAudience (6.5): The likely audience (Agile practitioners, Scrum teams) overlaps with part of the Open Space Agile audience, but it is not specific to those interested in Open Space or organizational transformation.\n\nSignal (7.0): The content is focused and clear, with no off-topic or tangential material, but all of it is essentially about generic Agile, not the Open Space Agile category.\n\nNo penalties are applied as the content is not outdated or contrary in tone. The tertiary level is chosen because there is only a distant and coincidental relationship of general Agile values, not substantive Open Space Agile content.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "resourceId": "Working Software",
    "category": "Professional Scrum",
    "calculated_at": "2025-05-06T11:55:51",
    "ai_confidence": 72.83,
    "ai_mentions": 6.2,
    "ai_alignment": 7.5,
    "ai_depth": 7.8,
    "ai_intent": 7.2,
    "ai_audience": 7.1,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 73.0,
    "reasoning": "The content provides a thorough explanation of 'working software' within agile and Scrum contexts, making multiple direct references to Scrum (mentioning artifacts, Sprints, Increment, Definition of Done, etc.). This yields a slightly above-average score for Direct Mentions (6.2), as 'Professional Scrum' specifically is not named, but core elements are clearly discussed.\n\nConceptual Alignment (7.5) is fairly strong: the content clearly aligns with Scrum's focus on value delivery, transparency, and the importance of a potentially releasable Increment. It references empiricism (inspection/adaptation), transparency, and value, but does not make the philosophical shift to 'Professional Scrum' as a distinct ethos—it stays anchored in what makes Scrum work, not in the step beyond (professionalism, accountability at role level, avoidance of cargo-cult practices, or deep empiricism as a mindset).\n\nDepth of Discussion (7.8) is slightly higher than conceptual alignment; it moves beyond surface-level description and offers rationale for 'working software'—why it matters, how it creates alignment, enables inspection/adaptation, and so forth. However, it doesn't deeply explore how teams embody these principles as professionals, nor does it contrast mere mechanical application with true professionalism.\n\nIntent/Purpose Fit (7.2) is above average; the main intent is informative, explaining the significance of 'working software' in Scrum, and it frequently references the creation of value, adaptation, and empirical progress. Still, it serves more as a solid foundational explanation than a manifesto or instructional piece on professionalism in Scrum.\n\nAudience Alignment (7.1) is suitable for practitioners, Scrum team members, and those in adjacent agile roles (as well as managers/stakeholders looking to understand working software), but doesn't clearly target advanced, strictly professional Scrum audiences (e.g., experienced Scrum Masters, coaches, or people focused on professionalising Scrum practice).\n\nSignal-to-Noise Ratio (7.0) is good—nearly the entire piece is focused on relevant, aligned topics, with little filler or off-topic material. However, a modest deduction stems from its emphasis on generalized agile concepts at times rather than exclusive Professional Scrum depth.\n\nNo penalties are applied, as nothing is outdated, critical, or contradicts the ethos. Overall, the confidence score (72.83) positions this content as 'Secondary'—it is fully compatible with professional Scrum values, but not specialized or advanced enough for a 'Primary' level, given some focus on general agile principles and lack of deeper exploration into professionalism/accountability.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the category, as it thoroughly explains key Scrum concepts like working software, Sprints, and the Definition of Done, making it valuable for those learning about Scrum. However, it doesn’t delve deeply into the advanced aspects of Professional Scrum, such as role-level accountability or the mindset shift beyond basic Scrum practices, so it’s best suited as a solid foundational resource rather than an expert guide."
  },
  "Product Owner": {
    "resourceId": "Working Software",
    "category": "Product Owner",
    "calculated_at": "2025-05-06T11:55:52",
    "ai_confidence": 28.67,
    "ai_mentions": 0.8,
    "ai_alignment": 3.15,
    "ai_depth": 2.6,
    "ai_intent": 2.7,
    "ai_audience": 4.2,
    "ai_signal": 2.35,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content focuses extensively on the definition, role, and significance of 'working software' within Agile and Scrum environments. While it references value delivery, alignment across teams and stakeholders, and some adjacent topics important to the Product Owner (e.g., business value, feedback loops, and transparency), it never directly mentions the Product Owner role or accountability. The main themes are about team output, delivering value, the Definition of Done, and increment inspection—not about the unique accountability, decision-making, or stakeholder management of a Product Owner. \n\n— Direct Mentions (0.80): The term 'Product Owner' is never used; neither are their explicit accountabilities described. A low score reflects this absence, with a very small allowance for some vague thematic overlap (e.g., value). \n\n— Conceptual Alignment (3.15): There’s some overlap—value delivery, customer focus, stakeholder alignment—but it's generic to Agile and Scrum teams broadly, not the Product Owner's specific set of responsibilities. The link is circumstantial rather than conceptual. \n\n— Depth of Discussion (2.60): The depth is dedicated to working software as an artifact, with no in-depth exploration of Product Owner accountabilities, strategies, or challenges. Any connection is indirectly implied rather than explored. \n\n— Intent / Purpose Fit (2.70): The content is about informing practitioners about 'working software,' not about Product Owner accountability. The fit is therefore tangential. \n\n— Audience Alignment (4.20): The target audience seems to be Agile/Scrum practitioners and teams, which may include Product Owners, but it isn’t specifically aimed at them. Slightly higher score here as Product Owners are part of the intended readership. \n\n— Signal-to-Noise Ratio (2.35): The content is focused on its stated topic, with no unrelated filler, but it is mostly unrelated to the specified category, which results in a lower score here as well. \n\nBecause there are no obsolete references, negative tone, or contradictions to the Product Owner accountability, no penalties are warranted. Overall, this is tertiary material in relation to the Product Owner category: relevant only by distant thematic or framework association, not by direct role or accountability discussion.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "resourceId": "Working Software",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-06T11:55:53",
    "ai_confidence": 16.75,
    "ai_mentions": 0.5,
    "ai_alignment": 2.3,
    "ai_depth": 1.9,
    "ai_intent": 2.1,
    "ai_audience": 6.1,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content centers on the idea of 'working software' as articulated in Agile, Scrum, and Lean methodologies, emphasizing tangible increments, value delivery, and iterative progress. \n\n- **Direct Mentions (0.50):** Site Reliability Engineering is not mentioned in any way—no terminology from SRE is present.\n\n- **Conceptual Alignment (2.30):** The text aligns only peripherally with SRE: while reliability is implied by references to quality, sustainability, and value, the focus is on software delivery and customer value as measured by Agile teams. There is no mention of production environment reliability, SLOs, SLIs, incident response, or other key SRE practices or principles.\n\n- **Depth of Discussion (1.90):** All discussion centers around the delivery and benefits of working software within Agile cycles. There is zero exploration beyond the surface as relates to SRE (no monitoring, automation, capacity, etc.).\n\n- **Intent / Purpose Fit (2.10):** The purpose is to explain the value and meaning of 'working software' in iterative development—not to teach or support SRE topics. Any link to reliability is incidental.\n\n- **Audience Alignment (6.10):** The target audience is technical, perhaps developers, Scrum Masters, or Agile practitioners; there is partial, but not primary, overlap with the SRE audience (which skews towards systems reliability and ops).\n\n- **Signal-to-Noise Ratio (4.00):** The content is focused, but the focus is almost entirely on Agile/working software concepts, with no meaningful SRE content—the signal for SRE purposes is low.\n\n- **Level:** Tertiary, as SRE is not addressed directly or in-depth at all, and the content only shares very generic reliability themes at a conceptual level, well outside the strict bounds of the SRE category.\n\n- **Penalties:** No deductions were needed—nothing is outdated, contradictory, or satirical regarding SRE.\n\nIn summary, this content does not fit under 'Site Reliability Engineering' in any substantive way. Its confidence rating is very low, as warranted by the substance.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "resourceId": "Working Software",
    "category": "Technical Excellence",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 54.85,
    "ai_mentions": 2.7,
    "ai_alignment": 6.3,
    "ai_depth": 5.6,
    "ai_intent": 8.1,
    "ai_audience": 6.5,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content focuses primarily on the Agile concept of 'working software' as an artifact and deliverable, describing its value, role in Scrum/Sprints, and contribution to customer satisfaction and continuous improvement. \n\n1. Direct Mentions: There is little to no explicit mention of 'Technical Excellence' or direct reference to high-level engineering practices such as TDD, CI/CD, modular architecture, or emergent design. Mentions are implicit, centering on software quality and value delivery, so a low score (2.7) is appropriate.\n\n2. Conceptual Alignment: The core ideas do recognize principles like continuous feedback, adaptiveness, and quality—which are tangentially aligned with Technical Excellence—but the main focus remains 'working software' as an outcome, not the technical practices underpinning it. Thus, the score is moderate (6.3).\n\n3. Depth of Discussion: While the article goes into detail about why working software matters, it does not deeply explore how Technical Excellence (e.g., TDD, CI/CD) is achieved or contributes. The discussion is about outcomes, not enabling practices. Depth, therefore, is limited (5.6).\n\n4. Intent/Purpose Fit: The intent is strongly aligned to delivering value, transparency, and adaptation, which is purpose-adjacent to Technical Excellence, though not wholly within its purview. It earns a higher score here (8.1).\n\n5. Audience Alignment: The content is oriented towards agile practitioners, product owners, and technical teams, overlapping with the target audience for Technical Excellence but not exclusively targeting engineering disciplines (6.5).\n\n6. Signal-to-Noise Ratio: Most content is relevant to 'working software' but, given the lack of ties to technical practices, there is some drift from pure Technical Excellence focus (7.2).\n\nNo penalties were necessary—the article is current, earnest, and not satirical or critical. The resulting confidence score (54.85) fairly reflects a secondary connection: the content is about results that technical excellence enables, but does not explicitly discuss or teach those enabling technical practices themselves. Thus, classification under Technical Excellence is 'Secondary.'",
    "level": "Tertiary"
  },
  "Product Validation": {
    "resourceId": "Working Software",
    "category": "Product Validation",
    "calculated_at": "2025-05-06T11:55:52",
    "ai_confidence": 49.13,
    "ai_mentions": 1.8,
    "ai_alignment": 5.9,
    "ai_depth": 4.7,
    "ai_intent": 5.0,
    "ai_audience": 7.2,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 49.0,
    "reasoning": "The content focuses on defining 'working software' as a core artifact in agile and Scrum practices, placing emphasis on its role as a tangible deliverable, its value to customers, and its use in aligning teams and stakeholders. However, it does not explicitly discuss product validation practices or methodologies such as user testing, prototyping, market fit assessment, or A/B testing. \n\nDirect Mentions (1.8): There are no explicit references to product validation or key terms from the classification, only broad references to feedback and customer value.\n\nConceptual Alignment (5.9): Some alignment exists in the discussion of 'feedback,' 'adaptation,' and 'delivering value,' which relate in a general sense to product validation. However, the core ideas are about delivering increments, not validating them through explicit user testing or evidence-based methods.\n\nDepth of Discussion (4.7): The content explores the importance and attributes of working software at some length, but does not discuss validation processes in detail (e.g., how feedback is gathered, how prototypes are tested or validated).\n\nIntent/Purpose Fit (5.0): The primary intent is to describe and champion the role of working software in agile; it is peripheral to product validation, referencing adaptation and feedback but not making validation its core focus.\n\nAudience Alignment (7.2): The content targets agile practitioners, Scrum teams, and those interested in agile delivery, which is somewhat aligned with the audience of product validation, though it is not specialized for validation roles.\n\nSignal-to-Noise Ratio (6.6): The majority of content focuses on the main topic, with limited tangents, but most details are about value delivery rather than specific validation processes.\n\nLevel: Tertiary. The relevance to product validation is indirect and largely implicit; it provides background context on product delivery, not on validation approaches.\n\nNo penalties were applied as the content is current, constructive, and does not contradict the categorization, but its fit is tangential at best.",
    "level": "Tertiary"
  },
  "Experimentation": {
    "resourceId": "Working Software",
    "category": "Experimentation",
    "calculated_at": "2025-05-06T11:55:52",
    "ai_confidence": 17.15,
    "ai_mentions": 0.6,
    "ai_alignment": 1.9,
    "ai_depth": 2.5,
    "ai_intent": 2.9,
    "ai_audience": 4.4,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses exclusively on defining and elaborating the meaning and significance of 'working software' within Agile, Scrum, and Lean frameworks. There are no direct or indirect references to experimentation, hypothesis-driven approaches, validation of assumptions, or application of systematic testing methods such as A/B testing. \n\n- Mentions (0.6): The term 'experimentation' and related keywords are not mentioned at all; the closest thematic connection is the mention of feedback, adaptability, and continuous improvement, but these remain generic and are not tied to formal experimentation.\n- Alignment (1.9): The content is conceptually aligned to Agile and value delivery, but not to experimentation as defined. Discussions of 'continuous feedback' and 'adaptation' are present but not framed in a hypothesis-driven or testing context.\n- Depth (2.5): The discussion goes into substantial detail about 'working software' as an Agile artifact—explaining its purpose, benefits, and impact—but does not address experimental processes or validation of assumptions.\n- Intent (2.9): The intent is clearly informational regarding Agile artifacts, not experimentation. While some principles (continuous improvement, feedback) are foundational to experimentation, the content does not pursue or exemplify those processes.\n- Audience (4.4): The audience (Agile teams, practitioners, possibly stakeholders) could overlap with those interested in experimentation, but this content does not address experimentation-specific topics that might interest that subset.\n- Signal (5.2): The content is focused, with low noise or filler, sticking tightly to the topic of working software (but the topic itself is not relevant to Experimentation, hence a modest signal score).\n\nNo penalties were applied as the content is recent, neutral-to-positive in tone, and in line with current Agile practices. The 'Tertiary' level reflects that, at best, there is only an indirect hint at experimentation through general Agile values like feedback and improvement, rather than any substantive focus on the experimental method.",
    "level": "Ignored"
  },
  "Azure Repos": {
    "resourceId": "Working Software",
    "category": "Azure Repos",
    "calculated_at": "2025-05-06T11:55:52",
    "ai_confidence": 4.864,
    "ai_mentions": 0.1,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 1.2,
    "ai_audience": 1.0,
    "ai_signal": 0.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 5.0,
    "reasoning": "The content exclusively discusses the concept of 'working software' as understood within Agile, Scrum, and Lean methodologies. There is no explicit or implicit mention of Azure Repos, nor of any source control, repository management, or related technical integrations defined under the Azure Repos category. The main idea and intent are focused on Agile process outcomes, not tooling or source control practices. The depth is substantial regarding Agile artifacts, but none of the coverage pertains to Azure Repos functionalities, integrations, or best practices. The target audience may have technical overlap (i.e., Agile teams sometimes use Azure Repos), but this piece is agnostic of tooling and suitable for a generic Agile practitioner. The signal-to-noise ratio is high in terms of Agile process, but nearly zero for Azure Repos content. No tone, recency, or critical framing necessitates penalties. Overall, this is tertiary relevance: content is on a broader topic (Agile outputs) with zero meaningful overlap with the Azure Repos classification.",
    "level": "Ignored"
  },
  "Business Agility": {
    "resourceId": "Working Software",
    "category": "Business Agility",
    "calculated_at": "2025-05-06T11:55:53",
    "ai_confidence": 54.6,
    "ai_mentions": 2.3,
    "ai_alignment": 6.7,
    "ai_depth": 5.9,
    "ai_intent": 6.5,
    "ai_audience": 6.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "This content provides a detailed explanation of the concept of 'working software' within Agile, Scrum, and Lean environments and emphasizes its importance as a tangible measure of value delivery. The discussion aligns with several business agility themes, such as responding to customer needs, continuous improvement, adaptability, and value delivery. However, 'business agility' is not directly mentioned, nor are broader organizational or leadership aspects, explicit transformation strategies, or metrics for agility discussed—which are key to primary classification. The content is most relevant to practitioners and possibly technical leads, focusing on the operational aspect of agility (delivering working software) but without addressing enterprise-wide or strategic agility concerns. Depth is moderate, digging into the nuances of working software as an artifact but not extending to case studies or organizational transformation. Intent is informative and aligned with agile value delivery, thereby supporting business agility in a secondary sense. The signal-to-noise ratio is high, with very focused and clear content, though it doesn’t stray into off-topic areas. No penalties were applied as the information is current, neutral, and constructive. Overall, this piece indirectly supports business agility by illustrating a foundational agile principle, but does not holistically address the broader business agility category, warranting a secondary classification and a moderate confidence score.",
    "level": "Tertiary"
  },
  "Forecasting": {
    "resourceId": "Working Software",
    "category": "Forecasting",
    "calculated_at": "2025-05-06T11:55:54",
    "ai_confidence": 22.6,
    "ai_mentions": 0.6,
    "ai_alignment": 2.7,
    "ai_depth": 2.4,
    "ai_intent": 2.3,
    "ai_audience": 6.9,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content 'Working Software' primarily focuses on the definition, significance, and value of deliverable software artifacts in Agile, Scrum, and Lean settings. There are no explicit or implicit direct references to forecasting, estimation, empirical prediction, or risk management using historical data or metrics, which are at the heart of the Forecasting category. \n\n-- Direct Mentions (0.6): 'Forecasting' and closely related terms are not directly mentioned. The closest overlap is a mention of 'adaptive planning,' but this is presented in the context of reacting to working software feedback rather than systemic forecasting. \n\n-- Conceptual Alignment (2.7): While the content discusses measurement of progress and value delivery, it does not explore how these concepts translate into forecasting future work or leveraging empirical data for predictions. Any alignment is incidental; the main focus is on 'working software' as an Agile measure, not on forecasting outcomes. \n\n-- Depth of Discussion (2.4): The content goes into moderate detail about the definition, role, and impact of working software in Agile but offers little (if any) depth regarding forecasting methods, metrics, or practices. The mention of 'continuous improvement' and 'adaptive planning' is shallow and not forecasting-specific. \n\n-- Intent/Purpose Fit (2.3): The primary purpose is to define and advocate for working software as an Agile artifact and value measure, not to support forecasting or its methodologies. \n\n-- Audience Alignment (6.9): The content is aimed at Agile and Scrum practitioners (the same general audience as forecasting discussions), so there's strong audience overlap. \n\n-- Signal-to-Noise Ratio (7.3): The content is focused and on-topic regarding working software. However, from a forecasting lens, most of this signal is noise since it does not materially address forecasting practices or improvements. \n\nNo penalties were applied because there are no references to obsolete practices, outdated discussions, or criticism of the category. \n\nIn summary, the content only tangentially touches on adjacent Agile practices like transparency, adaptive planning, and continuous improvement. It does not meaningfully address forecasting in Agile or Scrum (techniques, empirical data usage, metrics, or risk mitigation). Therefore, its fit under the 'Forecasting' category is tertiary and confidence in the classification is low.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "resourceId": "Working Software",
    "category": "Azure DevOps",
    "calculated_at": "2025-05-06T11:55:52",
    "ai_confidence": 19.637,
    "ai_mentions": 0.3,
    "ai_alignment": 2.348,
    "ai_depth": 2.42,
    "ai_intent": 2.605,
    "ai_audience": 6.23,
    "ai_signal": 7.275,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content exclusively discusses the general agile concept of 'working software,' focusing on its role as an artifact in Agile, Scrum, and Lean frameworks. There are extensive and detailed descriptions of what 'working software' is, its alignment with iterative development, and its impact on customer value, team progress, and feedback mechanisms. However, there are no direct or indirect mentions of Azure DevOps, its services (Boards, Repos, Pipelines, etc.), or its specific functionalities. \n\nMentions (0.300): Azure DevOps is not named or referenced at all. The only connection would be that Azure DevOps could be used to help achieve 'working software', but this is entirely implicit and not addressed in the content.\n\nConceptual Alignment (2.348): The main ideas—iterative development, value delivery, stakeholder alignment—do align with DevOps and Agile principles generally, but not specifically with Azure DevOps. There is no discussion about how Azure DevOps enables or manages working software.\n\nDepth (2.420): The piece demonstrates depth in Agile and Scrum concepts, but adds nothing related to Azure DevOps tools, methods, or practices.\n\nIntent (2.605): The aim is to inform about the importance of 'working software' in Agile delivery, which could be relevant to anyone using Azure DevOps. Still, the primary intent is not Azure DevOps-focused.\n\nAudience (6.230): The audience—Agile practitioners, Scrum teams—is generally similar to Azure DevOps users, offering some alignment on readership.\n\nSignal (7.275): The content is high signal for its topic (working software in Agile), but largely irrelevant to Azure DevOps.\n\nNo penalties were applied, as the content is not outdated or contradictory; it's just off-category. As a result, this content is 'Tertiary' for the Azure DevOps category: it may be tangentially interesting background for an Azure DevOps audience, but provides little to no focused relevance.",
    "level": "Ignored"
  },
  "Deployment Frequency": {
    "resourceId": "Working Software",
    "category": "Deployment Frequency",
    "calculated_at": "2025-05-06T11:55:52",
    "ai_confidence": 36.791,
    "ai_mentions": 1.6,
    "ai_alignment": 3.9,
    "ai_depth": 3.2,
    "ai_intent": 4.4,
    "ai_audience": 7.3,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content focuses almost exclusively on the concept of 'working software' as a core Agile artifact and how it demonstrates value delivery, progress, and alignment with customer needs. Direct mentions (1.6) are minimal; 'deployment frequency' is not mentioned, nor are its synonyms, and there are no explicit references to deployment cadence, release intervals, or CI/CD. Alignment (3.9) is low to moderate because while working software is necessary for frequent deployment, the content never discusses optimizing deployment intervals, strategies to increase deployment frequency, nor the value of rapid releases. Depth (3.2) reflects a surface-level overlap at best—references to iteration, release, and feedback are present but are not explored through a deployment frequency lens. The intent (4.4) is about communicating the value of creating increments of working software, not about optimizing how often those increments are released or deployed. Audience (7.3) aligns somewhat, as this would be of interest to practitioners of Agile or DevOps, but its framing is more general Agile, not specific to those concerned with deployment metrics. Signal (7.5) is strong within its topic (working software) but most content is not relevant to deployment frequency, thus lowering the overall ratio. No penalties are applied as the content does not reference outdated practices or contradict the framing, but it is only tangentially connected to deployment frequency, justifying a Tertiary level and modest confidence score.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "resourceId": "Working Software",
    "category": "Working Agreements",
    "calculated_at": "2025-05-06T11:55:53",
    "ai_confidence": 23.533,
    "ai_mentions": 0.8,
    "ai_alignment": 2.6,
    "ai_depth": 3.0,
    "ai_intent": 3.1,
    "ai_audience": 7.3,
    "ai_signal": 5.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is focused specifically on the concept of 'Working Software' as an artifact and outcome within Agile, Scrum, and Lean frameworks. There is no explicit mention or discussion of 'Working Agreements' (score: 0.8), nor are any of the primary dimensions of working agreements—such as defining team norms, communication protocols, or agreement creation—explored. Conceptual alignment is weak (2.6) as the text only lightly touches on themes related to collaboration, and even those instances are generic (enhancing collaboration, increasing transparency), not referencing the agreements that structure teamwork itself. Depth (3.0) is moderate solely in describing the meaning and impact of working software, but there is no substantive exploration of team norms, principles, or the structure of how teams work together. The intent/purpose (3.1) centers on explaining what working software is, not on supporting or informing about working agreements. Audience alignment is moderate-high (7.3) because the piece targets agile practitioners and teams who *might* also care about working agreements, but the content itself is not tailored to that topic. The signal-to-noise ratio (5.2) is middling: the writing is focused, but almost entirely irrelevant for the category of 'Working Agreements.' No penalties apply, as the content is current and not oppositional to the category, merely unrelated. The overall confidence reflects that this content is at best tangential to 'Working Agreements'—relating only via the shared agile context, not through direct or meaningful connection to the norms or agreements governing team processes.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "resourceId": "Working Software",
    "category": "Entrepreneurship",
    "calculated_at": "2025-05-06T11:55:52",
    "ai_confidence": 54.95,
    "ai_mentions": 0.7,
    "ai_alignment": 4.8,
    "ai_depth": 6.35,
    "ai_intent": 5.15,
    "ai_audience": 7.25,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "Direct Mentions (0.700): The term 'entrepreneurship' is not explicitly mentioned at all. The content references business outcomes (value delivery, innovation) but does not name the category, only briefly referencing 'business success' in generic terms.\n\nConceptual Alignment (4.800): There is some downstream relevance to entrepreneurship through discussions of delivering value, adaptability, innovation, and responding to customer needs. However, the core focus is software delivery within Agile frameworks rather than the entrepreneurial process, mindset, or venture creation.\n\nDepth of Discussion (6.350): The content thoroughly explains what constitutes working software in Agile/Scrum, touching on value creation, feedback loops, and adaptability. Yet, it remains anchored in team-level software practices, not entrepreneurship-specific depth.\n\nIntent / Purpose Fit (5.150): The main intent is to inform Agile practitioners about working software as an artifact and process measure—tangentially supportive for entrepreneurial ventures that use Agile, but not designed specifically for entrepreneurial guidance or mindset.\n\nAudience Alignment (7.250): The target audience is primarily Agile teams, Scrum Masters, and product development professionals. There is moderate overlap with startup founders or entrepreneurs using agile practices, but this is peripheral.\n\nSignal-to-Noise Ratio (8.000): The content remains highly focused and on-topic with little filler, but its focus is on internal process rather than the entrepreneurial journey.\n\nLevel: Tertiary. Discussion is indirectly relevant to entrepreneurship through the lens of value-driven product development and innovation, but does not target or serve the category primarily or even secondarily.\n\nNo penalties apply: The content is current and neutral in tone.",
    "level": "Tertiary"
  },
  "Automated Testing": {
    "resourceId": "Working Software",
    "category": "Automated Testing",
    "calculated_at": "2025-05-06T11:55:53",
    "ai_confidence": 22.73,
    "ai_mentions": 0.6,
    "ai_alignment": 2.3,
    "ai_depth": 1.9,
    "ai_intent": 2.7,
    "ai_audience": 5.8,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses on the concept of 'working software' within Agile, Scrum, and Lean frameworks. It discusses the value of delivering tangible, functional software increments at the end of each sprint, emphasizing value delivery and business outcomes. However, there is no direct or indirect mention of automated testing, test automation tools, types of tests, test frameworks, or any associated practices or methodologies central to the 'Automated Testing' category. \n\n1. **Direct Mentions (0.6)**: No explicit mention of automated testing or related terminology. The score remains near the minimum as a tiny indirect connection could be drawn only insofar as quality is referenced via the 'Definition of Done.'\n\n2. **Conceptual Alignment (2.3)**: The themes around quality and increments are fundamental to environments where automated testing is common, but the content never makes this connection nor discusses testing. There is only light, tangential overlap through references to 'quality' and 'Definition of Done.'\n\n3. **Depth of Discussion (1.9)**: There is some elaboration about process and quality deliverables but absolutely no discussion of automated testing principles, frameworks, strategies, or the test lifecycle. The content is entirely at the surface concerning any aspect of testing.\n\n4. **Intent / Purpose Fit (2.7)**: The purpose is to explain 'working software' as an Agile measure and outcome, not to explore, teach, or discuss automated testing in any way, although there is a weak indirect relevance through the emphasis on release readiness and quality.\n\n5. **Audience Alignment (5.8)**: The piece targets a broad Agile/Lean/Scrum audience, which could include practitioners interested in automated testing, but it is not specifically tailored to those focused on test automation.\n\n6. **Signal-to-Noise Ratio (3.3)**: The majority of the content is on-topic with respect to Agile and working software, but almost all is irrelevant to automated testing specifically; only a minimal amount relates to software quality—a peripheral concern in this context.\n\nNo penalty points were applied, as the content is not outdated and does not contradict the testing category's framing. Overall, the content has extremely weak relevance to 'Automated Testing,' meriting a low, but not zero, confidence score due to light, indirect connections with quality and deliverables.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "resourceId": "Working Software",
    "category": "Complexity Thinking",
    "calculated_at": "2025-05-06T11:55:53",
    "ai_confidence": 12.2,
    "ai_mentions": 0.9,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 2.0,
    "ai_audience": 3.6,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses on defining and elaborating the concept of 'working software' within Agile, Scrum, and Lean frameworks. There are no explicit references to complexity science, complexity thinking, or related frameworks such as the Cynefin framework, Ralph Stacey’s work, or non-linear dynamics. \n\n- Direct Mentions (0.9): There is no mention—direct or indirect—of complexity thinking, complexity theory, or any of its frameworks.\n- Conceptual Alignment (1.1): The article is closely aligned with Agile and Scrum definitions of working software, which may be found in environments that value adaptability, but the concepts of emergence, non-linearity, or complex adaptive systems are entirely absent.\n- Depth of Discussion (1.3): The discussion goes deeper into the practicalities and benefits of working software but not in the context of complexity science.\n- Intent/Purpose Fit (2.0): The main purpose is to educate about working software as an Agile concept, which is only tangentially related to complexity thinking via the broader umbrella of Agile, but not with specific integration.\n- Audience Alignment (3.6): The primary audience—Agile teams and practitioners—may overlap slightly with those interested in complexity thinking, but the article itself does not target a complexity-oriented audience.\n- Signal-to-Noise (2.0): The content remains focused and relevant to its stated subject, but that subject is adjacent, not central, to complexity thinking.\n\nNo penalties were applied as the material is current, respectful, and does not undermine the category’s principles. Overall, the connection to 'Complexity Thinking' is extremely weak, secondary at best, and the result is a low confidence score indicating only a tertiary relation.",
    "level": "Ignored"
  },
  "Beta Codex": {
    "resourceId": "Working Software",
    "category": "Beta Codex",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 39.35,
    "ai_mentions": 0.2,
    "ai_alignment": 3.95,
    "ai_depth": 3.75,
    "ai_intent": 4.1,
    "ai_audience": 7.1,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content focuses entirely on defining and explaining 'working software' as an artifact within Agile, Scrum, and Lean processes. \n\n- Direct Mentions: Beta Codex is not mentioned at all, nor are its key concepts by name. There are no explicit references, thus the score is nearly the minimum (0.2 instead of 0 due to tangential references to adaptability).\n- Conceptual Alignment: The broader ideas of adaptability, team value, iterativity, and customer focus are present, which align tangentially with some BetaCodex themes (decentralisation, human-centricity, incremental improvement). However, the core philosophies—such as radical decentralisation, self-organised structures, and anti-hierarchical frameworks—are not substantively touched upon. The score reflects weak but nonzero conceptual overlap.\n- Depth of Discussion: The text stays strictly at the level of delivering functional software as an Agile metric. There's depth in describing working software as a concept, but not in any BetaCodex-related theory, practice, or comparison. This justifies a low score slightly above alignment.\n- Intent / Purpose Fit: The intent is educational and descriptive regarding a common Agile artifact, not about organisational design, BetaCodex transitions, or decentralised leadership, so intent only slighlty aligns.\n- Audience Alignment: The described concepts are relevant for Agile practitioners, Scrum teams, and possibly change agents interested in value delivery—groups which could have crossover with the BetaCodex audience, especially where agility and adaptation are concerned; thus, the score is highest here.\n- Signal-to-Noise Ratio: The entire piece is focused and has little filler or digression. Although the topic does not align with BetaCodex, the clarity and focus of the content are strong, justifying a high score.\n\nNo penalty adjustments are needed: content is current, neutral in tone, and doesn't reference obsolete or contrary viewpoints.\n\nOverall, this is a tertiary fit: the content is potentially useful background for people interested in BetaCodex (with its interest in adaptiveness and value delivery), but does not directly discuss, evidence, or advance any BetaCodex-related principle or practice. Thus, the confidence is appropriately low.",
    "level": "Ignored"
  },
  "Windows": {
    "resourceId": "Working Software",
    "category": "Windows",
    "calculated_at": "2025-05-06T11:55:53",
    "ai_confidence": 4.11,
    "ai_mentions": 0.3,
    "ai_alignment": 0.9,
    "ai_depth": 0.95,
    "ai_intent": 0.8,
    "ai_audience": 0.7,
    "ai_signal": 0.55,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 4.0,
    "reasoning": "The content discusses the concept of 'working software' in the context of Agile, Scrum, and Lean methodologies. There is no explicit mention of the Windows operating system or any technical aspects related to installing, configuring, troubleshooting, or optimising Windows environments. The discussion is entirely about software development methodologies and progress measurement, which are general IT and development concepts rather than Windows-specific topics.\n\n- Mentions (0.3): No direct or explicit references to Windows are present.\n- Alignment (0.9): The main idea (delivering working software in Agile frameworks) does not conceptually align with the Windows category as defined—there is no focus or specificity toward Windows OS management.\n- Depth (0.95): The depth of discussion is strong, but it elaborates on Agile practices, not Windows technicalities.\n- Intent (0.8): The intent is to explain an Agile artifact, not provide guidance about Windows, making it tangential at best.\n- Audience (0.7): The target audience is Agile practitioners and development teams, not specifically users or administrators of the Windows OS.\n- Signal (0.55): The content is focused but on an off-topic subject, unrelated to Windows.\n\nNo penalties were applied, as the content is neither outdated nor critical/satirical. The confidence score is extremely low and consistent with a tertiary or non-category fit.\n",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "resourceId": "Working Software",
    "category": "Hybrid Agile",
    "calculated_at": "2025-05-06T11:55:54",
    "ai_confidence": 11.13,
    "ai_mentions": 0.6,
    "ai_alignment": 1.2,
    "ai_depth": 1.3,
    "ai_intent": 0.7,
    "ai_audience": 3.3,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses exclusively on defining and elaborating on 'working software' as an artifact central to Agile (especially Scrum) practice. There are no explicit or implicit references to Hybrid Agile, blending of methodologies, or the critical examination of pitfalls in merging traditional and agile frameworks, which are core requirements for the 'Hybrid Agile' category.\n\nMentions (0.6): The term 'Hybrid Agile' is not directly mentioned or referenced at all.\nAlignment (1.2): The content is aligned with Agile concepts, but does not touch on Hybrid Agile, its dysfunctions, or define any challenges from blending approaches. It does, however, generally align with the interests of those concerned with Agile delivery.\nDepth (1.3): The discussion is moderately deep—but only regarding the significance of 'working software' for teams using Scrum or Agile practice. There is no exploration of Hybrid Agile, so depth is very superficial for the relevant category.\nIntent (0.7): The intent is to describe and promote understanding of an Agile artifact, not to examine issues relating to Hybrid Agile or its practical complications. Thus, the intent is only barely relevant (as a general, not category-specific, informative resource).\nAudience (3.3): The content targets Agile/Scrum teams and practitioners, which lightly overlaps with a Hybrid Agile-interested audience, but not primarily those focused on the dysfunctions or analysis of methodology integration.\nSignal (2.7): The content is focused, coherent, and all about 'working software'. However, its primary topic is not relevant to the 'Hybrid Agile' challenges or concepts, so its signal-to-noise is low for this specific category, but not zero, since proper Scrum practices are sometimes contrasted with hybrid failures.\nLevel: Tertiary, as the resource is only peripherally related to the Hybrid Agile category—mainly via general Agile terminology, with no critical analysis or direct relevance to the defined category context.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "resourceId": "Working Software",
    "category": "Lean Thinking",
    "calculated_at": "2025-05-06T11:55:54",
    "ai_confidence": 47.847,
    "ai_mentions": 2.8,
    "ai_alignment": 5.4,
    "ai_depth": 4.95,
    "ai_intent": 5.6,
    "ai_audience": 4.65,
    "ai_signal": 5.05,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content primarily centers on the concept of 'working software' within Agile (and to a lesser extent, Scrum), describing its meaning, importance, and how it serves as a core artifact and increment of progress in iterative development. There is a single explicit mention of Lean ('in Agile, Scrum, and Lean frameworks'), but no deeper exploration or direct application of core Lean Thinking principles. \n\nMentions (2.800): Lean is named once as part of a list, but not discussed or referenced elsewhere. \n\nAlignment (5.400): The focus on 'delivering value', 'continuous improvement', and 'efficiency' is partially aligned with Lean, but the discussion is rooted in Agile/Scrum practices, not Lean Thinking concepts specifically (such as waste elimination, value stream mapping, or Lean tools). \n\nDepth (4.950): The discussion elaborates on the benefits and intent behind working software but stays abstract regarding Lean (no discussion of Value Streams, Flow, Pull, Perfection, or Lean leadership/tools). There’s some overlap (e.g., continuous improvement), but no depth on Lean mechanics. \n\nIntent (5.600): The content is informative, aiming to clarify what working software is and why it matters in iterative development, which partially aligns with Lean's focus on value but is not explicitly about Lean Thinking. \n\nAudience (4.650): The audience is mainly Agile practitioners—developers, Scrum Masters, product owners—the same group that might benefit from Lean Thinking, but the targeting leans more Agile/Scrum than Lean. \n\nSignal (5.050): Most of the content stays on the topic of working software; however, the focus is on Agile/Scrum concepts with only peripheral relevance to Lean Thinking.\n\nNo penalties were applied as the content is current, not sarcastic/undermining, and does not reference obsolete practices. \n\nThis leads to a 'Secondary' level: the content is tangentially related (through general business agility and value delivery overlap), but not truly about Lean Thinking per the strict definition.",
    "level": "Tertiary"
  },
  "Product Discovery": {
    "resourceId": "Working Software",
    "category": "Product Discovery",
    "calculated_at": "2025-05-06T11:55:55",
    "ai_confidence": 37.09,
    "ai_mentions": 0.7,
    "ai_alignment": 4.6,
    "ai_depth": 2.9,
    "ai_intent": 4.2,
    "ai_audience": 5.1,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "Direct Mentions (0.7): The content does not directly reference 'Product Discovery' or its key terms (user research, MVP, ideation, etc.), focusing instead on 'working software' within Agile and Scrum contexts.\n\nConceptual Alignment (4.6): The theme touches tangentially on aligning software increments with customer value and expectations, which is adjacent to product discovery, but it primarily discusses value delivery and measurement—not discovery processes.\n\nDepth of Discussion (2.9): The piece describes 'working software' in broad Agile and Scrum terms, focusing on its function, importance, and the roles it plays. It does not explore how working software is used as part of discovering user needs or defining product features, missing the substantive methodologies or frameworks of product discovery.\n\nIntent/Purpose Fit (4.2): The intent is to highlight the significance of working software as a measure and artifact, rather than as a tool or method for product discovery. There is brief overlap around value delivery and responding to customer feedback, but the main thrust is not about discovery.\n\nAudience Alignment (5.1): The audience includes Agile practitioners, Scrum Masters, and product teams—adjacent to, but not strictly aligned with, product discovery specialists, researchers, or strategists.\n\nSignal-to-Noise Ratio (4.4): The content is on-topic for working software and related Agile practice, but little of it is directly relevant to the specific aims or methods of product discovery as defined above. There is some overlap in areas discussing value and customer needs, but it is insufficient for strong fit.\n\nNo penalties applied: The content is current and respectful and does not contradict the category's framing, so no deductions.\n\nOverall, while the concepts of value, customer satisfaction, and feedback are present, they are framed around delivery, iteration, and output—not around the discovery, validation, or research components central to 'Product Discovery'. Thus, the fit is weak and tertiary.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "resourceId": "Working Software",
    "category": "Deployment Strategies",
    "calculated_at": "2025-05-06T11:55:54",
    "ai_confidence": 21.0,
    "ai_mentions": 0.8,
    "ai_alignment": 2.1,
    "ai_depth": 2.6,
    "ai_intent": 2.0,
    "ai_audience": 6.5,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "This content focuses on 'Working Software' as an output and artifact of Agile and Scrum methodologies, describing its characteristics, role in value delivery, collaboration, and continuous improvement. There is no explicit or even implicit mention of deployment strategies, methodologies, or the management of risk in production releases. Core deployment strategy topics (blue-green, canary, rolling updates, feature flags, etc.) are not discussed. The alignment score is low since the main theme concerns what 'working software' is, not how it is deployed. Depth is similarly low, with the discussion centering entirely on the agile artifact, not deployment methods. The intent is to inform Agile teams and stakeholders about the significance of this artifact, not to provide actionable insight or guidance about deployment strategies. Audience alignment and signal-to-noise are relatively higher since the discussion is relevant for technical teams (who might care about deployment) and stays focused on the artifact (no filler), but the topic itself is not a deployment strategy. No penalties are applied, as the content is neither outdated nor oppositional to the category. Final confidence is duly low and classified as tertiary relevance.",
    "level": "Ignored"
  },
  "Revenue per Employee": {
    "resourceId": "Working Software",
    "category": "Revenue per Employee",
    "calculated_at": "2025-05-06T11:55:56",
    "ai_confidence": 7.312,
    "ai_mentions": 0.4,
    "ai_alignment": 1.6,
    "ai_depth": 1.8,
    "ai_intent": 0.6,
    "ai_audience": 1.2,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses entirely on the Agile concept of 'working software' as a core artifact and deliverable, describing its value, purpose, and role in iterative development practices like Scrum and Lean. There is no mention—direct or indirect—of Revenue per Employee, nor any financial observability metrics, workforce efficiency metrics, or comparisons of organizational effectiveness through empirical data. The main ideas are centered on delivering value, continuous feedback, adaptability, transparency, and business success, but these are framed from the perspective of software development practices rather than empirical financial metrics. Thus, conceptual alignment is minimal (1.6/10) and depth (1.8/10) reflects only tangential relevance—mentions of 'value' or 'business success' aren't connected to systemic financial performance metrics or data analysis. The intent is to inform about the meaning and impact of working software in Agile contexts, with zero evidence of being framed for audiences seeking insight on Revenue per Employee; thus, audience (1.2/10) and signal (1.1/10) are both low. No penalties are applied, as the content isn’t outdated, nor does it parody or criticize the metric—the misalignment is thematic, not tonal or temporal. The tag is at best tertiary, as the overlap is purely coincidental and not rooted in the correct domain.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "resourceId": "Working Software",
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 56.632,
    "ai_mentions": 1.6,
    "ai_alignment": 6.7,
    "ai_depth": 6.3,
    "ai_intent": 7.5,
    "ai_audience": 6.4,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "Direct Mentions (1.6): The content never directly references 'Sociotechnical Systems' nor does it overtly use related terminology. While there are some peripheral hints to social and technical interplay (e.g., 'teams' and 'stakeholders' aligning around value, organisational outcomes), explicit naming is absent, thus only a low score.\n\nConceptual Alignment (6.7): The themes touch on the intersection of social (teams, stakeholders, customer needs) and technical (software, increments, quality, Definition of Done) elements in agile software delivery. However, the focus is heavily weighted toward the artifact ('working software') rather than a systematic exploration of sociotechnical dynamics. The content hints at aspects such as collaboration, transparency, adaptability, and customer satisfaction, which are somewhat aligned with sociotechnical principles, but this alignment is not comprehensive or systematically explored.\n\nDepth of Discussion (6.3): The content offers a moderately in-depth discussion about 'working software' as an agile artifact, explaining its significance, the process of iteration and adaptation, and its impact on team focus and value delivery. It mentions collaboration, continuous improvement, and adaptation, but discussion of the sociotechnical system theory or frameworks is absent. There is relatively little exploration of organisational structure, team dynamics at the system level, or how technology shapes culture and vice versa. The depth is above average because it draws some connection to organisational outcomes and adaptive practices, but doesn't reach a thorough or theoretically informed level.\n\nIntent / Purpose Fit (7.5): The content’s primary intent is descriptive and informative about the role of working software in agile approaches. It is not synoptic with sociotechnical systems, but it does inherently require consideration of both technical achievement (software) and its impact on organisational goals, adaptability, and collaboration—moderately fitting the description. No evidence of tangential or off-purpose focus.\n\nAudience Alignment (6.4): Likely targeted at agile practitioners, team leads, or stakeholders interested in agile delivery, which partially overlaps with an audience for sociotechnical systems but may not match those looking for strategic/organisational diagnosis or academic sociotechnical study. Audience focus is general, practitioner-oriented, not specifically tailored to sociotechnical theorists or systems thinkers.\n\nSignal-to-Noise Ratio (7.2): The majority of the content is on-topic—focused tightly on defining and contextualizing working software in agile contexts. There is little filler or irrelevance, but a portion of the content sits outside the direct boundaries of sociotechnical systems as defined (e.g., definitions, agile framework generalities), so it is not perfectly targeted in terms of 'signal.'\n\nNo penalties are applied because the content is current, constructive, and not contradictory. The overall level is 'Secondary': while elements of sociotechnical interaction are present (especially in references to team collaboration, alignment, and iterative delivery), the explicit and systematic discussion of the interplay between social and technical subsystems is only implied, making sociotechnical systems a secondary—not central—theme.",
    "level": "Tertiary"
  },
  "Agile Planning Tools": {
    "resourceId": "Working Software",
    "category": "Agile Planning Tools",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 33.7,
    "ai_mentions": 1.6,
    "ai_alignment": 3.8,
    "ai_depth": 3.4,
    "ai_intent": 3.2,
    "ai_audience": 8.6,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses on 'working software' as a core artifact in Agile methodologies, particularly Scrum, emphasizing its value, usage, and impact on team collaboration, customer satisfaction, and iterative delivery. However, there is almost no direct reference to Agile Planning Tools themselves—such as Jira, Trello, backlog management platforms, sprint or release planning applications, or their features. \n\n1. Mentions (1.6): The piece never mentions Agile Planning Tools by name or description; there is only passing reference to 'adaptive planning' and 'alignment,' which are Agile themes but not tools. \n2. Alignment (3.8): The topic loosely aligns with the intent of enabling planning and adaptation, but since it discusses an output (working software) rather than the means or tools of planning, this alignment is weak. \n3. Depth (3.4): The discussion is in-depth regarding the definition, role, and value of working software in Agile, but it does not elaborate on tools or planning mechanisms. \n4. Intent (3.2): The piece’s intent is to educate on the value of working software in Agile, not on Agile Planning Tools, so the fit is tangential. \n5. Audience (8.6): The content would be relevant to an Agile practitioner, Scrum Master, or product owner—the correct audience for Agile Planning Tools—but not with the tool perspective. \n6. Signal-to-noise (7.1): The writing is focused and relevant to Agile, but not to the planning tools subtopic; thus, most of the 'signal' is off-topic concerning the category. \n\nNo penalties were applied as the information is current, accurate, and neutrally presented.\n\nThe low confidence reflects that, while the article is valuable in the context of Agile as a whole and for agile practitioners, it is only peripherally related to Agile Planning Tools, and even then, only in the sense that working software is an output of planned work—not of the planning tools or their use themselves.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "resourceId": "Working Software",
    "category": "Backlog Refinement",
    "calculated_at": "2025-05-06T11:56:00",
    "ai_confidence": 13.54,
    "ai_mentions": 0.2,
    "ai_alignment": 1.8,
    "ai_depth": 1.5,
    "ai_intent": 1.4,
    "ai_audience": 2.2,
    "ai_signal": 1.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content focuses exclusively on the concept of 'Working Software' as a core artifact in Agile, Scrum, and Lean methodologies—exploring its significance, the meaning of increments, Definition of Done, value delivery, and its connection with stakeholder alignment and continuous improvement. There are NO direct mentions or even implicit references to backlog refinement, nor any discussion of backlog-related processes, prioritization, or refinement techniques. The conceptual alignment is extremely low: while the theme of value delivery is shared by both working software and backlog refinement, the main ideas and intent here are about the output of Sprints and the criteria for deliverable software—not the process of refining backlog items for future work. Depth is minimal regarding backlog refinement: no techniques, roles, meetings, or tools are referenced. The purpose is informative, but strictly about working software. The intended audience (Agile/Scrum practitioners) mildly overlaps, but the content is not targeting product owners or team members engaged in refinement activities. The signal-to-noise ratio is low for the refinement category; nearly 100% of the content is focused elsewhere. No penalties are needed, as the content is current and tone-neutral. The final confidence score, 13.54, faithfully represents that this resource is tertiary at best for 'Backlog Refinement,' with little to no utility in that context.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "resourceId": "Working Software",
    "category": "Company as a Product",
    "calculated_at": "2025-05-06T11:56:00",
    "ai_confidence": 39.07,
    "ai_mentions": 0.4,
    "ai_alignment": 3.65,
    "ai_depth": 3.85,
    "ai_intent": 3.05,
    "ai_audience": 4.5,
    "ai_signal": 4.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content exclusively discusses 'working software' as an Agile artefact and measure of value delivery in teams and organisations. There is a clear focus on team performance, iterative delivery, customer-centricity, and continuous improvement—all related to some of the principles found in Company as a Product (CaaP). However, the discussion is narrowly about software product increments, not about treating the company itself as a dynamic product.\n\nMentions (0.40): There are no explicit direct references or naming of 'Company as a Product' or its primary terminology. The content does not frame the organisation as a product but talks about digital/software products.\n\nAlignment (3.65): The text partly aligns with secondary CaaP concepts such as continuous improvement and customer value, but these are delivered in the context of software artefacts. Broad topics such as strategic objectives, cross-functional org design, or company-wide feedback loops are absent.\n\nDepth (3.85): The explanation is in-depth for the topic of working software in Agile/Scrum, but it does not expand into broader CaaP frameworks, outcomes, or company-level experimentation—remaining at the project/team level.\n\nIntent (3.05): The main intent is to educate on the value and nature of 'working software,' not on org-level organisational design or CaaP. The link to CaaP is indirect at best.\n\nAudience (4.50): The article is pitched at Agile practitioners (teams, possibly managers) rather than executives, strategists, or those working on org-wide transformation as CaaP does. Some overlap exists in broader Agile and organisational improvement circles.\n\nSignal (4.30): Content is on-topic with respect to Agile/Scrum artefact discussion; little filler, but also little directly relevant to CaaP beyond abstracted themes like value delivery and improvement.\n\nThere were no penalties applied as the content is not outdated, satirical, or critical. Overall, the text is at the 'Tertiary' level—it touches upon a few CaaP-relevant principles (like measuring outcomes and customer value) but remains mostly outside the intended classification.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "Working Software",
    "category": "Definition of Done",
    "calculated_at": "2025-05-06T11:56:04",
    "ai_confidence": 56.82,
    "ai_mentions": 2.6,
    "ai_alignment": 6.9,
    "ai_depth": 5.8,
    "ai_intent": 6.4,
    "ai_audience": 7.0,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content, titled 'Working Software', is primarily focused on explaining the value, characteristics, and significance of working software within Agile, Scrum, and Lean contexts. The Definition of Done (DoD) is mentioned once explicitly: 'The Definition of Done ensures that the software meets predefined criteria of quality, ensuring that the Increment is valuable, functional, and ready for release.' This mention situates the DoD as one aspect among many that contribute to what constitutes working software, but the text does not go into details about DoD itself (such as its criteria, creation, or team use). \n\nFor Direct Mentions (2.6), there is only a single explicit mention of DoD, with the rest focusing on 'working software'. For Conceptual Alignment (6.9), the content does align with the DoD category in that it acknowledges the necessity of criteria (DoD) to qualify a software increment as 'done', but the thrust stays on the artifact itself, not the DoD process or structure. Depth of Discussion (5.8) is moderate: while the passage discusses how quality and completeness are judged via DoD, it does not enumerate DoD's components, best practices, or its collaborative/team role specifically. For Intent/Purpose Fit (6.4), the main goal is to convey what working software is and why it's important, not to define or explain DoD directly—so it's related, but DoD is tangential. Audience Alignment (7.0) is fairly high, as practitioners and teams in Agile frameworks are targeted, but the focus is not DoD-centric. Signal-to-Noise Ratio (6.1) is moderate—the only real off-topic areas are where the text discusses general Agile benefits without relating them specifically to DoD. \n\nThere were no outdated practices or negative framing to warrant penalties. This content is best classified as 'Secondary', as DoD is a supporting sub-topic, not the primary subject. The final confidence of 56.82 correctly reflects a partial, but not direct, fit with the 'Definition of Done' category.",
    "level": "Tertiary"
  },
  "Team Motivation": {
    "resourceId": "Working Software",
    "category": "Team Motivation",
    "calculated_at": "2025-05-06T11:55:55",
    "ai_confidence": 35.31,
    "ai_mentions": 0.9,
    "ai_alignment": 3.7,
    "ai_depth": 3.3,
    "ai_intent": 2.6,
    "ai_audience": 5.5,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "The content centers on the definition, purpose, and significance of 'Working Software' as an Agile artifact. While it references team concepts (alignment, collaboration, value delivery), its main focus is on what working software is, why it matters, and its role as the output of iterations in Agile and Scrum. \n\n1. Mentions (0.9): The term 'team' appears occasionally, and collaboration is referenced, but 'motivation'—or closely related terms like engagement, ownership, or psychological safety—are not directly mentioned. \n2. Alignment (3.7): There is partial conceptual alignment: the content relates to transparency, collaboration, and the impact of working software on customer satisfaction and business success. However, it does not directly address motivational techniques or theories, nor does it dig into the psychological or social drivers for team motivation as defined by the category.\n3. Depth (3.3): Discussion of team engagement and motivation is shallow and implicit at best; the depth is instead around the delivery and measurement of value via working software.\n4. Intent (2.6): The primary intent is educational—informing about the role and value of working software—rather than to motivate, engage, or support teams in a motivational sense. As such, the intent is tangential to the category.\n5. Audience (5.5): The likely audience includes Agile practitioners, Scrum Masters, Product Owners, and technical team members—overlapping somewhat with the target audience of the Team Motivation category, but the content is not created specifically for readers seeking insights on motivation.\n6. Signal (7.6): The content remains focused on the topic of working software, with very little unrelated or tangential material. However, the signal for 'Team Motivation' itself is low.\n\nNo penalties were applied, as the content is current, consistent in tone, and does not contradict the category framing.\n\nOverall, 'Working Software' is a necessary facilitator for team motivation (by clarifying progress and value), but the content doesn't directly explore motivational factors, practices, or psychological/social team dynamics. Thus, its fit for 'Team Motivation' is tertiary and confidence is accordingly low.",
    "level": "Ignored"
  },
  "Personal": {
    "resourceId": "Working Software",
    "category": "Personal",
    "calculated_at": "2025-05-06T11:55:55",
    "ai_confidence": 23.725,
    "ai_mentions": 0.8,
    "ai_alignment": 2.7,
    "ai_depth": 2.8,
    "ai_intent": 1.7,
    "ai_audience": 7.2,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content provides an objective, descriptive overview of 'working software' as a core artifact within Agile, Scrum, and Lean frameworks. \n\n- Mentions (0.8): There are no explicit references or direct mentions of personal experience, reflection, or anecdote—'Personal' is neither named nor indirectly addressed.\n- Alignment (2.7): The conceptual alignment with the 'Personal' category is weak. The content focuses on general definitions, framework elements, and standard practices, rather than personal stories or subjective insights.\n- Depth (2.8): While the content discusses the role and importance of working software at some length, the discussion is analytical and general—there is no personal depth, insight, or anecdotal illustration.\n- Intent (1.7): The intent appears to be informative or instructional, not personal or reflective. There is no attempt to share individual perspectives or experiences.\n- Audience (7.2): The intended audience matches practitioners or stakeholders in Agile contexts, who may be interested in business agility. However, this is the only strong dimension, as it broadly targets the right domain.\n- Signal (5.5): The content is focused, relevant, and concise within its informative scope—there is little off-topic or filler material; the noise, if any, is due to generalization rather than digression.\n- No penalty is applied, as the tone is neutral (not satirical or critical), and the content is up-to-date.\n\nIn summary, while the content is well-written and highly relevant to Agile and Scrum, it lacks the personal voice, individual reflection, or anecdotal substance required for the 'Personal' category. All elements—examples, explanations, framing—stem from theoretical or framework-based perspectives rather than unique personal insights. Therefore, the confidence of classifying it under 'Personal' is very low, with the evaluated score proportionate to the evidence.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "resourceId": "Working Software",
    "category": "Modern Source Control",
    "calculated_at": "2025-05-06T11:55:55",
    "ai_confidence": 8.34,
    "ai_mentions": 0.11,
    "ai_alignment": 0.87,
    "ai_depth": 0.85,
    "ai_intent": 0.79,
    "ai_audience": 1.03,
    "ai_signal": 0.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses exclusively on the concept of 'working software' within Agile, Scrum, and Lean frameworks, detailing its role, characteristics, and value in iterative development environments. There is no explicit mention of source control, VCS tools, or any of the key topics under 'Modern Source Control' (e.g., Git, branching, commit practices). While the content addresses team collaboration, value delivery, and adaptive planning, it does not discuss the version control practices, workflows, or technical strategies central to 'Modern Source Control.' For scoring: \n- Mentions: A very low section (0.11), as the content never refers to version control or source control technologies or methods, not even indirectly. \n- Alignment: Scored low (0.87) due to the strong focus on output and process value, not on the control or management of code assets. \n- Depth: Limited (0.85), as there is no substantive discussion of source control methodologies, only development outcomes. \n- Intent: The main purpose (0.79) is to inform about the meaning and significance of working software, not version control. \n- Audience: Slightly higher (1.03): targeted at software teams familiar with Agile, possibly overlap with version control audiences, but that's indirect. \n- Signal: Marginally relevant (0.90): the content stays on topic within Agile, but the signal is off with respect to 'Modern Source Control,' as nothing is directly relevant to that category. No penalties were necessary, as the content is not outdated or contradicting. \nConclusion: The confidence score is extremely low (8.34), accurately reflecting that this content is largely unrelated to 'Modern Source Control,' barely touching even tangential aspects.",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "resourceId": "Working Software",
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-05-06T11:55:55",
    "ai_confidence": 20.68,
    "ai_mentions": 0.4,
    "ai_alignment": 2.7,
    "ai_depth": 1.8,
    "ai_intent": 2.0,
    "ai_audience": 7.2,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content focuses entirely on the concept of 'Working Software' as a central artifact and measure in Agile and Scrum. There are no direct mentions or references to 'Acceptance Test Driven Development,' nor is there any discussion of acceptance criteria, acceptance tests, stakeholder collaboration around test requirements, or any of the principles or practices specific to ATDD. \n\n1. **Direct Mentions (0.4/10)**: 'ATDD' is not named or referenced anywhere. The only partial alignment is a brief mention of 'predefined criteria,' but this refers to the general 'Definition of Done' in Scrum, not to acceptance criteria as understood in ATDD.\n\n2. **Conceptual Alignment (2.7/10)**: There is marginal conceptual overlap since both ATDD and the idea of working software value delivery aim to match output to customer requirements, and both promote stakeholder alignment. However, the content never addresses how acceptance criteria are created, shared, or tested collaboratively.\n\n3. **Depth of Discussion (1.8/10)**: The discussion is solely about 'working software' within Agile and Scrum. There’s no substantive exploration of ATDD principles, practices, or comparisons. Any marginal relevance is in mentioning criteria for completion via the 'Definition of Done.'\n\n4. **Intent/Purpose Fit (2.0/10)**: The main purpose is to explain the impact and value of 'working software' for Agile teams, not ATDD specifically, so any overlap is incidental, not by intent.\n\n5. **Audience Alignment (7.2/10)**: The target audience is Agile practitioners—teams, developers, Scrum Masters, and stakeholders—which partially overlaps with those interested in ATDD.\n\n6. **Signal-to-Noise Ratio (5.9/10)**: The content is focused with little filler, but nearly all focus is on artifacts and value measures, not ATDD. Content is on-topic for artifact discussion but off-topic for results relevant to ATDD.\n\nNo penalties were applied, as the content is current, neutral in tone, and accurate for its intended context.\n\nIn summary, the overall confidence score is quite low and the 'Tertiary' level is appropriate, as ATDD is neither a direct nor central topic.",
    "level": "Ignored"
  },
  "Working Software": {
    "resourceId": "Working Software",
    "category": "Working Software",
    "calculated_at": "2025-05-06T11:55:56",
    "ai_confidence": 97.15,
    "ai_mentions": 9.6,
    "ai_alignment": 9.8,
    "ai_depth": 9.4,
    "ai_intent": 9.5,
    "ai_audience": 9.1,
    "ai_signal": 9.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 97.0,
    "reasoning": "The content repeatedly and explicitly references 'working software' both as a term and a concept, providing multiple direct mentions (score: 9.6). The conceptual core of the piece aligns perfectly with the definition: it frames working software as an artifact/output, discusses its role in Agile and Scrum, emphasizes the Increment, Definition of Done, iterative value delivery, feedback cycles, customer focus, and business value (alignment: 9.8). The depth goes beyond surface mentions—exploring working software’s characteristics, role in measurement, tangible artifact status, its differentiation from methods/practices, and organizational impact (depth: 9.4). The intent is squarely to inform, clarify, and reinforce the importance and characteristics of working software in teams, with no tangential agendas (intent: 9.5). Audience targeting is precise: practitioners, Scrum teams, Agile professionals, and stakeholders involved in delivery—matching the likely readers/users of the category (audience: 9.1). Signal-to-noise is extremely high; nearly every sentence advances the central topic, with no filler or tangential content (signal: 9.7). No penalties are required as the information is current, accurate, and affirmatively supports the category. Overall, the content serves as a prototypical explanation for this category, earning a Primary level designation and an exceptionally high confidence score.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the category, as it thoroughly explores 'working software'—defining the term, its significance in Agile and Scrum, and its practical implications. The discussion is focused, detailed, and highly relevant for Agile practitioners, offering clear explanations without digression. Its intent is to inform and clarify, making it a model example for this category."
  },
  "Organisational Culture": {
    "resourceId": "Working Software",
    "category": "Organisational Culture",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 31.369,
    "ai_mentions": 1.2,
    "ai_alignment": 3.6,
    "ai_depth": 3.8,
    "ai_intent": 3.5,
    "ai_audience": 4.2,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "This content primarily describes the concept of 'Working Software' as an artifact and measure of value in Agile/Scrum, focusing on its role as a deliverable, indicator of progress, and means for feedback. There are only indirect mentions of organizational culture elements, such as collaboration, transparency, and continuous improvement, but these are weakly tied to culture as defined by the category. \n\n- **Mentions (1.2):** The term 'culture' or cultural concepts are not mentioned directly. There are oblique references to behaviors that *could* reflect cultural values (e.g., collaboration, adaptability), but these are not made explicit.\n- **Alignment (3.6):** The alignment is limited. While themes like transparency, collaboration, and continuous improvement are mentioned, they are embedded within the description of technical and procedural topics (working software, increments, value delivery) rather than as explorations of cultural influence or transformation.\n- **Depth (3.8):** The discussion lacks any substantive examination of organizational culture, its formation, or transformation. Cultural aspects are side-effects at best. No exploration of leadership, values, or culture-change methodologies is present.\n- **Intent (3.5):** The main purpose is to define 'working software' in the context of Agile, not to inform or educate specifically about organizational culture. Any benefit to cultural understanding is incidental.\n- **Audience (4.2):** The content targets Agile/Scrum practitioners (developers, Scrum Masters, Product Owners), which overlaps somewhat with the intended audience for organizational culture topics, but is more technical and less geared toward executives or strategists.\n- **Signal (3.7):** The content is focused, but the focus is on the technical or artifact side of Agile, not on culture as a driver of agility. Relevant cultural concepts are weak background signals, not the primary subject.\n\nNo penalties were applied, as the content is neither outdated nor does it undermine the framing of organizational culture. \n\nThe overall confidence is low and 'Tertiary' level, as culture is a minor, indirect, and implicit aspect of the resource.",
    "level": "Ignored"
  },
  "Kanban": {
    "resourceId": "Working Software",
    "category": "Kanban",
    "calculated_at": "2025-05-06T11:55:56",
    "ai_confidence": 13.4,
    "ai_mentions": 0.1,
    "ai_alignment": 1.0,
    "ai_depth": 1.3,
    "ai_intent": 2.0,
    "ai_audience": 4.2,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "Direct Mentions (0.1): The content does not mention Kanban by name at all. It focuses exclusively on 'working software,' explicitly in the context of Agile, Scrum, and Lean. Conceptual Alignment (1.0): While working software is relevant to many Agile frameworks, it is not a principle or practice unique to Kanban and is discussed here in the context of Scrum artifacts and broader agile concepts. Depth of Discussion (1.3): The discussion goes into depth about 'working software,' but not even tangentially about Kanban principles like visualisation, WIP limits, or flow. Intent/Purpose Fit (2.0): The main purpose is to elucidate the significance of working software as an agile deliverable, which could have some minor generic overlap with Kanban's emphasis on value delivery and continuous improvement, but this is indirect at best. Audience Alignment (4.2): The audience likely includes Agile, Scrum, and Lean practitioners, some of whom may also use Kanban, so there's some partial overlap, but it's not specifically Kanban-focused. Signal-to-Noise Ratio (2.5): The content is highly focused but entirely unrelated to Kanban, resulting in highly off-topic signal in this context. No penalties were applied, as the content is current and not critical or satirical about Kanban. Overall, the content is at best tangential (tertiary) to the Kanban category as defined.",
    "level": "Ignored"
  },
  "Lead Time": {
    "resourceId": "Working Software",
    "category": "Lead Time",
    "calculated_at": "2025-05-06T11:55:56",
    "ai_confidence": 20.613,
    "ai_mentions": 0.8,
    "ai_alignment": 2.3,
    "ai_depth": 2.8,
    "ai_intent": 3.5,
    "ai_audience": 6.3,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content titled 'Working Software' focuses almost exclusively on the Agile concept of working software as a deliverable and its significance in Scrum and Lean frameworks. \n\n- **Direct Mentions (0.8):** The term 'Lead Time' is never mentioned explicitly, nor is there any direct reference or synonym for it. Terms like 'increment', 'deliverable', 'iteration', and 'progress' are relevant to Agile practices, but do not represent direct mention or even strong indirect mention of Lead Time.\n\n- **Conceptual Alignment (2.3):** There is mild conceptual overlap in that the timely delivery of working software is related to the broader topic of process efficiency, which Lead Time measures. However, the main theme is value delivery, not measuring or optimizing Lead Time. There is no exploration of Lead Time as an observability metric, its definition, relationship with Cycle Time, or measurement practices, as required by the classification definition. \n\n- **Depth of Discussion (2.8):** The content explores the concept of working software in depth but does not delve into any aspects of Lead Time measurement, process optimization relative to Lead Time, or bottlenecks. The connection is at best implicit (delivery of increments to customers), but that's not elaborated from a Lead Time perspective.\n\n- **Intent/Purpose Fit (3.5):** The primary intent is to educate on the importance and meaning of working software, not on Lead Time as a metric or process parameter. Some tangential alignment exists insofar as delivering increments rapidly could be influenced by a desire to optimize Lead Time, but this is never discussed.\n\n- **Audience Alignment (6.3):** The content does target a similar audience—Agile practitioners, Scrum teams, Lean teams—who would also care about Lead Time. However, it does not address them in the context of observability metrics or process measurement; it's focused on deliverables and their value.\n\n- **Signal-to-Noise (6.7):** There is little off-topic or filler content; most of the text is relevant to its own stated topic. However, from the Lead Time category perspective, nearly all of it is noise because it doesn't touch on the metric except in the most peripheral way (via the concept of deliverables and increments).\n\n- **Level:** This content is 'Tertiary' for the Lead Time category. Its relevance is far removed and faint; it is at best tangential, providing background context (increments, deliverables) that could later feature in a Lead Time discussion but not making any connection itself.\n\n- **Penalties:** No penalties are applied; the content is not outdated, nor is its tone critical or contradictory to the Lead Time framing.\n\n- **Final Confidence Score:** The weighed calculation returns a low confidence score (20.613/100), accurately reflecting the very marginal and indirect connection between 'Working Software' and 'Lead Time'. The content is essentially unrelated to Lead Time under the strict classification definition.",
    "level": "Ignored"
  },
  "Troubleshooting": {
    "resourceId": "Working Software",
    "category": "Troubleshooting",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 17.83,
    "ai_mentions": 0.3,
    "ai_alignment": 2.0,
    "ai_depth": 2.15,
    "ai_intent": 2.0,
    "ai_audience": 6.1,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content almost entirely discusses 'working software' as an artifact and its value within Agile, Scrum, and Lean methodologies. \n\n- **Direct Mentions (0.30):** The word 'troubleshooting' is never mentioned, nor are related terms such as 'diagnosing,' 'problem-solving,' or 'resolution.' The closest relevancy is some mention of 'continuous feedback,' but this is in the context of iterative improvement, not issue resolution.\n\n- **Conceptual Alignment (2.00):** The content concerns Agile outcomes (working software)—a concept only tangentially related to troubleshooting, if at all. While 'Definition of Done' or 'quality' might sometimes overlap with the result of troubleshooting, there is no direct or indirect coverage of identifying or resolving technical issues.\n\n- **Depth of Discussion (2.15):** The material goes into substantial depth on what 'working software' is and its value but does not explore any aspect of troubleshooting, diagnostics, techniques, or systematic problem-solving beyond surface mention of 'continuous improvement.'\n\n- **Intent / Purpose Fit (2.00):** The central intent is to explain and promote the importance of 'working software' as a success metric and artifact in Agile—which is not the intent of the Troubleshooting category. There is no guidance, tips, or methodologies relating to diagnosing or resolving issues.\n\n- **Audience Alignment (6.10):** The audience could include technical practitioners familiar with Agile, which aligns modestly, but it is just as likely to attract product managers, Scrum Masters, and stakeholders who may not be involved in hands-on troubleshooting. No technical, tool-based, or diagnostic focus is apparent.\n\n- **Signal-to-Noise Ratio (4.90):** The content is focused on Agile delivery, not troubleshooting. There is little to no off-topic material, but for the Troubleshooting category, most of this content is 'noise' rather than 'signal.'\n\n- **Level – Tertiary:** The relationship between the provided content and the Troubleshooting category is, at best, tertiary—the discussion might contextually support teams who do troubleshooting by emphasizing quality increments, but the text has effectively no troubleshooting substance.\n\n- **Penalties:** No penalties were applied, as the article is not outdated nor does it undermine or contradict the Troubleshooting concept, though it doesn't support it either.\n\nIn summary, there is a very weak, almost incidental connection to Troubleshooting, primarily via indirect references to continuous improvement and feedback, but no explicit or substantial relevance to the identification or resolution of technical issues.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "resourceId": "Working Software",
    "category": "Enterprise Agility",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 33.17,
    "ai_mentions": 1.0,
    "ai_alignment": 3.3,
    "ai_depth": 2.7,
    "ai_intent": 2.9,
    "ai_audience": 4.1,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content is a focused description of 'working software' as an artifact in Agile methodologies, especially Scrum. \n\n(1) Direct Mentions: The term 'Enterprise Agility' is never directly mentioned, nor are related frameworks like SAFe, LeSS, or Nexus. The terminology and scope are centered on team- and product-level agile practices; thus, the score is very low but nonzero because of some vague references to 'organisations.'\n\n(2) Conceptual Alignment: The themes—iteration, adaptability, value delivery, feedback—are core Agile values, but the discussion remains almost entirely at the team and increment level. References to 'organisations' and 'business success' are brief, not developed, and do not extend agile principles to the whole enterprise or discuss organisational structures, cultural change, or the broader system. Hence, a low score with recognition of a few touchpoints.\n\n(3) Depth of Discussion: The text provides moderate depth about what working software means, especially within Scrum, but this is narrow: no scaling models, cross-team/enterprise impact, or change management are addressed. The mention of 'organisations enhance collaboration' is not explored beyond a sentence.\n\n(4) Intent/Purpose Fit: The purpose is to define and champion working software as an agile deliverable. This aligns with agile in general but not the enterprise-wide transformation or agility focus. Some overlap arises from references to adaptability and business impact but not at the organisational agility scale.\n\n(5) Audience Alignment: The language appears aimed at practitioners, agile coaches, or product owners understanding 'working software,' with some slight appeal to managers or executives due to references to business value, but the main body targets those interested in team-level delivery. No strong focus on the leadership or enterprise audience.\n\n(6) Signal-to-Noise Ratio: The content is focused and nearly all text is relevant to its topic, but the narrow perspective (team/product-level) means only a fraction is germane to 'Enterprise Agility.'\n\nNO penalties applied: The content is current, accurate, and respects the category's principles, though it sits outside the primary scope.\n\nLEVEL: Tertiary – This resource is three layers away from the heart of Enterprise Agility: it discusses a key team-level agile artifact, not enterprise transformation, structure, culture, or scaling frameworks.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "resourceId": "Working Software",
    "category": "Agnostic Agile",
    "calculated_at": "2025-05-06T11:55:56",
    "ai_confidence": 47.684,
    "ai_mentions": 0.6,
    "ai_alignment": 4.2,
    "ai_depth": 4.0,
    "ai_intent": 5.0,
    "ai_audience": 7.4,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content titled 'Working Software' broadly discusses the importance of working software in Agile, Scrum, and Lean, emphasizing value delivery, continuous improvement, and stakeholder alignment. However, it never directly references Agnostic Agile or its distinct principles, nor does it discuss adapting frameworks to context, ethical considerations, or the philosophy behind choosing best-fit practices over rigid adherence. \n\nMentions (0.6): No explicit or implicit mention of Agnostic Agile or associated terminology. Alignment (4.2): While delivering value and iterative progress are important tenets of Agnostic Agile, the discussion here is generic agile theory, not philosophy-driven contextual adaptation. It lacks explicit connection to agnostic thinking, critical evaluation, or context-driven choice of methodology. \n\nDepth (4.0): The discussion is moderately thorough about 'working software' as a concept but remains surface-level regarding Agnostic Agile. It does not explore the tensions between frameworks, ethical aspects, or case-based application. \n\nIntent (5.0): The intent is informative for an agile-practicing audience, but is not targeted towards exploring Agnostic Agile as a movement or philosophy, making it only tangentially related. \n\nAudience (7.4): The audience is practitioners or teams working with agile methods, partially overlapping with the Agnostic Agile audience, but not specific. \n\nSignal (7.9): The discussion is focused, relevant, and clear about 'working software', but almost all focus is on mainstream agile values, not on philosophical or agnostic approaches. \n\nNo penalties applied, as content is current, neutral in tone, and not satirical. Given the above, the overall confidence of fitting this content under \"Agnostic Agile\" is quite low: it's best classified as 'Tertiary'—the content is only distantly relevant via shared agile values, not through explicit discussion or application of Agnostic Agile.",
    "level": "Tertiary"
  },
  "Sensemaking": {
    "resourceId": "Working Software",
    "category": "Sensemaking",
    "calculated_at": "2025-05-06T11:55:56",
    "ai_confidence": 34.2,
    "ai_mentions": 0.6,
    "ai_alignment": 3.2,
    "ai_depth": 3.7,
    "ai_intent": 3.1,
    "ai_audience": 4.3,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content focuses on defining 'working software' as an Agile artifact, emphasizing value delivery, progress, and customer satisfaction. There are no direct mentions of 'sensemaking,' nor does the discussion utilize frameworks (e.g., Cynefin), models of complexity, or discuss interpretive decision-making in complex environments—which are central to the Sensemaking category. Conceptual alignment is weak: although the notion of adaptability and responding to feedback hints at dynamic environments, the discussion is grounded in delivery artifacts, not in how organizations interpret or adapt to complexity. The depth of discussion is moderate regarding working software, but shallow for sensemaking themes—it doesn't delve into complexity, uncertainty, sensemaking techniques, or collective organizational interpretation. The intent is to describe and promote working software as a valuable outcome in Agile, not to inform or support sensemaking. Audience targeting loosely overlaps with Agile practitioners, some of whom might be interested in sensemaking, but that's indirect. The signal-to-noise ratio is high (focused, relevant for its topic), but not for sensemaking. No content is outdated or contradictory, so no penalties are applied. Overall, sensemaking is only distantly and implicitly related, justifying a low, tertiary confidence score.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "resourceId": "Working Software",
    "category": "Artificial Intelligence",
    "calculated_at": "2025-05-06T11:55:56",
    "ai_confidence": 3.238,
    "ai_mentions": 0.2,
    "ai_alignment": 0.4,
    "ai_depth": 0.5,
    "ai_intent": 0.3,
    "ai_audience": 7.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content exclusively discusses 'working software' as a core concept in Agile and Scrum methodologies. There are zero explicit or implicit references to Artificial Intelligence, nor to any AI integration, automation, analytics, ethical considerations, or AI-driven enhancements as defined in the classification. \n\n- Mentions (0.2): There are no direct mentions or references to 'Artificial Intelligence' or its applications; the score minimally above zero is for the potential future applicability, but not present in this content.\n- Alignment (0.4): The core ideas center on Agile artifacts, not the application or impact of AI; thus, alignment is extremely low and only slightly above zero because AI could conceivably be involved in broader Agile contexts, though not here.\n- Depth (0.5): The discussion is thorough regarding 'working software' but entirely lacks any advancement into AI-related topics.\n- Intent/Purpose Fit (0.3): The purpose is to inform about 'working software' in Agile frameworks, not its relation to AI—the intended focus of the category is thus not met.\n- Audience (7.1): The audience (Agile/DevOps/software teams) overlaps with the intended audience of the AI-in-software-development category, justifying a high score despite no AI focus.\n- Signal (7.3): The content is fully focused on its stated topic without irrelevant filler, maintaining high relevance to Agile/software audiences.\n\nNo penalties were applied, as the content is neither outdated nor contrary in tone. The overall confidence score is proportionate, reflecting almost no direct or meaningful connection with the 'Artificial Intelligence' category; any extremely low confidence is a signal that classification under this category would be erroneous.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "Working Software",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 8.0,
    "ai_mentions": 0.0,
    "ai_alignment": 0.2,
    "ai_depth": 0.3,
    "ai_intent": 0.2,
    "ai_audience": 0.4,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses exclusively on the concept of 'Working Software' as an Agile, Scrum, and Lean artifact, emphasizing its value, the increment, and its role in feedback and value delivery. There is no direct mention or even implicit reference to Liberating Structures, specific facilitation methods (such as 1-2-4-All, Troika Consulting), or any engagement with meeting design, participation, or facilitation practices. The content does not address use cases, integration with Scrum ceremonies from a facilitation perspective, or the practitioners/audience targeted by the Liberating Structures framework. Scoring is therefore extremely low across all dimensions, with a negligible signal-to-noise ratio for the intended category. No penalties were required, as the information is current and neutrally framed, but the relevance to Liberating Structures is minimal, thus resulting in a tertiary classification.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "Working Software",
    "category": "Increment",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 93.2,
    "ai_mentions": 8.4,
    "ai_alignment": 9.7,
    "ai_depth": 9.3,
    "ai_intent": 9.5,
    "ai_audience": 9.0,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 93.0,
    "reasoning": "The content constantly refers to the tangible, usable output of a Sprint—namely, working software, which is explicitly defined as the Increment in Scrum. Direct mentions are strong: the term 'Increment' appears several times, and the entire piece effortlessly bridges 'working software' and Increment, both terminologically and conceptually. The depth is substantial: the content explores the role of Increment as an artifact, discusses its qualities (inspectable, adaptable), and connects it to Definition of Done, value, stakeholder alignment, feedback, and sustainability. Intent is clearly to inform practitioners or teams about the purpose, form, and importance of Increments, strongly fitting the category's purpose. The intended audience includes Scrum/Agile practitioners, teams, and stakeholders, which directly matches the category's scope. The signal-to-noise ratio is high: the content stays tightly focused on Increment and its delivery, with only pertinent examples and explanations—no tangents or filler. No outdated or contradictory practices, nor off-tone remarks, are present, so no penalties were applied. Calibration is upheld: scores are varied across dimensions, and the final weighted score accurately represents the content's direct, in-depth, and purpose-fit engagement with the 'Increment' category.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the 'Increment' category. It clearly explains what an Increment is in Scrum, its importance, and how it relates to working software and the Definition of Done. The discussion is focused, relevant, and aimed at Agile practitioners, making it highly suitable for those seeking to understand or apply the concept of Increment in their teams."
  },
  "Mentoring": {
    "resourceId": "Working Software",
    "category": "Mentoring",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 13.066,
    "ai_mentions": 0.7,
    "ai_alignment": 1.2,
    "ai_depth": 1.8,
    "ai_intent": 1.3,
    "ai_audience": 2.5,
    "ai_signal": 2.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content titled 'Working Software' thoroughly describes the concept and importance of working software in Agile, Scrum, and Lean frameworks. However, there is no explicit mention or detailed exploration of mentoring, coaching, or the professional development process for agile professionals and leadership. ‘Mentor’ or ‘mentoring’ terms are not used (mentions: 0.7). Conceptual alignment is low (1.2), as the central theme is the artifact and its role in Agile, not on mentoring strategies, feedback, or guidance. While the piece deeply discusses working software (depth: 1.8), it lacks depth on the mentoring process itself. The intent appears to be informative about agile best practices regarding deliverables, not about supporting or guiding professionals (intent: 1.3). The audience could include agile practitioners, but the focus is on what working software is, not on their professional growth or development (audience: 2.5). The content maintains some relevance to agile practitioners but doesn’t focus on mentoring, keeping the signal relatively low (2.9). No penalties were applied, as the tone, references, and approach are neutral and current. The low confidence score (13.066) correctly reflects that, while related to Agile, the content is tertiary at best to the core concept of mentoring and offers almost no direct value for the mentoring category as defined.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "resourceId": "Working Software",
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 41.004,
    "ai_mentions": 2.1,
    "ai_alignment": 4.9,
    "ai_depth": 4.2,
    "ai_intent": 3.7,
    "ai_audience": 7.2,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "Direct Mentions (2.1): The content briefly alludes to feedback (mentions 'feedback received,' 'responding to customer needs,' and 'continuous feedback and improvement'), but does not explicitly discuss customer feedback loops or name the concept directly. Alignment (4.9): There is some alignment, especially where it discusses continuous improvement, responding to customer needs, and referencing feedback, but the core of the content is about 'working software' itself as a concept/artifact, not the mechanism or process of feedback integration. Depth (4.2): The discussion of feedback mechanisms is cursory; the depth is focused on the output (working software) rather than the processes for gathering and utilising customer input. Intent (3.7): The primary intent is to define and explain working software rather than to explore customer feedback loops; references to feedback are secondary or illustrative. Audience (7.2): The audience (agile practitioners, teams, product stakeholders) would overlap with those interested in feedback loops, though the focus here is on a broader product development topic. Signal-to-Noise (7.7): The content is largely focused and relevant to agile product development, but only a small fraction pertains directly to customer feedback-related mechanisms or practices. No penalties are applied as there is no outdated practice, nor a tone contradicting the category framing. The content sits at a tertiary level of relevance: it tangentially touches on feedback while primarily addressing a different concept.",
    "level": "Tertiary"
  },
  "Strategic Goals": {
    "resourceId": "Working Software",
    "category": "Strategic Goals",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 36.95,
    "ai_mentions": 1.4,
    "ai_alignment": 3.2,
    "ai_depth": 2.8,
    "ai_intent": 2.9,
    "ai_audience": 4.3,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content titled 'Working Software' primarily discusses the concept of 'working software' as a core artifact and deliverable within Agile, focusing on its role as a measure of value delivery, progress, and customer satisfaction. \n\n1. Direct Mentions (1.4): The term 'strategic goals' is not mentioned and only very indirectly alluded to through phrases like 'business success' and 'continuous improvement.' The topic stays focused on 'working software,' not long-term objectives.\n\n2. Conceptual Alignment (3.2): While there is a peripheral alignment (e.g., references to delivering value, continuous improvement, and business success), the central theme does not address defining, aligning, or adapting long-term strategic objectives. The content is operational in nature.\n\n3. Depth of Discussion (2.8): The discussion is surface-level regarding strategic aims. It mainly discusses the practical and immediate value of working software rather than deeply exploring its relationship to strategic goals or organizational agility at a strategic level.\n\n4. Intent / Purpose Fit (2.9): The primary intent is to inform about the importance and characteristics of working software. While it touches on delivering value and long-term sustainability, these are not framed explicitly within the strategic goals context.\n\n5. Audience Alignment (4.3): The article appears to be aimed at Agile practitioners and team-level audiences who might work with or deliver working software, not at those responsible for strategic goal-setting in organizations. However, there is some residual relevance for leaders focused on value delivery.\n\n6. Signal-to-Noise Ratio (4.1): The content is focused, but almost all of it pertains directly to working software rather than strategic vision. There are a few tangential references to business outcomes, but strategic goal content is a minor subtext.\n\nLevel: Tertiary — Strategic goals are a distant, implied outcome (business success, continuous improvement), not the main theme. The content neither demonstrates deep analysis nor explicit application of strategic goals in an Agile context, but it does contain minor indirect relevance (e.g., sustaining business success, responding to change). This justifies a low, but nonzero, confidence score.",
    "level": "Ignored"
  },
  "Market Share": {
    "resourceId": "Working Software",
    "category": "Market Share",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 17.826,
    "ai_mentions": 0.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.1,
    "ai_intent": 2.5,
    "ai_audience": 4.0,
    "ai_signal": 2.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content primarily discusses 'working software' within Agile, Scrum, and Lean frameworks as a measure of team progress and value delivery, not as a strategy or approach for increasing or analyzing market share. \n\n- Mentions (0.6): There are no explicit or even indirect references to 'market share', competitive positioning, or related terminology. The language is solely focused on team outputs and product value in the context of Agile development.\n\n- Alignment (2.8): At best, the content very loosely aligns with the Market Share category through abstract mentions of 'business success', 'customer satisfaction', and 'innovation', which are outcomes that could, in other contexts, relate to market share. However, there is no discussion of competitive advantage, growth strategies, or market presence.\n\n- Depth (2.1): The discussion of 'working software' is thorough in the Agile context but entirely orthogonal to market share methodology, strategy, or analysis. No in-depth exploration of how working software practices impact market share is offered.\n\n- Intent (2.5): The primary purpose is to inform practitioners about the nature and value of working software, with no evident aim to advance market share-related knowledge or decision-making.\n\n- Audience (4.0): The piece targets Agile practitioners, Scrum teams, and possibly technical stakeholders, which only tangentially overlaps with the audience concerned with market share strategies (typically executives or strategists), hence a moderate score.\n\n- Signal-to-Noise (2.7): Almost all content revolves around the process and culture of software delivery. Only passing, indirect references to business outcomes could be seen as faintly relevant to market share, resulting in low signal for Market Share classification.\n\nNo penalties are applied because the content is current and maintains a neutral, informative tone, without referencing outdated or satirical viewpoints. \n\nOverall, the content is 'tertiary' to the Market Share category due to its lack of direct or in-depth relevance. The final confidence score accurately reflects this peripheral relevance.",
    "level": "Ignored"
  },
  "System Configuration": {
    "resourceId": "Working Software",
    "category": "System Configuration",
    "calculated_at": "2025-05-06T11:55:59",
    "ai_confidence": 12.85,
    "ai_mentions": 0.3,
    "ai_alignment": 1.0,
    "ai_depth": 1.1,
    "ai_intent": 1.0,
    "ai_audience": 7.2,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses on the definition and value of 'working software' as an artifact of Agile, Scrum, and Lean processes. There is no direct mention of 'System Configuration' or related practices such as configuration management tools, integration of systems, or automation. Conceptual alignment is very low: the main theme is delivering customer value via functional software, not the configuration of systems or setup/maintenance practices. Depth of discussion is superficial regarding system configuration, as the material doesn't explore any technical aspects relevant to the category but stays in the realm of Agile delivery and value-driven outcomes. The intent is to inform about the importance of working software in Agile, not how to configure systems or optimize their performance. Audience alignment is modest, scored above zero only because Agile practitioners may intersect with system configuration roles, but it's clear the target here is a broad Agile audience focused on delivery and value, not technical configuration. Signal-to-noise is low as the entire content is off-topic for system configuration, with minimal relevant information. No penalties applied as the content is current and neutral. This resource is at best tertiary to the category, as it is about software delivery, not configuration.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "resourceId": "Working Software",
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 19.523,
    "ai_mentions": 0.4,
    "ai_alignment": 2.4,
    "ai_depth": 2.3,
    "ai_intent": 2.8,
    "ai_audience": 4.0,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content focuses on the definition and importance of 'working software' within Agile, Scrum, and Lean contexts. It outlines how working software provides value, enables adaptation via feedback, and aligns teams and stakeholders. However, it never explicitly or implicitly describes Hypothesis Driven Development. There is no mention of formulating hypotheses, designing experiments, A/B testing, validating or invalidating ideas through data, or iterating based on validated learning—a foundational aspect of the classification definition. While 'feedback', 'adapting', and 'continuous improvement' are mentioned, these are generic Agile principles, not specifically tied to experimentation or empirical hypothesis testing. The main audience is Agile practitioners and teams (partly aligned), but the intent is education on Agile value delivery, not on hypothesis-driven experimentation. The content's alignment and depth regarding Hypothesis Driven Development are minimal; thus, scores are low on direct mentions, conceptual fit, and depth. No penalties are applied, as the content is not outdated or critical. Overall, the topic is at best tangential ('Tertiary') to Hypothesis Driven Development, resulting in a proportionally low confidence score.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "resourceId": "Working Software",
    "category": "Product Strategy",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 53.583,
    "ai_mentions": 1.7,
    "ai_alignment": 6.4,
    "ai_depth": 5.8,
    "ai_intent": 5.9,
    "ai_audience": 7.4,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content entitled 'Working Software' provides a detailed explanation of what constitutes working software in Agile and Scrum contexts. \n\nMentions (1.7): The content never references 'Product Strategy' directly nor invokes major strategic terminology (roadmap, market, vision, etc.), so the score is low, but not zero, as terms like 'value', 'business success', and 'customer expectations' offer indirect relevance.\n\nConceptual Alignment (6.4): The text lightly touches on some overlapping concepts—like value delivery, customer expectations, and sustainable outcomes—that are important to a product strategist. However, it does not frame these concepts within the context of strategy formulation, roadmapping, competitive analysis, or market positioning per the provided definition.\n\nDepth (5.8): The piece goes beyond a surface-level mention of working software, developing themes around iterative delivery, feedback, and business value. Nonetheless, it lacks depth on product strategy topics (vision, market, alignment with goals, etc.), so it's moderately thorough only with respect to its own topic.\n\nIntent/Purpose Fit (5.9): The main purpose is to explain the Agile artifact of working software—not to guide on product strategy or roadmap thinking. The content is supportive only in a tangential way, linking working software to value and business success without providing methodological or strategic guidance.\n\nAudience (7.4): The discussion addresses Agile practitioners and stakeholders, overlapping slightly with a product strategist audience but focusing more on execution than strategy. Hence, the alignment is partial.\n\nSignal-to-Noise (8.2): The content is concise and focused with minimal tangents or filler; all sentences contribute to explaining what working software is and why it matters in Agile.\n\nLevel: 'Tertiary' — The material is two steps removed from product strategy (focused on an artifact in Agile; only indirectly touching concepts that strategy encompasses). It would be only a peripheral resource in a collection on product strategy.\n\nNo penalties were applied as the content is current, neutral, and factual.",
    "level": "Tertiary"
  },
  "Continuous Delivery": {
    "resourceId": "Working Software",
    "category": "Continuous Delivery",
    "calculated_at": "2025-05-06T11:55:57",
    "ai_confidence": 34.91,
    "ai_mentions": 0.75,
    "ai_alignment": 3.0,
    "ai_depth": 3.25,
    "ai_intent": 3.9,
    "ai_audience": 4.75,
    "ai_signal": 5.35,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "Direct Mentions (0.75): The content never directly references 'Continuous Delivery' or its core terminology. Its focus is on 'working software' within Agile/Scrum without explicit linkage to delivery practices.\n\nConceptual Alignment (3.00): There are indirect links—such as discussions of incremental delivery, feedback loops, and value delivery—but the content never directly addresses Continuous Delivery principles (automation, release pipelines, etc.). These overlaps are general to Agile philosophies rather than unique to Continuous Delivery.\n\nDepth of Discussion (3.25): The content discusses 'working software' in a meaningful, multi-faceted way, considering quality, value, adaptation, and customer feedback, but stays at the level of describing Agile/Scrum processes and artifacts, rather than the deeper systemized practices of Continuous Delivery (automation, infrastructure, pipeline design, etc.).\n\nIntent/Purpose Fit (3.90): The main purpose is to clarify the meaning and value of 'working software' as an Agile measure. While tangentially related, its intent does not support education or adoption of Continuous Delivery. The focus remains on customer value and process adaptation, not on reliably releasing increments or automating software delivery.\n\nAudience Alignment (4.75): The content is likely aimed at Agile teams, Scrum practitioners, or those curious about iterative development, which includes some overlap with Continuous Delivery's technical audience but does not serve practitioners focused specifically on continuous deployment pipelines.\n\nSignal-to-Noise Ratio (5.35): The discussion is consistently about 'working software' with some relevance to the mindset behind Continuous Delivery (small, frequent increments, adaptation), but most details are tailored to Agile values and Scrum artifacts, not to delivery practices per se.\n\nNo penalties were applied since the content is neither outdated nor contradictory in its presentation. Overall, the content is related only at the philosophical fringes—hence its 'Tertiary' level classification, appropriate for those searching for the broader philosophy that underpins Continuous Delivery but not for concrete practices or principles.",
    "level": "Ignored"
  },
  "Competence": {
    "resourceId": "Working Software",
    "category": "Competence",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 65.6,
    "ai_mentions": 2.6,
    "ai_alignment": 7.2,
    "ai_depth": 6.3,
    "ai_intent": 6.8,
    "ai_audience": 7.4,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 66.0,
    "reasoning": "The content primarily focuses on defining and explaining 'working software' as a key artifact and value delivery measure in Agile and Scrum. While it references quality, value, and progress—concepts adjacent to competence—it does not explicitly or deeply discuss the development of individual or team skills, continuous learning, or deliberate capability building. \n\n- Direct Mentions (2.6): The term 'competence' is never directly mentioned. Key adjacent terms such as 'quality', 'functional', and 'value delivery' appear, but references to the skill, professionalism, or capability side are implied rather than explicit. \n- Conceptual Alignment (7.2): There is moderate alignment via repeated mention of quality and the importance of the definition of done, but the main thrust is on outcome (the product) rather than the underlying competence needed to achieve it. \n- Depth of Discussion (6.3): There is some exploration of related topics (definition of done ensures quality, continuous improvement, adaptability), but the focus is on working software as a measure rather than deep discussion of how competence is built, maintained, or improves outcomes over time. \n- Intent / Purpose Fit (6.8): The content intends to inform about the nature and value of working software, not explicitly about competence. However, it is supportive and relevant to professionalism themes. \n- Audience Alignment (7.4): The content targets Agile practitioners and team members—overlapping with the audience interested in competence—but is not tailored specifically for competence development. \n- Signal-to-Noise Ratio (7.1): Most of the content is relevant to Agile/Scrum value delivery measures, with minimal digression, but focus on competence is secondary. \n\nNo penalties for outdatedness or negative tone are applied, as the content is up-to-date and professional. The score is secondary because competence is more a background enabler here, not the principal focus.",
    "level": "Secondary"
  },
  "Scrum": {
    "resourceId": "Working Software",
    "category": "Scrum",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 80.116,
    "ai_mentions": 7.8,
    "ai_alignment": 8.8,
    "ai_depth": 7.9,
    "ai_intent": 8.5,
    "ai_audience": 7.2,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 80.0,
    "reasoning": "The content gives a thorough description of 'working software' as an artifact in Scrum and other Agile frameworks. It explicitly references Scrum multiple times (e.g., 'In Scrum, working software is the primary measure of success for each Sprint, and it forms the Increment artifact'), and correctly explains key Scrum concepts like Increment, Sprint, Definition of Done, transparency, and adaptation. \n\n- For **Direct Mentions** (7.8), Scrum is named specifically in the context of artifacts and the Sprint, though it is not the sole focus (other frameworks like Agile and Lean are also discussed).\n- **Conceptual Alignment** (8.8) is high: the content aligns well with Scrum principles (iterative delivery, empirical process, value delivery, team/stakeholder alignment) and uses appropriate Scrum terminology.\n- For **Depth** (7.9), the discussion goes beyond a simple mention but does not explore all Scrum elements (roles, every event, or full process), nor does it focus exclusively on Increment as it relates to Scrum. The artifact, value delivery, and inspection/adaptation are covered in detail.\n- **Intent/Purpose Fit** (8.5) is strong: the content aims to inform practitioners about the significance of working software within Scrum (as well as more generally Agile). It's mainly informative and supportive, with no tangential focus.\n- **Audience Alignment** (7.2): Written for Agile/Scrum practitioners and possibly stakeholders, but the relevance would be slightly better for a general Agile audience than pure Scrum specialists.\n- **Signal-to-Noise Ratio** (7.7): Most of the text is directly relevant to the artifact and its place in Scrum, but 10–20% of the content broadens to cover Agile and Lean practices, hence a slight reduction for focus.\n\nNo penalty deductions are warranted: the content is up to date, not contradictory, and maintains a neutral, informative tone. The confidence score falls in the 'Secondary' range because, while Scrum is a clear and accurate focus, it is not the exclusive one—the content frames working software as a principle that exists across multiple Agile frameworks, with Scrum treated as an exemplar.",
    "level": "Secondary",
    "reasoning_summary": "This content is a strong fit for the category, as it clearly explains how 'working software' functions as an artifact in Scrum, referencing key concepts like Increment, Sprint, and Definition of Done. While it also discusses Agile and Lean, Scrum is a central focus, making it highly relevant for practitioners. The explanation is thorough and accurate, though not exclusive to Scrum, which places it in the 'Secondary' confidence range."
  },
  "Agile Product Operating Model": {
    "resourceId": "Working Software",
    "category": "Agile Product Operating Model",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 59.89,
    "ai_mentions": 1.9,
    "ai_alignment": 6.1,
    "ai_depth": 6.6,
    "ai_intent": 6.3,
    "ai_audience": 6.8,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 60.0,
    "reasoning": "The content focuses extensively on the concept of 'working software' as a core artifact in Agile, Scrum, and Lean, emphasizing value delivery, inspectability, team alignment, continuous improvement, and customer satisfaction. These are all elements consistent with Agile and product-oriented mindsets, which are important components of an Agile Product Operating Model (APOM). \n\nHowever, the piece does not directly mention 'Agile Product Operating Model' or use many of the exact terms or frameworks that define APOM (e.g., transition from project to product, organisational structure for product operating models, EBM, or explicit integration of Scrum and product management). \n\nWhile the main theme—emphasizing delivery of working increments, iterative improvement, and customer value—is necessary for APOM, the discussion is more centered on the artifact of working software itself, rather than the holistic shift in operating model, governance, roadmaps, and organisational principles that the APOM encompasses. The content also does not address other APOM-specific topics such as business/tech roadmaps, governance, or data-driven incentives, though it hints at continuous improvement, collaboration, and stakeholder alignment.\n\nOn dimension breakdown:\n- Direct mentions are low (1.9) because APOM is never named nor are its unique frameworks cited.\n- Conceptual alignment is moderate (6.1): Many themes overlap, but not all are explicitly mapped to APOM's structure or distinctions.\n- Depth (6.6) is above average: The concept of 'working software' is explored in detail, but APOM-specific operational elements are omitted.\n- Intent/purpose (6.3) matches the APOM drive for continuous delivery and value, but is not fully dedicated to APOM's transformation intent.\n- Audience (6.8) slightly favors practitioners and teams; an APOM audience would be product leaders/strategists, though there is overlap.\n- Signal/noise (7.2): The discussion is focused and relevant to Agile and indirectly APOM, with little filler or off-topic material.\n\nNo penalties apply, as the content is recent, constructive, and not critical or outdated. The overall confidence score reflects that while the content is adjacent and partially aligned with APOM, it lacks sufficient directness and depth to be evaluated as a primary example.",
    "level": "Tertiary"
  },
  "Product Delivery": {
    "resourceId": "Working Software",
    "category": "Product Delivery",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 87.63,
    "ai_mentions": 6.35,
    "ai_alignment": 9.16,
    "ai_depth": 8.92,
    "ai_intent": 9.01,
    "ai_audience": 8.59,
    "ai_signal": 9.16,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 88.0,
    "reasoning": "The content explicitly discusses 'working software' as the concrete output of Agile, Scrum, and Lean frameworks, consistently tying it to value delivery, increments, and quality (e.g., Definition of Done) — core themes in Product Delivery. \n\nMentions (6.35): The term 'working software' appears repeatedly, and references to key concepts like 'increment,' 'value delivery,' 'release,' and 'deliverable' make explicit, but not overwhelming, mention of Product Delivery themes. Direct mentions of the category name ('Product Delivery') are absent, but synonyms and tightly related terminology are prevalent.\n\nAlignment (9.16): The conceptual alignment is very strong with around 90% of the text mapping directly to Product Delivery's scope: end-to-end delivery, quality, customer orientation, feedback loops, and value focus. The content avoids extraneous themes and theoretical digressions.\n\nDepth (8.92): The content goes well beyond surface-level definitions, discussing not only what 'working software' is, but how it functions as a measure of progress, its role in feedback and adaptation, stakeholder alignment, continuous improvement, and customer satisfaction. However, there is limited treatment of very specific practices (e.g., CI/CD or release management), so a slight fractional deduction applies.\n\nIntent (9.01): The entire purpose is informative and directly addresses how software increments (working software) are produced, measured, and leveraged for value delivery, clearly meeting the intent of the Product Delivery category.\n\nAudience (8.59): While broadly accessible, the tone and focus are best suited for practitioners, product owners, and Agile team members, closely matching the intended audience but not tailored for executives or strategists.\n\nSignal-to-Noise Ratio (9.16): The content is focused, efficient, and contains almost no filler or off-topic material. Every paragraph relates back to value delivery, quality, iteration, release, or adaptation, all core to Product Delivery.\n\nNo penalties are warranted: the content is current, practical, and constructive, with no obsolete references or contradictory tone. \n\nLevel: Primary. The entire article is purpose-built to explain 'working software' as central to Product Delivery, with explanations that directly reinforce the scope of the category.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the Product Delivery category. It consistently links 'working software' to value delivery, quality, and iterative release—core Product Delivery themes. The discussion is practical and in-depth, aimed at practitioners, and avoids unrelated topics. While it doesn’t mention the category name directly, its focus and terminology make the alignment clear and highly relevant for the intended audience."
  },
  "Current Value": {
    "resourceId": "Working Software",
    "category": "Current Value",
    "calculated_at": "2025-05-06T11:55:59",
    "ai_confidence": 73.81,
    "ai_mentions": 3.7,
    "ai_alignment": 8.2,
    "ai_depth": 7.7,
    "ai_intent": 7.5,
    "ai_audience": 8.6,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 74.0,
    "reasoning": "The content provides a robust overview of 'working software' in Agile/Scrum/Lean contexts, emphasizing its tangible and customer-focused nature. \n\n1. **Direct Mentions (3.7/10):** The phrase 'Current Value' or direct references to Evidence-Based Management are not present in the text. However, several synonymous phrases—'value delivery', 'delivering value consistently', 'customer satisfaction', 'business success'—are repeatedly mentioned, suggesting implicit, but not explicit, linkage to the 'Current Value' category.\n\n2. **Conceptual Alignment (8.2/10):** The core of 'Current Value'—assessing what value customers are receiving at present—is strongly embedded. The content discusses working software as 'a real, tangible measure of progress', directly addressing concepts of immediate, delivered value and feedback, which align deeply with Current Value. However, it stops short of directly referencing Evidence-Based Management, metrics, or rigorous measurement frameworks, slightly reducing its alignment.\n\n3. **Depth of Discussion (7.7/10):** The article explores multiple facets: what working software is, how it demonstrates value, the feedback/adaptation loop, collaboration, and the role of working software in sustaining value delivery. Still, it lacks direct practical tools or specific metrics (e.g., NPS, revenue impact, churn), which are key elements in a thorough 'Current Value' analysis.\n\n4. **Intent / Purpose Fit (7.5/10):** The primary intent is informative and meant to clarify working software's importance as a value-delivering artifact—this aligns somewhat with Current Value, but its top-level intent is still focused on defining and promoting 'working software', not directly on measuring or analyzing Current Value per se.\n\n5. **Audience Alignment (8.6/10):** The content addresses Agile practitioners, Scrum teams, and stakeholders, which are also the primary audience for Current Value discussions. Slightly elevated due to broad applicability (team, management, stakeholder), though not targeted at the EBM expert or strategic metric-focused audience directly.\n\n6. **Signal-to-Noise Ratio (8.1/10):** The content is focused, free from filler, and consistently relevant to value delivery in the Agile context. There is minimal off-topic material, though the absence of direct measurement techniques or EBM references slightly dilutes the signal.\n\n**Level: Secondary** — The discussion supports and overlaps with aspects of 'Current Value' but is not primarily a Current Value analysis, case study, or guideline. It provides critical context (the deliverable in question: working software), serving as a foundation for Current Value measurement rather than exemplifying or directly measuring it.\n\n**No Penalties Applied:** The content is current, constructive, and aligns in tone and audience. The concepts are modern and do not reflect outdated practices.",
    "level": "Secondary",
    "reasoning_summary": "This content aligns with the 'Current Value' category by emphasising the delivery of tangible value to customers through working software, a key Agile principle. While it doesn’t explicitly reference Evidence-Based Management or specific value metrics, it strongly supports the foundational concepts of immediate value delivery. The focus is more on defining and promoting working software than on directly measuring current value."
  },
  "Trend Analysis": {
    "resourceId": "Working Software",
    "category": "Trend Analysis",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 33.07,
    "ai_mentions": 1.0,
    "ai_alignment": 3.2,
    "ai_depth": 2.8,
    "ai_intent": 3.6,
    "ai_audience": 7.2,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content thoroughly describes the concept and role of 'working software' in Agile, Scrum, and Lean, especially as an artifact and a measure of progress. However, it neither explicitly nor implicitly addresses the identification of emerging patterns, analysis of shifts, or strategic implications that are central to the Trend Analysis category. \n\n1. Direct Mentions (1.0): The content does not mention 'trend analysis,' trends, or related terminology at all. Therefore, the score is minimal but not zero, reflecting maybe a very tangential potential association with evolving practices, but no direct referencing.\n\n2. Conceptual Alignment (3.2): The content passingly aligns with Trend Analysis by referencing ongoing adaptation, measurement, and continuous improvement, but these are intrinsic to Agile practices themselves—not discussions of trends or their analysis. There is no discussion of shifts, patterns, or implications at an organizational or industry-wide level.\n\n3. Depth of Discussion (2.8): The content goes into depth about the artifact and its role within a team or sprint context, but does not provide any examination of trends, patterns, or macro-level analysis. It neither compares current vs. past practices nor provides any analytical framework.\n\n4. Intent / Purpose Fit (3.6): The intent is to explain the role and importance of 'working software,' not to inform about or analyze trends in Agile, DevOps, or business agility. The mention of continuous improvement is inherent to Agile, not a discussion of trend changes.\n\n5. Audience Alignment (7.2): The intended audience (Agile practitioners, Scrum teams, potentially Agile coaches) does overlap with the Trend Analysis category's likely audience, but the purposes differ. Nonetheless, the reader cohorts mostly match.\n\n6. Signal-to-Noise (7.7): The content is focused, concise, and relevant to 'working software' as a topic. There is minimal filler or off-topic material, but none relates to trends. \n\nNo penalties are applied, as the information is not outdated nor does it contradict the category. The content is well-written and factually sound, just not relevant to true trend analysis per the definition. \n\nTherefore, this resource is best characterized as 'Tertiary' for this category—only tangentially relevant, as it lacks analysis of trends, patterns, or shifts in Agile, DevOps, or business agility.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "resourceId": "Working Software",
    "category": "Organisational Change",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 36.563,
    "ai_mentions": 1.2,
    "ai_alignment": 3.95,
    "ai_depth": 4.25,
    "ai_intent": 3.7,
    "ai_audience": 4.4,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content focuses almost entirely on the definition, importance, and characteristics of 'working software' within Agile and Scrum methodologies. \n\n1. Mentions (1.200): The term 'organisational change' is not directly mentioned; all references are to working software, Agile, Scrum, and Lean. The closest connections are implicit (e.g., references to transparency, collaboration, adaptation) but never directly linked to organisational change.\n\n2. Alignment (3.950): There is moderate alignment in that agile practices can be part of organisational change, and improved delivery of working software may contribute to such change indirectly. However, the content stops short of discussing change frameworks, leadership's role in transformation, or resistance to change. The alignment is thus weakly present through the context of Agile but not explicit or primary.\n\n3. Depth (4.250): The content discusses working software in some depth (definition, characteristics, outcomes) but contains little to no substantial exploration of organisational change processes, leadership, or measurement. Depth is thus limited to the surface relationship via Agile context.\n\n4. Intent (3.700): The main aim is to explain and promote the value of working software as an Agile artifact, not to discuss or educate about organisational change as a central purpose. Any linkage to change is by implication, not design.\n\n5. Audience (4.400): The intended audience seems to be Agile practitioners (possibly including product managers or Scrum Masters), not organisational leaders or change agents specifically. Some overlap exists for those involved in Agile transformations, but it is not targeted.\n\n6. Signal (4.900): The content is focused and relevant for Agile practices and software delivery, with minimal tangential material. However, relevance specifically to organisational change is weak.\n\nNo penalties were applied, as the content is current, uses an informative professional tone, and includes no outdated practices or criticisms. Overall, the classification is tertiary because, although there is some distant conceptual overlap (e.g., adaptability, value delivery, collaboration), the primary focus is not on organisational change strategy, frameworks, or leadership. The confidence score reflects a low, but not zero, congruence with the target category.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "resourceId": "Working Software",
    "category": "Organisational Psychology",
    "calculated_at": "2025-05-06T11:55:58",
    "ai_confidence": 12.84,
    "ai_mentions": 0.6,
    "ai_alignment": 1.8,
    "ai_depth": 1.2,
    "ai_intent": 1.4,
    "ai_audience": 3.0,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is focused almost entirely on the concept of 'working software' as a deliverable in Agile and Scrum environments. There are no direct mentions of Organisational Psychology, nor are psychological theories, principles, or models referenced. The closest alignments are weak, such as brief mention of team alignment, collaboration, and customer satisfaction. However, these references are not discussed from a psychological perspective but rather as process or outcome descriptors. The depth of discussion on psychological aspects is minimal; the content does not explore motivation, team dynamics, leadership, or other core themes outlined in the Organisational Psychology category definition. The intent is to inform practitioners or managers of Agile teams about the value and role of working software, not to examine the psychological factors underpinning team behavior or organisational effectiveness. The primary audience seems to be Agile practitioners or those involved in product development, not psychologists or those interested in organisational behaviour beyond productivity outputs. Most of the content is technical or methodological in nature, with only minor overlap into tangentially related psychological concepts (like collaboration or satisfaction), and these are not explored in depth. No penalties were applied, as the content is neither outdated nor critical/satirical. The final confidence score is low and correctly reflects that this material only fits the Organisational Psychology category as a very distant tertiary relation.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "resourceId": "Working Software",
    "category": "Cross Functional Teams",
    "calculated_at": "2025-05-06T11:55:59",
    "ai_confidence": 33.72,
    "ai_mentions": 0.8,
    "ai_alignment": 2.4,
    "ai_depth": 1.6,
    "ai_intent": 2.0,
    "ai_audience": 4.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content thoroughly explores the concept of 'working software' as a core Agile/Scrum artifact, focusing on its definition, the value it delivers, and its centrality to Agile measurement. However, it does not explicitly discuss cross-functional teams. 'Teams' and 'collaboration' are mentioned in a generic sense: references to team alignment, adaptive planning, and collaboration are about the general Agile context, not the specific structure, characteristics, or management of cross-functional teams. \n\n1. Mentions (0.8): Only generic mentions of 'teams' and 'collaboration', never the term 'cross-functional teams'; explicit references are absent.\n2. Alignment (2.4): The content’s focus on team output in Agile environments conceptually brushes against the intended category, but the main ideas remain on the deliverable (working software), not team structure.\n3. Depth (1.6): The discussion of teams is shallow, limited to surface-level observations about team alignment and collaboration as byproducts of focusing on working software. There is no deep dive into cross-functional characteristics, formation, or challenges.\n4. Intent (2.0): The content’s purpose is to inform and clarify what working software is and why it’s important—not to educate on cross-functional teams. It is parallel to, but not inside, the category's core intent.\n5. Audience (4.2): The target audience (those involved with Agile, Scrum, and Lean) overlaps with that for cross-functional teams, but not exclusively—this content is for a broader set of Agile practitioners, not those specifically focused on cross-functional team design or management.\n6. Signal (2.1): Most of the content is on-topic regarding Agile delivery, but only a very small amount is at all relevant to cross-functional teams (mostly by contextual implication, not substance). No significant off-topic or tangential content, but little signal for the intended category.\n\nNo penalties are applied as the content is not outdated, nor does it contradict the category’s framing. Overall, this content is at best a tertiary fit for 'Cross Functional Teams': it sets the context in which cross-functional teams might operate (delivering working software), but does not provide substantive discussion about them. The confidence score is appropriately low, reflecting an almost incidental alignment.",
    "level": "Ignored"
  }
}
