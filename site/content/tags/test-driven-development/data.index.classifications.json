{
  "Tool": {
    "category": "Tool",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 0,
    "final_score": 42.0,
    "reasoning": "The content discusses Test Driven Development (TDD) as a software development approach, which is more focused on a methodology rather than a specific tool. While it mentions the benefits of TDD in terms of quality and collaboration, it does not explicitly discuss any tools or software applications that facilitate this practice. The alignment with Agile principles is noted, but the depth of discussion lacks specific examples of tools or their integration within Agile frameworks.",
    "level": "Tertiary"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 62.0,
    "ai_mentions": 3,
    "ai_alignment": 50.0,
    "ai_depth": 75.0,
    "non_ai_confidence": 30,
    "final_score": 62.0,
    "reasoning": "The content discusses accountability in the context of Test Driven Development (TDD), highlighting how it fosters a culture of quality and accountability within teams. However, while it mentions accountability, it does not delve deeply into structural accountabilities or specific roles like Product Owner or Scrum Master. The alignment with core themes is moderate, as it touches on the importance of accountability in delivering value but lacks detailed exploration of how clearly defined accountabilities influence performance in work systems.",
    "level": "Secondary"
  },
  "Framework": {
    "category": "Framework",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses Test Driven Development (TDD) as a software development approach, which is related to Agile principles but does not focus on frameworks themselves. While it mentions Agile principles and the benefits of TDD, it lacks a direct discussion on specific frameworks or their implementation strategies. The depth of discussion on TDD is substantial, but it does not meet the criteria for the Framework category as it does not provide insights into structured methodologies or comparisons of frameworks.",
    "level": "Ignored"
  },
  "Values": {
    "category": "Value",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 42.0,
    "ai_mentions": 8,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 50,
    "final_score": 42.0,
    "reasoning": "The content discusses the importance of Test Driven Development (TDD) in fostering a culture of quality and accountability, which aligns with the core themes of values in organisational behaviour. However, while it touches on Agile principles and continuous improvement, it primarily focuses on the practice of TDD rather than deeply exploring the underlying values that guide these practices. The discussion is relevant but not the primary focus, leading to a moderate confidence score.",
    "level": "Tertiary"
  },
  "Tenet": {
    "category": "Tenet",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 62.0,
    "ai_mentions": 12,
    "ai_alignment": 25,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 62.0,
    "reasoning": "The content discusses Test Driven Development (TDD) and its alignment with Agile principles, which relates to the tenets of continuous improvement and adaptability. However, it does not explicitly mention specific tenets or actionable guiding rules, focusing instead on the practice of TDD itself. While it touches on themes of collaboration and quality, it lacks a detailed exploration of tenets as prescriptive rules, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Method": {
    "category": "Method",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 68.0,
    "ai_mentions": 15,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 68.0,
    "reasoning": "The content discusses Test Driven Development (TDD) as a structured approach to software development, focusing on the procedural aspects of writing tests before code. It aligns with the core themes of the 'Method' category by detailing how TDD fosters quality, accountability, and continuous improvement, which are essential in Agile practices. However, while it provides a good level of detail on TDD, it does not delve deeply into specific methodologies like Scrum or Kanban, which slightly lowers the confidence score.",
    "level": "Secondary"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 5,
    "ai_alignment": 15,
    "ai_depth": 12,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses Test Driven Development (TDD) as a software development practice, which is more focused on operational tactics rather than strategic alignment. While it mentions aspects like quality, accountability, and Agile principles, these are not directly tied to high-level strategic discussions or organisational goals. The content lacks explicit references to strategic planning or decision-making frameworks, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Practice": {
    "category": "Practice",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 92.0,
    "ai_mentions": 18,
    "ai_alignment": 36,
    "ai_depth": 38,
    "non_ai_confidence": 50,
    "final_score": 92.0,
    "reasoning": "The content explicitly discusses Test Driven Development (TDD), which is a key practice in software development. It provides a thorough explanation of TDD, detailing its benefits, alignment with Agile principles, and its role in fostering a culture of quality and continuous improvement. The depth of discussion is significant, covering both immediate and long-term advantages of TDD, thus strongly aligning with the category of Practice.",
    "level": "Primary"
  },
  "Philosophy": {
    "category": "Philosophy",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses Test Driven Development (TDD) primarily as a software development practice, focusing on its implementation and benefits rather than exploring the philosophical underpinnings or broader cultural implications. While it briefly touches on Agile principles and mentions a culture of quality and accountability, these aspects are secondary to the technical discussion of TDD itself. The content lacks a deep exploration of the foundational beliefs that shape methodologies like Agile, which is essential for a stronger alignment with the Philosophy category.",
    "level": "Ignored"
  },
  "Observability": {
    "category": "Observability",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on Test Driven Development (TDD) and its benefits for software quality and Agile practices. While it touches on themes of quality and accountability, it does not explicitly discuss observability, metrics, logs, or traces, nor does it delve into tools or best practices related to observability. The connection to observability is minimal and indirect, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Capability": {
    "category": "Capability",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 78.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 30,
    "non_ai_confidence": 0,
    "final_score": 78.0,
    "reasoning": "The content discusses Test Driven Development (TDD) in a way that highlights its role in fostering a culture of quality, accountability, and continuous improvement, which aligns well with the concept of capabilities. It explicitly mentions how TDD contributes to predictable and sustainable value delivery, which is a core theme of the Capability category. The depth of discussion is significant, covering the long-term benefits and systemic impact of TDD on team dynamics and organisational culture. However, it primarily focuses on TDD as a practice rather than a broader capability framework, which slightly limits its alignment.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the Capability category as it explores how Test Driven Development (TDD) shapes team culture, accountability, and ongoing improvementâ€”key aspects of organisational capability. While it mainly centres on TDD as a practice, the discussion extends to its broader impact on value delivery and team dynamics, making it a strong, though not exhaustive, match for the category."
  },
  "Model": {
    "category": "Model",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses Test Driven Development (TDD) as a software development approach, which is related to Agile principles but does not explicitly focus on conceptual models or frameworks. While it mentions aspects of quality and adaptability, it lacks direct references to specific models like the Cynefin Framework or Lean Startup principles. The discussion is more about practices than models, leading to a lower confidence score.",
    "level": "Ignored"
  },
  "Principle": {
    "category": "Principle",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 30,
    "final_score": 72.0,
    "reasoning": "The content discusses Test Driven Development (TDD) and its benefits, which align with principles of continuous improvement and value delivery. However, it does not explicitly mention the principles themselves or provide a detailed exploration of how TDD embodies these principles. The focus is more on the practice of TDD rather than a discussion of principles guiding decision-making.",
    "level": "Secondary"
  },
  "Artifact": {
    "category": "Artifact",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 25.0,
    "ai_mentions": 10.0,
    "ai_alignment": 20.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 25.0,
    "reasoning": "The content discusses Test Driven Development (TDD) and its benefits, which are related to Agile principles, but it does not explicitly mention artifacts or their specific roles in Agile, Scrum, or Lean. The focus is more on the practice of TDD rather than on artifacts as formal representations of work. While there is some alignment with Agile principles, the depth of discussion on artifacts is minimal, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Discipline": {
    "category": "Discipline",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 72.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 22.0,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses Test Driven Development (TDD) in detail, highlighting its importance in fostering a culture of quality and accountability, which aligns with the principles of discipline in software development. However, while it touches on aspects of discipline, such as continuous improvement and accountability, it does not explicitly focus on discipline as a standalone concept, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Scrum Values": {
    "resourceId": "Test Driven Development",
    "category": "Scrum Values",
    "calculated_at": "2025-05-06T11:53:18",
    "ai_confidence": 19.35,
    "ai_mentions": 0.6,
    "ai_alignment": 1.7,
    "ai_depth": 1.6,
    "ai_intent": 3.0,
    "ai_audience": 7.9,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content almost exclusively discusses Test Driven Development (TDD), which is a software engineering practice rather than a Scrum Value. \n\n1. Direct Mentions (0.6): There are no explicit references to 'Scrum Values' or to any of the five named values (Commitment, Courage, Focus, Openness, Respect). The only loose connection is generic language around collaboration and quality.\n2. Conceptual Alignment (1.7): While TDD can indirectly foster behaviors valued by Scrum (such as commitment to quality, or facilitating trust), none of the Scrum Values are distinctly referenced or substantially discussed in concept or application. The alignment is thus weak and indirect.\n3. Depth of Discussion (1.6): The discussion is deep in terms of TDD but not about Scrum Values. The only tangential overlap is in the broader Agile principles of collaboration and quality, which are not exclusive to Scrum Values. No exploration of the nature, definition, or manifestations of Scrum Values is present.\n4. Intent / Purpose Fit (3.0): The main purpose is to inform about TDD, not Scrum Values. Some intent toward driving cultural change and quality could marginally touch on Commitment or Respect, but this is not the central focus.\n5. Audience Alignment (7.9): The content targets practitioners and teams in a way that would also be appropriate for a Scrum audience. High score here acknowledges that the readership might overlap heavily with those interested in Scrum Values.\n6. Signal-to-Noise Ratio (8.3): The content is very focused on TDD and offers few digressions or irrelevancies. However, none of that focus is on Scrum Values, so the high score here means the content is high-quality with respect to its own topic, but that topic is not Scrum Values. \n\nNo penalties were applied as the information is current and maintains a neutral, respectful tone. The confidence score is low (19.35), accurately reflecting the near-total lack of direct or deep connection to Scrum Values; any overlap is indirect or tangential at best. The 'Tertiary' level signals the possible but minor incidental relevance for readers interested in broader Agile practices.",
    "level": "Ignored"
  },
  "Application Lifecycle Management": {
    "resourceId": "Test Driven Development",
    "category": "Application Lifecycle Management",
    "calculated_at": "2025-05-06T11:53:24",
    "ai_confidence": 44.611,
    "ai_mentions": 0.5,
    "ai_alignment": 5.6,
    "ai_depth": 6.3,
    "ai_intent": 4.7,
    "ai_audience": 5.4,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 45.0,
    "reasoning": "The content focuses almost entirely on explaining Test Driven Development (TDD) as a practice for improving software quality, rather than discussing the broader processes, stages, tools, or governance aspects essential to Application Lifecycle Management (ALM). \n\n- Mentions: The term 'Application Lifecycle Management' (ALM) is never mentioned directly, and there are no explicit references to the lifecycle phases; TDD is situated mainly within the development stage of application creation. \n- Conceptual Alignment: TDD can be considered an important practice within a development methodology, which may indirectly support goals of ALM, such as quality and maintainability. However, the content does not address lifecycle management directly; it only touches tangentially (e.g., 'maintainable and scalable over time') on lifecycle concepts, making the alignment partial at best. \n- Depth: The discussion is deep in the context of TDDâ€”describing motivations, practices, and benefitsâ€”but does not explore ALM-specific topics, stages, or integration of TDD within ALM environments. \n- Intent/Purpose Fit: The primary intent is to inform and promote TDD as a method for quality software development, not to educate about ALM or its governance, tools, or full-lifecycle approaches. The fit is tangential.\n- Audience Alignment: The probable audience is technical practitioners learning about TDD, which often overlaps with ALM audiences; however, the executive or strategy-oriented readership targeted by ALM discussions is mostly absent here.\n- Signal-to-Noise: The content is focusedâ€”no tangents or fillerâ€”but the focus is not on ALM, so while it is on-topic in terms of software quality, it is off-topic for ALM specifically.\n\nNo penalty adjustments were required, as the content is accurate, up-to-date, and not critical or satirical. Overall, TDD is a practice that may support ALM philosophies, but this content does not relate directly or deeply enough to ALM; therefore, confidence is in the low tertiary range.",
    "level": "Tertiary"
  },
  "Metrics and Learning": {
    "resourceId": "Test Driven Development",
    "category": "Metrics and Learning",
    "calculated_at": "2025-05-06T11:53:31",
    "ai_confidence": 38.45,
    "ai_mentions": 1.2,
    "ai_alignment": 4.6,
    "ai_depth": 4.2,
    "ai_intent": 5.1,
    "ai_audience": 7.0,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content is an overview of Test Driven Development (TDD), focusing primarily on its process, benefits (quality, accountability, maintainability), and how it aligns with Agile principles. While TDD is related to continuous improvement and has a tangential connection to learning cycles, the article does not directly discuss metrics, evidence-based management, or feedback loops via data, which are central to the 'Metrics and Learning' category. \n\n- Mentions (1.2): There are no direct uses of the terms 'metrics', 'feedback loops', or 'data-driven', nor explicit references to measurement or evaluation; TDD and related Agile alignment are implicit but not core. \n- Conceptual Alignment (4.6): There is a moderate connection through the mention of continuous improvement and fostering a culture of quality, but the main topic is TDD as a process, not metrics or learning specifically. \n- Depth (4.2): The depth is reasonable in describing TDD and its principles, but lacks any substantial discussion on collecting or applying data/metrics, or how feedback is used. \n- Intent (5.1): The intent is to advocate for TDD's quality benefits and alignment with Agile, which aligns loosely with learning but not significantly with data-driven improvement. \n- Audience (7.0): The content is aimed at practitioners (developers, Agile teams) similar to the target audience for 'Metrics and Learning', granting a reasonably high score here. \n- Signal-to-Noise (7.5): The content is focused, relevant, and concise, though not directly on-topic for 'Metrics and Learning'.\n\nNo penalties are applied because the content is not outdated, nor does it contradict the category's framing. As a result, this is categorized as 'Tertiary'â€”the fit is peripheral, and the confidence score appropriately reflects the limited but not nonexistent connection.",
    "level": "Ignored"
  },
  "Value Stream Management": {
    "resourceId": "Test Driven Development",
    "category": "Value Stream Management",
    "calculated_at": "2025-05-06T11:53:40",
    "ai_confidence": 20.084,
    "ai_mentions": 0.3,
    "ai_alignment": 2.3,
    "ai_depth": 2.4,
    "ai_intent": 2.2,
    "ai_audience": 5.3,
    "ai_signal": 2.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), highlighting its benefits for software quality, maintainability, and support for Agile principles. There is no explicit mention or discussion of Value Stream Management (VSM), nor any direct or indirect reference to core VSM practices such as mapping value streams, waste elimination, or aligning organizational goals with customer value. The main ideasâ€”quality, accountability, and continuous improvementâ€”are related concepts in technology and Agile development, but remain peripheral to VSM itself. The depth is limited to explaining TDDâ€™s methodology and cultural impact, without any analysis of value flow, value streams, or VSM-specific metrics. The primary audience (developers, technical teams) partially overlaps with those interested in VSM, but the focus and actionable takeaways are strongly tailored to practitioners of TDD, not VSM strategists. The signal-to-noise ratio is modest; all content is on-topic for TDD, but only tangentially related to VSM (at best) by way of general continuous improvement. No outdated concepts or critical tone are present, so no penalties are applied. Overall, with near-absence of direct category relevance or nuanced overlap, this results in a low weighted confidence and a 'Tertiary' connection.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "resourceId": "Test Driven Development",
    "category": "Lean Principles",
    "calculated_at": "2025-05-06T11:52:56",
    "ai_confidence": 48.866,
    "ai_mentions": 0.8,
    "ai_alignment": 4.6,
    "ai_depth": 4.9,
    "ai_intent": 5.1,
    "ai_audience": 7.8,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 49.0,
    "reasoning": "The content is focused on Test Driven Development (TDD), a software engineering and Agile practice, but it does not directly mention Lean Principles or its core concepts such as waste reduction (Muda), flow, pull systems, Kaizen, or Lean tools like 5S. \n\n- Mentions (0.8): 'Lean', 'Lean Principles', or related key terms are not directly named; there is only vague indirect relevance via phrases like 'value', 'continuous improvement', and 'quality'.\n- Alignment (4.6): TDD aligns somewhat with Leanâ€™s interest in quality, predictability, and continuous improvement, especially in eliminating defects (a form of waste). However, its purpose is not primarily Lean; instead, it is a technical practice more closely associated with Agile. The alignment is partial, not central.\n- Depth (4.9): The article discusses TDD in depthâ€”covering its process, benefits, and cultural implications. However, there is no in-depth discussion of specifically Lean principles (such as waste identification, value streams, or flow); thus, the depth is moderate regarding this category.\n- Intent (5.1): The contentâ€™s main purpose is to inform about TDD and its benefits. While aspects like 'continuous improvement' overlap with Lean intent, the focus is neither on Lean philosophy nor on waste reductionâ€”the fit to Lean Principles is tangential.\n- Audience (7.8): The content targets software practitioners interested in quality processes, overlapping with an audience interested in Lean, Agile, or similar methodologies. This is the nearest match among the dimensions.\n- Signal (7.7): The content is focused and relevant to TDD without off-topic digressions. However, its relevance to Lean Principles specifically is secondary, not primary.\n\nNo penalties apply: the content is neither outdated, satirical, nor critical of Lean, and does not reference obsolete practice.\n\nOverall, the analysis determines a tertiary level: TDD can be seen as Lean-compatible and sometimes discussed as a Lean engineering practice, but the content does not position it within the Lean Principles framework, nor does it use Lean-specific language or explore Lean tools or philosophy. The confidence reflects this indirect and secondary relationship.",
    "level": "Tertiary"
  },
  "Evidence Based Management": {
    "resourceId": "Test Driven Development",
    "category": "Evidence Based Management",
    "calculated_at": "2025-05-06T11:52:58",
    "ai_confidence": 18.029,
    "ai_mentions": 0.5,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 2.1,
    "ai_audience": 4.2,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), a software engineering practice centered around automated testing to improve code quality and reliability. \n\n1. Mentions: The text makes no direct or implicit references to Evidence Based Management (EBM) or its specific terminology (e.g., empirical decision-making, outcome management, business value metrics), hence a very low score (0.5) is justified.\n\n2. Alignment: While TDD encourages data-informed decisions about software quality, it does not align directly with EBMâ€™s organizational, empirical, and value-delivery focus. The only partial overlap is in promoting continuous improvement and qualityâ€”a minor aspect of EBM, but otherwise it is not conceptually equated, resulting in a low score (2.7).\n\n3. Depth: The discussion goes deep into TDD, exploring its benefits, purpose, and practice, but none of that is about EBM or its key outcomes, so the depth relevant to EBM is very limited (2.9).\n\n4. Intent: The main purpose is to inform or advocate for TDD as a practice for better software quality, not to elaborate on evidence-based management or to draw organizational insights from evidence and metrics (2.1).\n\n5. Audience: The content mostly targets software developers and technical practitioners, not the leaders, strategists, or outcome-focused managers typical of EBMâ€™s intended audience, though there is a minor reference to organizational culture (4.2).\n\n6. Signal: The piece is focused and free of filler, but almost entirely off-topic for EBM, thus low relevance for the category (3.0).\n\nThere were no penalties (no outdated content, nor does the tone contradict EBM). According to the weighted formula, the confidence score appropriately reflects extremely limited relevance. The connection is so tangential (e.g., testing as a quality metric) that this is clearly tertiary-level association.",
    "level": "Ignored"
  },
  "One Engineering System": {
    "resourceId": "Test Driven Development",
    "category": "One Engineering System",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 24.01,
    "ai_mentions": 0.1,
    "ai_alignment": 3.2,
    "ai_depth": 2.85,
    "ai_intent": 2.7,
    "ai_audience": 7.25,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content does not mention One Engineering System (1ES) at all (Direct Mentions: 0.10). It is focused strictly on Test Driven Development (TDD), a software development technique that, while potentially compatible with 1ES, is not specific to it or framed in its context. Conceptual Alignment (3.20): TDD can be a component within a broader engineering system, but the article does not discuss integration, unification, or standardisation across teamsâ€”the hallmarks of 1ES. Depth of Discussion (2.85): The article gives a reasonable overview of TDDâ€™s benefits and practices but does not go deeper into frameworks or system-level integration (i.e., how TDD fits into organisational engineering systems). Intent Fit (2.70): The primary motive is to introduce and promote TDD, not 1ES. Audience Alignment (7.25): The content is aimed at software engineers and teams, similar to 1ESâ€™s target audience, but remains at the practice level, not system/framework level. Signal-to-Noise (6.70): The content is focused, but all on TDD, not 1ES, so very little is actually relevant to the category beyond a tangential connection. No penalties were applied, as there is no outdated or contradictory information. Overall, the article fails to meet category requirements and is at best tangentially relatedâ€”thus, Level: Tertiary.",
    "level": "Ignored"
  },
  "Portfolio Management": {
    "resourceId": "Test Driven Development",
    "category": "Portfolio Management",
    "calculated_at": "2025-05-06T11:52:56",
    "ai_confidence": 11.093,
    "ai_mentions": 0.1,
    "ai_alignment": 0.85,
    "ai_depth": 1.235,
    "ai_intent": 0.9,
    "ai_audience": 2.1,
    "ai_signal": 0.75,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content is a focused discussion on Test Driven Development (TDD), a software engineering practice. (1) Direct Mentions: There are no explicit or even implicit mentions of portfolio management, scoring almost zero. (2) Conceptual Alignment: The main themes revolve around software quality, Agile alignment, and team-level practices, which only tangentially intersect portfolio-level concerns (e.g., fostering a culture of quality could loosely contribute to organisational objectives, but TDD itself is not about aligning strategy with execution). (3) Depth: The discussion is thorough for TDD itself but does not touch portfolio-level strategies, metrics, or frameworks. (4) Intent: The content aims to explain and advocate for TDD, with no intent relevant to portfolio-level management, thus scoring low. (5) Audience: The target audience is practitioners and software developers, not portfolio managers, though leadership may have some peripheral interest in a culture of quality (+0.1 for secondary leadership relevance). (6) Signal-to-Noise: The content is tightly focused on TDD with minor tangential nods to organisational impact, but not enough to be relevant to Portfolio Management. No penalties apply for outdated or satirical content. Given these scores, the confidence is extremely low and correctly placed at the tertiary level, since any relevance to portfolio management is incidental and not by design.",
    "level": "Ignored"
  },
  "Decision Making": {
    "resourceId": "Test Driven Development",
    "category": "Decision Making",
    "calculated_at": "2025-05-06T11:52:57",
    "ai_confidence": 29.867,
    "ai_mentions": 1.7,
    "ai_alignment": 3.8,
    "ai_depth": 3.6,
    "ai_intent": 4.1,
    "ai_audience": 7.8,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "Direct Mentions (1.7): The content never directly references 'decision making' or discusses frameworks/methodologies for making decisions. The focus remains on TDD as a process, not explicitly naming decision-making concepts or techniques.\n\nConceptual Alignment (3.8): While TDD involves making decisions during software development, the article is anchored in quality, accountability, and technical practices rather than the structured, evidence-based methodologies central to the 'Decision Making' category. There is a tangential connection through ideas of predictability and responsiveness but these are not elaborated as decision-making frameworks.\n\nDepth of Discussion (3.6): The text details TDDâ€™s benefits and approach, but does not explore the principles, cycles, or impact of evidence-based decision making, collaborative frameworks, analytics, or feedback loops as defined in the classification scope.\n\nIntent / Purpose Fit (4.1): The content intends to inform about TDD and its value in driving better software outcomes, which indirectly supports decision quality but is not its main intent. Enhancement of reliability and accountability are discussed as outcomes, not as structured methodologies for organizational decision-making.\n\nAudience Alignment (7.8): The audienceâ€”software practitioners and possibly Agile teamsâ€”overlaps with the intended audience for Decision Making materials. However, the focus here is technical practice rather than strategic or organizational decision makers.\n\nSignal-to-Noise Ratio (7.9): The text is focused and free of filler; every part discusses TDDâ€™s rationale and impact without irrelevant tangents. However, the relevance to evidence-based organizational decision making is lowâ€”most of the 'signal' is about software quality, not decisions per se.\n\nNo penalties are applied, as there are no outdated practices or contradictory tones present.\n\nIn summary, while TDD as a practice may inform some elements of disciplined team behavior and improvement, the provided content is not a meaningful or confident fit for the 'Decision Making' category according to the explicit definition. It should be classified as 'Tertiary' level because connection is indirect and only marginally relevant at a meta level.",
    "level": "Ignored"
  },
  "Remote Working": {
    "resourceId": "Test Driven Development",
    "category": "Remote Working",
    "calculated_at": "2025-05-06T11:53:01",
    "ai_confidence": 6.037,
    "ai_mentions": 0.2,
    "ai_alignment": 0.5,
    "ai_depth": 0.6,
    "ai_intent": 0.7,
    "ai_audience": 2.1,
    "ai_signal": 1.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content exclusively discusses Test Driven Development (TDD) in the context of software quality and Agile development values. There is no direct or indirect reference to remote working, remote Agile teams, distributed collaboration, or any tools/practices unique to remote work. \n\nMentions (0.2): Remote working is not explicitly named or referenced even once. \nConceptual Alignment (0.5): While TDD aligns with Agile values that can exist in any setting (in-person/remote), it does not address unique remote working concerns, such as distributed team collaboration, time zones, or remote tools. \nDepth (0.6): The discussion remains focused on TDD and its benefits within Agile, with no exploration of remote-specific practices, challenges, or solutions. \nIntent (0.7): The purpose is to explain TDD for improved software quality (potentially for Agile practitioners), not address remote working. \nAudience (2.1): The presumed audience (Agile developers/teams) overlaps minimally with remote Agile practitioners, but could include people working co-located. \nSignal-to-Noise (1.7): Nearly all content is off-topic with respect to remote working; no substantial relevant information is provided.\n\nNo penalties are applied because the content is not outdated, nor does it undermine the category. The final confidence score is extremely low, as would be appropriate for content that fits only at the most tangential/tertiary relationship to 'Remote Working' in Agile.",
    "level": "Ignored"
  },
  "Product Management": {
    "resourceId": "Test Driven Development",
    "category": "Product Management",
    "calculated_at": "2025-05-06T11:52:57",
    "ai_confidence": 23.795,
    "ai_mentions": 0.6,
    "ai_alignment": 2.1,
    "ai_depth": 2.0,
    "ai_intent": 2.2,
    "ai_audience": 2.9,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content is centered entirely on Test Driven Development (TDD), an engineering practice focused on improving software quality through automated tests. \n\n- Mentions (0.6): There are no direct or explicit references to Product Management or its typical jargon. The only possible indirect link is a passing reference to Agile principles, but Product Management as a category is never named or clearly referenced. \n- Conceptual Alignment (2.1): The main ideasâ€”test coverage, technical excellence, continuous improvementâ€”are relevant to software engineering and only connect to Product Management in a very indirect way (methodologies that are sometimes of interest to product managers). The focus is not on strategic alignment of customer needs, business objectives, or frameworks for product decision-making. There is minor adjacency in terms of delivering value to stakeholders and customers, but not in a PM-centric context.\n- Depth (2.0): The discussion probes the benefits and processes of TDD, addressing technical and team-level outcomes, such as code maintainability and team adaptability. There is no exploration of strategic product decision frameworks, product lifecycle stages, or PM methodologies. \n- Intent / Purpose (2.2): The primary intent is informative with regard to software development practicesâ€”not product management. Any intersection with product management (e.g., Agile) is brief and not the focal purpose.\n- Audience (2.9): The content targets developers, technical leads, and possibly engineering managers, not product managers or strategists. There is a small crossover because PMs in Agile environments may be aware of TDD, but itâ€™s not written for them.\n- Signal (3.7): The content is focused and avoids off-topic tangents or filler, but its relevance to Product Management is quite weak; most of the information is noise with respect to the designated category.\n- Penalties: No penalties applied; there is no evidence of outdated advice or inappropriate tone. \n\nIn summary, while TDD may tangentially influence aspects that matter to Product Managers (e.g., technical feasibility, quality culture), this article does not address Product Management themes, frameworks, or strategic decision-making. Therefore, it is classified as Tertiary to the Product Management category, with low overall confidence.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "resourceId": "Test Driven Development",
    "category": "Platform Engineering",
    "calculated_at": "2025-05-06T11:52:57",
    "ai_confidence": 10.83,
    "ai_mentions": 0.3,
    "ai_alignment": 0.7,
    "ai_depth": 0.6,
    "ai_intent": 0.4,
    "ai_audience": 4.0,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content exclusively addresses Test Driven Development (TDD), focusing on its methodology, benefits, and alignment with Agile practices. There is no mention of 'Platform Engineering,' Internal Developer Platforms, or any of the key concepts in the provided category definitionâ€”such as self-service, internal platforms, automation of developer workflows, or the standardisation of tools. \n\nMentions (0.30): The concept of platform engineering is not mentioned directly or indirectly. The only potential indirect overlap is a passing reference to quality and maintainability, which are tangential and not framed within platform engineering.\n\nAlignment (0.70): The alignment is minimal. While TDD can be practiced within organizations with good platform engineering, the content does not highlight or explore this connection. It is entirely centered on software quality at a process/methodology level, not infrastructure or internal tooling.\n\nDepth (0.60): The article provides a solid, though brief overview of TDD, but contains zero exploration into platform engineering or its typical topics.\n\nIntent (0.40): The intent is to inform about TDD for a general software development audience, without reference to platforms or tooling ecosystemsâ€”making alignment with the platform engineering category intent very weak.\n\nAudience (4.00): The audienceâ€”developers and technical teamsâ€”does overlap to some degree with those interested in platform engineering. However, the content neither assumes knowledge nor covers needs specific to platform engineering practitioners or leaders.\n\nSignal (1.10): The text is focused and concise regarding TDD, but does not offer any platform engineering signal; all content is about a general software practice. \n\nNo penalties were applied as there is no evidence of outdated content or an oppositional tone. Overall, this resource is tertiary to platform engineering at best, with almost no substantive linkage.",
    "level": "Ignored"
  },
  "Scaling": {
    "resourceId": "Test Driven Development",
    "category": "Scaling",
    "calculated_at": "2025-05-06T11:52:57",
    "ai_confidence": 11.568,
    "ai_mentions": 0.2,
    "ai_alignment": 1.4,
    "ai_depth": 1.8,
    "ai_intent": 1.6,
    "ai_audience": 2.0,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content is focused entirely on Test Driven Development (TDD) as a software engineering practice and does not directly mention or discuss scaling frameworks, methodologies for coordinating multiple teams, or cross-team alignmentâ€”none of the key Scaling topics listed in the definition appear. \n\n- Direct Mentions: There are no explicit references to Scaling or its frameworks (score: 0.2).\n- Conceptual Alignment: While TDD is beneficial at the team level and helps cultivate technical excellence, it only hints at scalability in a very generic way when noting codebases remain maintainable and scalable, but it does not connect this concept to enterprise scaling or the coordination of multiple teams (score: 1.4).\n- Depth: The discussion is quite thorough for TDD, but not for Scaling; any relevance to Scaling is superficial and brief (score: 1.8).\n- Intent: The primary intent is to explain TDD, not Scaling practices or challenges, with only a passing mention that TDD supports a scalable codebaseâ€”intent alignment with Scaling is weak (score: 1.6).\n- Audience: The content is aimed at software developers or teams, potentially overlapping with some audiences interested in Scaling, but not tailored for enterprise leaders or those explicitly scaling across teams (score: 2.0).\n- Signal-to-Noise: Most of the content is focused and relevant to TDD, but almost none is dedicated to Scaling, so signal for Scaling is low (score: 2.2).\n\nNo penalties were assessed because the content is current, genuinely informative, and does not critique or misrepresent the Scaling category. However, given the minimal relevance and the lack of direct material addressing Scaling as defined, the overall confidence is very low and level is Tertiary.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "resourceId": "Test Driven Development",
    "category": "Agile Product Management",
    "calculated_at": "2025-05-06T11:52:59",
    "ai_confidence": 49.839,
    "ai_mentions": 1.3,
    "ai_alignment": 5.7,
    "ai_depth": 5.9,
    "ai_intent": 5.8,
    "ai_audience": 8.1,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 50.0,
    "reasoning": "The content provided focuses on Test Driven Development (TDD), which is primarily a software engineering practice. While it mentions alignment with Agile principles and benefits such as collaboration, responsiveness to change, and value delivery, the main emphasis is on development methodology rather than Agile Product Management specifically. \n\nScoring rationale:\n- Mentions (1.3): Agile Product Management or its explicit practices are not directly named; 'Agile principles' are mentioned as an alignment, but not the category itself nor its specialty terms (backlogs, Product Owner, product vision, etc.).\n- Alignment (5.7): The discussion loosely aligns with the Agile philosophy, especially technical excellence and adaptability, which have some connection to Agile product development. However, the core of Agile Product Managementâ€”strategy, prioritisation, stakeholder engagement, customer feedback loopsâ€”is not addressed.\n- Depth (5.9): The exploration of TDD is thorough for its topic, but depth around product management methodologies or Agile frameworks like Scrum is lacking.\n- Intent (5.8): The intent is to inform about TDD as a practice for quality and sustainable value. While this is tangentially relevant (as Agile teams benefit), the connection to managing product delivery and maximising product value in an Agile context is indirect.\n- Audience (8.1): The writing could appeal to both developers and Agile practitioners interested in team quality and delivery practices, overlapping somewhat with audiences for Agile Product Management.\n- Signal (8.2): The content is focused and free of filler, sticking to TDD and its quality implications; however, its direct relevance to the product management practices defined in the category is low.\n- No penalties for obsolescence or contradictory tone.\n\nLevel: 'Tertiary'â€”TDD is a supporting technical practice that aligns with Agile but is not central to Agile Product Management per se. The confidence score reflects the fact that while TDD contributes to Agile software delivery ecosystems, it does not cover core product management themes like product backlog prioritisation, stakeholder engagement, strategic alignment, or product vision.",
    "level": "Tertiary"
  },
  "Social Technologies": {
    "resourceId": "Test Driven Development",
    "category": "Social Technologies",
    "calculated_at": "2025-05-06T11:53:08",
    "ai_confidence": 64.525,
    "ai_mentions": 2.8,
    "ai_alignment": 7.4,
    "ai_depth": 7.9,
    "ai_intent": 8.2,
    "ai_audience": 6.8,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 65.0,
    "reasoning": "The content explicitly discusses Test Driven Development (TDD) as a methodology that fosters quality, accountability, and adaptability in software development teams. On the 'Direct Mentions' dimension (2.8), the term 'Social Technologies' or related frameworks are not directly mentioned, but there are several references to relevant concepts like 'collaboration', 'continuous improvement', and 'Agile principles.' The 'Conceptual Alignment' (7.4) is moderately strong: TDD is framed within Agile values, promoting continuous improvement, collective work quality, and reliabilityâ€”core themes aligning with Social Technologies. However, its primary focus is still a technical practice. The 'Depth of Discussion' (7.9) is good, as the content does not just describe TDD mechanically but explores its impact on team culture, quality, and adaptability, though not deeply on social frameworks themselves. 'Intent/Purpose Fit' (8.2) is high, as the main objective is to improve the software process through shared values and practices, though the lens is mainly technical. The 'Audience Alignment' (6.8) skews slightly more toward practitioners than organisational strategists or leaders for whom 'Social Technologies' is a core concern. 'Signal-to-Noise Ratio' (7.9) is high: the content is relevant, focused, and connects TDD with broader themes of team improvement. No penalties are applied because the content is current, constructive, and not satirical or misaligned. Overall, TDD is positioned as supportive of social technologies (e.g., team adaptability, value delivery, collaboration), but it doesn't deeply explore frameworks or methodologies like sociocracy or holacracy, nor does it focus on organisational social structure as a primary lens. Thus, 'Secondary' is the most fitting levelâ€”it's relevant, supportive, and adjacent, but not a primary example of Social Technologies.",
    "level": "Secondary"
  },
  "Shift Left Strategy": {
    "resourceId": "Test Driven Development",
    "category": "Shift Left Strategy",
    "calculated_at": "2025-05-06T11:53:14",
    "ai_confidence": 56.183,
    "ai_mentions": 2.9,
    "ai_alignment": 5.6,
    "ai_depth": 5.85,
    "ai_intent": 5.65,
    "ai_audience": 8.5,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 56.0,
    "reasoning": "The content is an in-depth discussion of Test Driven Development (TDD) as a software engineering practice. TDD does share conceptual territory with the Shift-Left Strategy in that it advocates integrating testing early in the development lifecycle. The content makes explicit reference to incorporating tests from the outset and how this reduces defects, which loosely aligns with shift-left principles. \n\nHowever, the article does not use the term 'Shift-Left', nor does it overtly discuss the broader shift-left strategy beyond TDD. There is no mention of other shift-left aspects such as early integration of security or compliance, or tooling/collaboration for shift-left across practices. The primary focus is on TDD itself rather than the overarching philosophy or multi-dimensional implementation of a shift-left strategy. \n\nScores:\n- Direct Mentions (2.900): The phrase 'shift-left' is never mentioned, and there are no explicit references. However, the undercurrent of integrating testing earlier grants a minimal score.\n- Conceptual Alignment (5.600): There is moderate alignment because TDD is a classic example of bringing quality processes earlier in the lifecycle, but the link to shift-left strategy is implicit, not explicit or comprehensive.\n- Depth (5.850): The discussion is thorough about TDD, its mindset, and benefits, but depth about shift-left as a holistic strategy is lacking.\n- Intent/Purpose Fit (5.650): The intent is to promote quality via TDD, which overlaps with shift-left aims, but focus remains on the TDD discipline.\n- Audience (8.500): The intended audience (developers, software teams) overlaps closely with the shift-left strategy's typical audience.\n- Signal-to-Noise (7.200): The article stays on-topic for TDD, but not shift-left entirely, thus slightly reduced signal score.\n\nNo content is outdated or contradictory to the shift-left strategy, so no penalties applied. The final confidence score (56.183) reflects the content's secondary relevance: TDD is an example of shift-left testing, but the content is not directly or fully about the shift-left strategy.",
    "level": "Tertiary"
  },
  "Test Automation": {
    "resourceId": "Test Driven Development",
    "category": "Test Automation",
    "calculated_at": "2025-05-06T11:52:58",
    "ai_confidence": 72.75,
    "ai_mentions": 7.3,
    "ai_alignment": 8.0,
    "ai_depth": 8.2,
    "ai_intent": 7.9,
    "ai_audience": 8.4,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 73.0,
    "reasoning": "The content is centered on Test Driven Development (TDD), which is a software development process that is deeply intertwined with automated testing. There are direct mentions of 'automated tests' and frequent references to testing ('writing automated tests before code', 'tests serve as a safety net', 'test coverage'). However, while automation is described as a supporting mechanism, the primary focus is the TDD philosophy, not general test automation strategy, tools, or frameworks. \n\nFor 'Direct Mentions', the score (7.3) reflects multiple explicit uses of 'automated tests' but not a broader discussion of test automation as a field (e.g., no mention of frameworks, tools, or pipelines). 'Conceptual Alignment' is strong (8.0): TDD is a subset of test automation, centering on writing tests to drive development, and the content aligns with principles like quality and continuous improvement. 'Depth of Discussion' (8.2) is high since the content goes beyond mere mention and details how automated tests in TDD enhance development processes, but it stops short of exploring advanced automation topics or tooling. 'Intent/Purpose Fit' (7.9) is high, as purpose matches the category, though with a TDD-first angle rather than general automation. 'Audience Alignment' (8.4) reflects that the target audience is technical practitioners interested in quality practices, which is similar to the test automation category's audience. 'Signal-to-Noise' (8.1) gets a high score, as content is focused and relevant, with no filler or off-topic material. \n\nNo penalties are applied, as the content is current, supportive, and not satirical or critical. The content's focus is on TDD (a methodology using automated testing), making it 'Secondary' for the 'Test Automation' categoryâ€”itâ€™s fundamentally relevant, but not comprehensive or primarily about automation frameworks, tools, or cross-cutting strategies. The confidence score of 72.75 reflects solid relevance but not full alignment with the explicit, broader domain of Test Automation.",
    "level": "Secondary",
    "reasoning_summary": "This content fits the 'Test Automation' category as it discusses Test Driven Development, which relies on automated tests to guide software creation. While the main focus is TDD rather than general automation tools or strategies, the principles and practices described are closely related. The content is relevant for technical audiences interested in quality and automation, though itâ€™s more of a secondary fit than a comprehensive overview of test automation."
  },
  "Cell Structure Design": {
    "resourceId": "Test Driven Development",
    "category": "Cell Structure Design",
    "calculated_at": "2025-05-06T11:53:00",
    "ai_confidence": 5.78,
    "ai_mentions": 0.2,
    "ai_alignment": 0.4,
    "ai_depth": 0.5,
    "ai_intent": 0.8,
    "ai_audience": 2.1,
    "ai_signal": 0.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content is exclusively about Test Driven Development (TDD), with no direct mention or conceptual discussion of Cell Structure Design, Beta Codex, decentralised organisational models, autonomous cells, or any key principles relevant to the provided category definition. \n\n- Mentions (0.2): There are no explicit or even implicit mentions of 'Cell Structure Design' or related terminologyâ€”only standard TDD/Agile language.\n\n- Conceptual Alignment (0.4): The closest overlap is the shared emphasis on improvement, accountability, and adaptability; however, these are generic organisational values, not unique to Cell Structure Design, and the discussion is fully anchored in software practices, not organisational structure.\n\n- Depth (0.5): The text is detailed about TDD but offers nothing on Cell Structure Design principles, cells, networked structures, or complexity theory, giving a minimal score for very indirect thematic overlap.\n\n- Intent (0.8): The purpose is clearâ€”to educate on TDDâ€”not Cell Structure Design. The only faint connection is that it indirectly references team practices, transparency, and improvement, but these are not developed from an organisational design perspective.\n\n- Audience (2.1): The primary audience is software developers or technical managers invested in quality code. There is a weak, tertiary overlap with transformation-minded practitioners if one stretches interpretation, but it's not intended for those interested in Cell Structure Design models.\n\n- Signal-to-Noise Ratio (0.9): Nearly all content is off-topic under the target category; there is no discussion relevant to Cell Structure Design, decentralisation, or self-organisation at an organisational level. \n\nNo penalties applied, as the content is up-to-date and does not actively contradict or satirise the Cell Structure Design model.\n\nOverall, classification as 'Cell Structure Design' is not supportedâ€”this is a purely tertiary, tangential fit at best.",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "resourceId": "Test Driven Development",
    "category": "Customer Satisfaction",
    "calculated_at": "2025-05-06T11:53:01",
    "ai_confidence": 26.968,
    "ai_mentions": 1.3,
    "ai_alignment": 3.9,
    "ai_depth": 3.6,
    "ai_intent": 2.8,
    "ai_audience": 7.2,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The provided content directly focuses on Test Driven Development (TDD) and its value for software quality, technical excellence, and Agile alignment. Direct mentions of 'customer satisfaction' or related measurement techniques (Net Promoter Score, feedback loops, etc.) are absent, with only a single indirect nod to 'stakeholders and customers' benefitting from TDDâ€™s outcomes. Conceptual alignment is weak: while TDD can indirectly support customer satisfaction (by promoting better quality and reliability), the main theme is developer-centric practices, not principles and practices for measuring and enhancing customer happiness or experience. Depth is modest for TDD, but not for customer satisfactionâ€”it does not discuss metrics, strategies for engagement, or feedback integration. Intent stays on quality and process improvement, not satisfaction. Audience is more technical (developers, teams) than customer-experience-oriented but may incidentally include roles impacting customer outcomes. The content is focused and coherent (signal high), but mostly irrelevant to core customer satisfaction discussions. No penalties were applied as the content is not outdated, off-tone, or mocking. Level is tertiary, as customer satisfaction is just implied in the context of software quality and better outcomes, not directly explored.",
    "level": "Ignored"
  },
  "Change Management": {
    "resourceId": "Test Driven Development",
    "category": "Change Management",
    "calculated_at": "2025-05-06T11:52:58",
    "ai_confidence": 35.475,
    "ai_mentions": 1.8,
    "ai_alignment": 3.3,
    "ai_depth": 3.1,
    "ai_intent": 4.2,
    "ai_audience": 4.5,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 35.0,
    "reasoning": "The provided content focuses on Test Driven Development (TDD), a technical software engineering practice. While TDD is described as aligning with Agile principles and fostering a mindset of continuous improvement and adaptability, direct mentions of 'change management' or explicit discussion of organizational transition strategies, stakeholder management, or leadership roles in change are absent. \n\nMentions (1.8): There is no direct reference to 'change management'â€”all allusions are indirect, such as fostering adaptability or continuous improvement. \n\nAlignment (3.3): The content somewhat overlaps conceptually with aspects of change management (e.g., 'mindset of continuous improvement'), but the main focus stays technical and quality-oriented. The broader organizational perspective of change management is missing.\n\nDepth (3.1): The discussion is somewhat deep about TDD and its benefits, but depth regarding change management strategies or practices is not present. Brief links to Agile philosophy slightly raise the score.\n\nIntent (4.2): The purpose is primarily to explain TDD; while it is supportive of Agile values, change management is not a main intent.\n\nAudience (4.5): The content targets developers and technical practitioners, coinciding peripherally with those interested in organizational change in Agile contexts, but it is not aimed at leadership or strategists dealing directly with change management.\n\nSignal (4.0): The majority of content is TDD-centric, relevant to Agile practitioners but only superficially connected to change management.\n\nNo penalties were applied, as the content is up to date, non-satirical, and not undermining the framing of the category. Final confidence reflects that while there are some conceptual ties, the fit with Change Management is weak. The most appropriate level of categorization is 'Tertiary', since links to change management are tangential rather than central.",
    "level": "Ignored"
  },
  "Agile Frameworks": {
    "resourceId": "Test Driven Development",
    "category": "Agile Frameworks",
    "calculated_at": "2025-05-06T11:53:03",
    "ai_confidence": 43.406,
    "ai_mentions": 2.8,
    "ai_alignment": 4.4,
    "ai_depth": 4.6,
    "ai_intent": 2.8,
    "ai_audience": 6.2,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "The content focuses almost entirely on explaining Test Driven Development (TDD) as a software practice aimed at improving code quality, maintainability, and fostering a culture of continuous improvement. While it does reference Agile principles (such as adaptability, collaboration, and technical excellence), there is only a single, brief mention that TDD 'aligns well with Agile principles.' The main discussion is practice-oriented (test-first design), rather than being about the frameworks or methodologies that define 'Agile Frameworks' as per the classification criteria. There are no direct references to actual Agile frameworks (like Scrum, Kanban, XP), nor is there any comparative or case study content regarding the implementation or organisational impact of those frameworks. The intent is educational, targeting developers and teams interested in quality software delivery, which partially overlaps with the Agile audience. However, most of the piece would be categorized under general software engineering or software craftsmanship rather than 'Agile Frameworks.' Thus, all dimensions score low except audience and signal (since some relevance is maintained thanks to mentions of Agile values). There are no out-of-date suggestions or negative tone present, so no penalties are applied. The overall confidence score solidly reflects that this is only tangentially related to the target category, making it a tertiary fit at best.",
    "level": "Tertiary"
  },
  "Continuous Learning": {
    "resourceId": "Test Driven Development",
    "category": "Continuous Learning",
    "calculated_at": "2025-05-06T11:52:59",
    "ai_confidence": 72.083,
    "ai_mentions": 2.6,
    "ai_alignment": 8.7,
    "ai_depth": 7.8,
    "ai_intent": 8.2,
    "ai_audience": 8.5,
    "ai_signal": 8.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "1. Direct Mentions (2.6): The content does not directly reference 'Continuous Learning' by name, but uses some related terms ('continuous improvement,' 'adaptability,' 'culture'). The main terminology centers on Test Driven Development (TDD), with continuous learning implied rather than stated.\n2. Conceptual Alignment (8.7): The content conceptually aligns well with Continuous Learning, referencing continuous improvement, adaptability, collaboration, and a culture fostering predictable delivery and systemic practice. However, explicit discussion around knowledge sharing or growth mindset is limited, keeping it shy of a perfect score.\n3. Depth of Discussion (7.8): The discussion remains largely focused on TDD basics and its contribution to quality, with a moderate exploration into broader cultural impacts (adaptability, continuous improvement). It does not deeply explore specific practices or frameworks for continuous learning itself.\n4. Intent / Purpose Fit (8.2): The content's intent matches well, aiming to inform and promote good practices that support improvement and adaptability, which ties into continuous learning, even though TDD is the central topic rather than continuous learning per se.\n5. Audience Alignment (8.5): The target audience is clearly practitioners and teams in Agile/DevOps/Lean environments, aligned with the classification's intended readership.\n6. Signal-to-Noise Ratio (8.9): Nearly all content is relevant, concise, and purposeful. There is no filler or tangential discussion.\nLevel: The fit is secondaryâ€”the content is not primarily about Continuous Learning but clearly relates and supports it as a theme, especially in regard to culture and improvement.",
    "level": "Secondary",
    "reasoning_summary": "While the content doesnâ€™t explicitly mention 'Continuous Learning', it strongly supports the theme through its focus on continuous improvement, adaptability, and fostering a collaborative culture. The main emphasis is on TDD, but the discussion naturally aligns with continuous learning principles, making it relevant for practitioners interested in growth and improvement, even if itâ€™s not the central topic."
  },
  "Product Development": {
    "resourceId": "Test Driven Development",
    "category": "Product Development",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 71.3,
    "ai_mentions": 3.7,
    "ai_alignment": 7.9,
    "ai_depth": 7.5,
    "ai_intent": 7.4,
    "ai_audience": 6.4,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 71.0,
    "reasoning": "The content focuses on Test Driven Development (TDD) as a practice within software development. While the category definition for 'Product Development' includes continuous improvement, customer feedback loops, and practices that facilitate valuable product delivery, this content centers on TDDâ€”a technique at the intersection of quality assurance and development methodology. \n\nDirect Mentions (3.7): The article directly mentions TDD throughout, with general references to broader Agile principles and continuous improvement. However, 'Product Development' specifically is not named, and references to the larger product cycle are implicit, not explicitâ€”hence the moderate score. \n\nConceptual Alignment (7.9): The content aligns well with core product development concepts such as iterative improvement, technical excellence, and delivery of value. The link to Agile principles and stakeholder outcomes shows good alignment with the category's spiritâ€”though customer feedback loops and strategy/discovery alignment are only alluded to, not discussed in detail.\n\nDepth of Discussion (7.5): The discussion gives a thorough overview of what TDD is, why it matters, and its long-term organizational benefits, going beyond surface level. However, it does not deeply explore integration with other product development practices (e.g., DevOps, Lean, discovery-driven design), so does not reach maximum depth.\n\nIntent / Purpose Fit (7.4): The purpose is strongly informative and aims to show the value of TDD in building quality software. While this supports product delivery, the focus is primarily on code quality and process improvement for developers rather than holistic product development.\n\nAudience Alignment (6.4): The primary audience seems to be software engineers and technical practitioners interested in development methodology. There's secondary appeal to product teams or leaders, but the content does not address strategic/business audiences nor practitioners outside engineering.\n\nSignal-to-Noise Ratio (7.2): The content is well-structured, on-topic, and free of filler or digressions. All paragraphs support the central thesis. However, the tight technical focus means a proportion of it sits at the boundary between technical implementation and broader product development practices, slightly lowering the score.\n\nNo penalties are applied: the content is timely, constructive, and the tone is in full alignment.\n\nOverall, the resource lands as 'Secondary' to 'Product Development'â€”TDD is an important practice in the landscape, but the content would need broader discussion of customer feedback, strategic alignment, and cross-functional delivery to qualify as 'Primary.' The confidence score (71.3) reflects this substantial but not central fit.",
    "level": "Secondary",
    "reasoning_summary": "This content is a solid fit as a secondary resource for 'Product Development'. It thoroughly explains TDD and its benefits for software quality and iterative improvement, which are relevant to product development. However, it mainly targets technical audiences and focuses on development practices, with only indirect links to broader product strategy, customer feedback, or cross-functional collaboration. For a primary fit, a wider product perspective would be needed."
  },
  "Empirical Process Control": {
    "resourceId": "Test Driven Development",
    "category": "Empirical Process Control",
    "calculated_at": "2025-05-06T11:53:14",
    "ai_confidence": 35.85,
    "ai_mentions": 1.7,
    "ai_alignment": 4.8,
    "ai_depth": 4.3,
    "ai_intent": 5.2,
    "ai_audience": 6.1,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "The content explicitly discusses Test Driven Development (TDD), focusing primarily on its workflow (tests-first, code-after), benefits for quality and adaptability, and its connection to Agile values. However, direct references to 'empirical process control' are absent, thus scoring low on mentions (1.7). Conceptual alignment is partial: while TDD supports evidence-driven improvement (tests as feedback), the primary theme is test automation rather than true empirical controls such as transparency, inspection, and adaptation (alignment: 4.8). The depth of discussion into Empirical Process Control is limited, with some nods to continuous improvement and adaptability in Agile, but without substantial coverage of empirical pillars (depth: 4.3). The intent partially fits, as quality and adaptability are mentioned, yet the core purpose remains TDD, not Empirical Process Control (intent: 5.2). The audience is largely technicalâ€”developers or teamsâ€”which overlaps sufficiently with the intended category audience (audience: 6.1). The signal-to-noise ratio is fairly high: almost all content is relevant to process and improvement, but only a minority directly relates to empirical control (signal: 7.0). No penalties were necessary since the content is not outdated or contradictory. Overall, this is a tertiary fit: TDD can facilitate empirical process control by generating feedback and supporting agility, but the content does not make this relationship explicit or central.",
    "level": "Ignored"
  },
  "Flow Efficiency": {
    "resourceId": "Test Driven Development",
    "category": "Flow Efficiency",
    "calculated_at": "2025-05-06T11:53:17",
    "ai_confidence": 19.06,
    "ai_mentions": 0.2,
    "ai_alignment": 1.8,
    "ai_depth": 2.1,
    "ai_intent": 2.2,
    "ai_audience": 4.6,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content is an introduction to Test Driven Development (TDD), focusing on its principles, benefits, and its alignment with Agile practices. \n\n- Direct Mentions (0.2): The term 'Flow Efficiency' and its associated keywords (e.g., throughput, cycle time, bottlenecks, value stream) are not explicitly mentioned at all. The closest connection is a tangential allusion to continuous improvement, but not specifically to flow optimization.\n\n- Conceptual Alignment (1.8): While TDD is part of Agile technical practice, its core purpose is software quality via testing disciplineâ€”not optimizing work throughput or flow. There is a very indirect alignment in fostering sustainable pace and continuous improvement, but the main ideas do not match the flow optimization definition.\n\n- Depth of Discussion (2.1): The content provides reasonable detail on TDDâ€™s purpose and effects (quality, maintainability, accountability), but does not explore, even at a conceptual level, topics like identifying bottlenecks, WIP limits, or process flow improvement.\n\n- Intent / Purpose Fit (2.2): The main intent is explaining a software quality/development process, not optimizing the throughput of value delivery. Thereâ€™s only a minor overlap via the reference to predictability and continuous improvement, which are adjacent to, but not core to, flow efficiency as defined.\n\n- Audience Alignment (4.6): The content targets practitioners interested in software development processesâ€”an audience that may overlap with those interested in flow efficiency, though here the content is not tailored to flow improvement specialists. Thus, an above-neutral score is assigned but not high.\n\n- Signal-to-Noise Ratio (4.1): The content is tightly focused on TDD, with no off-topic information, but little of it is relevant to flow efficiency.\n\nNo penalties were applied: The content is current and does not undermine flow efficiency concepts. The overall confidence score is low (19.06), correctly reflecting that the content is only peripherallyâ€”if at allâ€”relevant to the flow efficiency category, placing it as tertiary at best.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "resourceId": "Test Driven Development",
    "category": "Agile Philosophy",
    "calculated_at": "2025-05-06T11:52:58",
    "ai_confidence": 64.006,
    "ai_mentions": 3.6,
    "ai_alignment": 7.9,
    "ai_depth": 7.8,
    "ai_intent": 7.2,
    "ai_audience": 7.6,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 64.0,
    "reasoning": "The content primarily discusses Test Driven Development (TDD) as a software engineering practice, focusing on its methodology, quality benefits, and workflow implications. Direct mentions of Agile philosophy are limited, but there are explicit references (e.g., 'aligns well with Agile principles,' 'continuous improvement,' 'responsiveness to change'), justifying a moderate score for Direct Mentions (3.6). For Conceptual Alignment, the piece acknowledges TDD's synergy with a few core Agile principles (adaptability, collaboration, and quality), granting a strong but not perfect score (7.9) because the central theme is TDD rather than Agile philosophy itself. The Depth of Discussion is substantial regarding TDD and its impact on team culture, mindset, and adaptability, but the exploration of Agile philosophy is incidental and supportive rather than central (7.8). The Intent/Purpose Fit is moderately high (7.2) since the purpose is to provide insight on TDD, with Agile philosophy leveraged as supporting context rather than being the core focus. Audience Alignment is strong (7.6) as the content likely resonates with Agile-minded practitioners and organizational change agents, though it primarily targets developers and engineering teams. Signal-to-Noise Ratio is decent (6.9); most of the content is relevant to TDD's impact on Agile culture, but a segment of the text sings the praises of TDD without further philosophical exploration. No penalties are applicable: the content is current, neutral-positive in tone, and does not misrepresent Agile. Overall, the fit with Agile Philosophy is 'Secondary,' as Agile philosophy is contextual rather than centralâ€”the piece is about TDD's philosophical alignment and not the philosophy in its own right.",
    "level": "Secondary"
  },
  "Collaboration Tools": {
    "resourceId": "Test Driven Development",
    "category": "Collaboration Tools",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 17.145,
    "ai_mentions": 0.7,
    "ai_alignment": 2.1,
    "ai_depth": 1.9,
    "ai_intent": 3.2,
    "ai_audience": 3.4,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content provided is solely focused on Test Driven Development (TDD), a software development methodology oriented around writing automated tests before actual code. While the discussion references Agile principles and briefly mentions the fostering of collaboration and team culture, it does not explicitly mention any collaboration tools, platforms, or software (such as Slack, Jira, Trello, etc.), nor does it discuss their features, integration, or implementation. The alignment with the 'Collaboration Tools' category is weak: TDD may foster teamwork indirectly, but the discussion lacks any substantial coverage of tools or practices facilitating team communication and coordination as per the category definition. The audience (developers or Agile teams) only partially overlaps, and the signal-to-noise ratio is low with respect to the category due to the almost exclusive focus on TDD process benefits, not collaborative tooling. There are no outdated or contradictory elements, so no penalties are applied. Overall, this is a classic example of tangential tertiary relevance: a related Agile best practice without tool focus, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Transparency": {
    "resourceId": "Test Driven Development",
    "category": "Transparency",
    "calculated_at": "2025-05-06T11:52:59",
    "ai_confidence": 37.32,
    "ai_mentions": 1.2,
    "ai_alignment": 3.5,
    "ai_depth": 3.7,
    "ai_intent": 2.9,
    "ai_audience": 8.3,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content is primarily focused on Test Driven Development (TDD) as a methodology for improving software quality. Direct Mentions (1.2): The word 'transparency' is not explicitly mentioned, nor are transparency concepts clearly referenced; any possible connection is very indirect. Conceptual Alignment (3.5): While TDD can incidentally increase visibility into requirements and code quality, the content does not directly link these effects to transparency as defined in Agile. The emphasis is on accountability and quality, not on openness or work visibility. Depth (3.7): Explanations are detailed about TDD's benefits, but the connection to transparency is superficial; terms like 'trust' and 'accountability' are present, but only tangentially touch on transparency's intent. Intent (2.9): The intent is educational about TDD and not centered on transparency. Transparency is neither a primary nor secondary outcome discussed. Audience Alignment (8.3): The content targets Agile practitioners and software developers, which is consistent with the category's intended audience. Signal-to-Noise (6.2): The content is focused and relevant to TDD but not to transparency; thus, much of the substance is off-topic for transparency classification. No penalties were applied; the content is not outdated and maintains a neutral, informative tone. Overall, any alignment with 'Transparency' is tertiary and indirect, resulting in a low confidence score for this category.",
    "level": "Ignored"
  },
  "Continuous Improvement": {
    "resourceId": "Test Driven Development",
    "category": "Continuous Improvement",
    "calculated_at": "2025-05-06T11:53:03",
    "ai_confidence": 66.57,
    "ai_mentions": 3.9,
    "ai_alignment": 7.4,
    "ai_depth": 6.7,
    "ai_intent": 6.2,
    "ai_audience": 8.3,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content primarily addresses Test Driven Development (TDD), explaining its role in software quality, test-first design, and technical excellence. It briefly references continuous improvement, emphasizing that TDD 'cultivates a mindset of continuous improvement and adaptability within teams' and 'aligns well with Agile principles.' However, Continuous Improvement is not a direct or primary focus. \n\nMentions (3.9): The phrase 'continuous improvement' appears once and is conceptually referenced in terms like adaptability and sustainability. However, explicit or repeated use is limited. \n\nAlignment (7.4): The text aligns moderately with the concept of continuous improvement, noting TDD's contribution to ongoing adaptation, collaboration, and Agile practices but lacks detailed exploration of continuous improvement frameworks or strategies. \n\nDepth (6.7): The discussion of continuous improvement is more implied than substantial; it is not the central subject, and empirical, cultural, or procedural aspects are only lightly touched upon. \n\nIntent (6.2): The purpose centers on advocating for TDD as a quality driver, with continuous improvement framed as an indirect benefit rather than the main focus. \n\nAudience (8.3): The article targets practitioners and technical teamsâ€”the same audience as continuous improvement in Agile/tech contexts. \n\nSignal (7.8): The piece is relevant and largely on-topic for its main subject (TDD), with the reference to continuous improvement fitting well, but much of the text is focused on TDD itself, not on continuous improvement themes. \n\nNo penalties were needed: the content is current, not contradictory, and respects Agile philosophies. The confidence rating reflects that while there is meaningful overlap and the right audience, continuous improvement is clearly a secondary theme and not the principal subject.",
    "level": "Secondary"
  },
  "Common Goals": {
    "resourceId": "Test Driven Development",
    "category": "Common Goals",
    "calculated_at": "2025-05-06T11:52:59",
    "ai_confidence": 42.185,
    "ai_mentions": 2.1,
    "ai_alignment": 4.65,
    "ai_depth": 4.4,
    "ai_intent": 4.95,
    "ai_audience": 7.05,
    "ai_signal": 7.17,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content primarily focuses on Test Driven Development (TDD) as a software engineering practice and its quality-oriented benefits. \n\n- 'Direct Mentions' (2.100): The content does not explicitly mention 'Common Goals' or related terms (such as shared objectives, product goals, or OKRs). Alignment to goals is only tangential, referenced in statements like 'delivering value' and 'driving better outcomes', which are generic and not directly tied to the formal concept of Common Goals in Agile/DevOps context.\n\n- 'Conceptual Alignment' (4.650): There is moderate conceptual overlap; TDD is described as fostering accountability and collaboration, which are indirectly related to team alignment and goals. However, the primary focus is on the technical process, not on how TDD operationalizes or creates Common Goals per se.\n\n- 'Depth of Discussion' (4.400): The write-up explores the rationale and benefits of TDD with some depth, especially in quality and team culture, but does not link these to strategic or shared objectives, OKRs, or explicit mechanisms for goal alignment.\n\n- 'Intent/Purpose Fit' (4.950): The intent is to inform and advocate for TDD, which aligns somewhat with fostering effective teams and adaptability (subgoals of Common Goals), but itâ€™s clear that 'Common Goals' is not the main focus or intended takeaway for the reader.\n\n- 'Audience Alignment' (7.050): The target audience is practitioners in Agile and software development environments, which is somewhat consistent with the Common Goals category, but the angle is skill/process rather than alignment/strategy.\n\n- 'Signal-to-Noise Ratio' (7.170): The content is focused and relevant to its core topic (TDD), with little filler, but most of the signal pertains to TDD mechanics and quality, not Common Goals. Thus, the signal is strong for its own focus, but weak in service of this category.\n\n- 'Penalties': No penalties appliedâ€”there are no mentions of outdated practices, and the tone is professional and neutral.\n\nConsequently, this content is at best tertiary for the 'Common Goals' category: relevant only at a distance, as TDD can indirectly support team alignment, but the content does not address, frame, or deeply explore that connection.",
    "level": "Tertiary"
  },
  "Pragmatic Thinking": {
    "resourceId": "Test Driven Development",
    "category": "Pragmatic Thinking",
    "calculated_at": "2025-05-06T11:52:59",
    "ai_confidence": 72.07,
    "ai_mentions": 3.1,
    "ai_alignment": 7.6,
    "ai_depth": 7.9,
    "ai_intent": 7.6,
    "ai_audience": 7.2,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "1. Direct Mentions (3.1): The content never explicitly mentions 'Pragmatic Thinking' or uses the term directly. It references related concepts such as 'adaptability', 'responsiveness to change', and 'continuous improvement', but does not name the category or directly reference pragmatic problem-solving styles, hence the low score.\n\n2. Conceptual Alignment (7.6): The main ideas and purposeâ€”applying TDD as a practical, experience-informed disciplineâ€”align well with pragmatic thinking, especially the emphasis on â€˜real-world benefitsâ€™, â€˜qualityâ€™, and â€˜adaptabilityâ€™. However, specific ties to navigating complexity, dealing with real-world uncertainty, or integrating multiple frameworks (Agile, DevOps, Lean) are only partially implied, not deeply explored.\n\n3. Depth of Discussion (7.9): The discussion moves beyond just defining TDD and briefly describes its benefits and its alignment with Agile. It refers to quality, adaptation, maintainability, and stakeholder outcome, which are important to pragmatic approaches. However, there is no in-depth exploration of pragmatic techniques in complex or ambiguous situations, and no extended case studies/examples, which prevents a higher score.\n\n4. Intent / Purpose Fit (7.6): The primary intent is to inform and support practitioners in adopting a practical development methodology, which is well-targeted, but not explicitly framed as a 'pragmatic thinking' guide or playbook. The alignment is solid but not exclusive.\n\n5. Audience Alignment (7.2): The content is aimed at practitioners (developers, teams), which matches the audience for pragmatic thinkingâ€”but could be slightly stronger if the guidance was clearly directed at those facing complexity or in explicit Agile/DevOps contexts.\n\n6. Signal-to-Noise Ratio (7.9): The entire description is focused on TDD as a practical, results-oriented approach. There is no filler or tangential content. However, more specific connection to the broader pragmatic strategies or linking TDD to other frameworks would strengthen this.\n\nLEVEL: Secondary. TDD is an example of a pragmatic tool and the description highlights some pragmatic mindsets and benefits, but the content does not teach or exclusively focus on 'Pragmatic Thinking' as a holistic topic. Instead, it illustrates its principles through a closely related development practice.\n\nNo penalties apply, as there is no outdated information, no obsolete practices, and the tone is supportive and aligned with pragmatic ideals. Final confidence is weighted accordingly to the evidence.",
    "level": "Secondary",
    "reasoning_summary": "While the content doesnâ€™t directly mention 'Pragmatic Thinking', it aligns well with its principles by emphasising practical, experience-driven approaches like TDD. The focus on adaptability, quality, and real-world benefits reflects pragmatic mindsets, though it stops short of deeply exploring complexity or explicitly teaching pragmatic thinking. Overall, itâ€™s a strong secondary fit, illustrating pragmatic ideas through a related practice."
  },
  "Technical Mastery": {
    "resourceId": "Test Driven Development",
    "category": "Technical Mastery",
    "calculated_at": "2025-05-06T11:53:00",
    "ai_confidence": 86.12,
    "ai_mentions": 8.3,
    "ai_alignment": 9.5,
    "ai_depth": 8.7,
    "ai_intent": 8.8,
    "ai_audience": 8.2,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 86.0,
    "reasoning": "The content directly discusses Test Driven Development (TDD), a core technical practice recognized as central to software craftsmanship and Technical Mastery. \n\n(1) Mentions (8.3): TDD is explicitly referenced by name and described at the outset. Key terms such as 'automated tests,' 'refactoring,' and 'technical excellence' are used, aligning with the category. However, the term 'Technical Mastery' itself does not explicitly appear, so some points are held back.\n\n(2) Conceptual Alignment (9.5): The contentâ€™s main ideasâ€”the importance of TDD, integrating testing throughout development, supporting agility and technical excellenceâ€”are perfectly aligned with the core meaning of technical mastery, including code quality, maintainability, and engineering excellence.\n\n(3) Depth (8.7): While concise, the piece discusses both the mechanics (writing tests before code, reducing defects, enabling refactoring) and the broader impacts (mindset, culture, alignment with Agile, scalability, and organizational reliability). The detail is appropriate for a summary but not an in-depth treatise, hence not a full score.\n\n(4) Intent/Purpose Fit (8.8): The primary purpose is to inform and advocate for a key practice (TDD) explicitly linked to software engineering excellence, matching the intended purpose of the Technical Mastery category very closely.\n\n(5) Audience Alignment (8.2): The content is directed at practitioners interested in development quality and technical process improvement. There is some broader language referencing organizational outcomes, but it does not stray far from the technical audience.\n\n(6) Signal-to-Noise (8.6): The content is highly focused on TDD and its impact on software quality and culture. It stays on-topic with no noticeable tangents or filler, though its brief length means it cannot cover every facet.\n\nNo penalties were necessary; the content does not reference outdated or obsolete practices, maintains a constructive tone, and does not conflict with the framing of Technical Mastery.\n\nOverall, the material offers a well-structured summary and advocacy for TDD, making it a 'Primary' fit for Technical Mastery with very high confidence, but a slight distance from a perfect score due to its summary nature and lack of explicit category naming.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the Technical Mastery category, as it clearly explains Test Driven Developmentâ€”a key practice in software craftsmanship. It highlights both the practical steps and broader benefits, such as improved code quality and agility, making it highly relevant for technical audiences focused on engineering excellence. While concise and not naming the category directly, it strongly aligns with the intended purpose."
  },
  "Agile Strategy": {
    "resourceId": "Test Driven Development",
    "category": "Agile Strategy",
    "calculated_at": "2025-05-06T11:53:08",
    "ai_confidence": 38.475,
    "ai_mentions": 2.75,
    "ai_alignment": 4.35,
    "ai_depth": 4.4,
    "ai_intent": 4.215,
    "ai_audience": 5.095,
    "ai_signal": 4.83,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content primarily discusses Test Driven Development (TDD) as a technical practice, focusing on how writing tests first leads to better software quality, predictability, and adaptability. While it briefly references alignment with Agile principlesâ€”such as adaptability, collaboration, continuous improvement, and value deliveryâ€”it does not explore strategic implementation of Agile at an organisational level. \n\nDirect Mentions (2.750): The content uses the term 'Agile principles' once and alludes to concepts associated with Agile, but it does not directly name 'Agile Strategy' or discuss it explicitly. \n\nConceptual Alignment (4.350): There is some alignment through mentions of adaptability, collaboration, continuous improvement, and value delivery, but the main focus is on technical process improvement rather than the strategic integration of Agile in planning, decision-making, vision, or leadership. \n\nDepth (4.400): The discussion just touches on how TDD fits with Agile ideals; there is no substantive treatment of strategy, leadership, or organisational changeâ€”the exploration does not extend to case studies, measurement, or scaling methods. \n\nIntent (4.215): The purpose is to educate about TDD as a quality-oriented development technique, not about how to shape or execute Agile Strategy at a business or leadership level. There's a supportive nod to Agile principles, but it's tangential rather than central. \n\nAudience (5.095): The target audience appears to be developers and technical practitioners interested in engineering practices, rather than executives or strategists concerned with Agile transformation or organisational strategy, though the final paragraph briefly gestures at organisational benefits. \n\nSignal (4.830): The content is focused throughoutâ€”there is little fillerâ€”but its relevance to the category 'Agile Strategy' is weak as almost all discussion centers on TDD as a development methodology. \n\nNo penalties were applied as the information is current, supportive of Agile framing, and not satirical or critical in tone. \n\nOverall, while the content is tangentially linked to Agile through a discussion of TDD's alignment with Agile values, it falls well short of content typically classified as 'Agile Strategy.' It is technical, not strategic, and could only be referenced in a tertiary manner in the context of organisational Agile transformation.",
    "level": "Ignored"
  },
  "Behaviour Driven Development": {
    "resourceId": "Test Driven Development",
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-05-06T11:53:00",
    "ai_confidence": 16.282,
    "ai_mentions": 0.622,
    "ai_alignment": 1.024,
    "ai_depth": 1.185,
    "ai_intent": 2.044,
    "ai_audience": 4.178,
    "ai_signal": 2.789,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content exclusively discusses Test Driven Development (TDD), not Behaviour Driven Development (BDD). There are no direct mentions of BDD, its principles, collaboration between developers, testers, and business stakeholders in terms of user stories or acceptance criteria, nor any tools/frameworks unique to BDD. \n- Mentions (0.622): No explicit or implicit reference to BDD or its core language/concepts, only TDD.\n- Conceptual Alignment (1.024): While TDD and BDD are related, the content does not align with BDDâ€™s core focus on behavioral specifications, shared understanding, or business alignment; it centers on writing tests before coding.\n- Depth (1.185): The text provides moderate detail about TDD practices but nothing about BDD methods, practices, tools, or integration.\n- Intent (2.044): The purpose is informative and addresses improvement in software quality and process, but only via TDD. There are no intentions relevant to BDD.\n- Audience (4.178): The content targets software practitioners, similar to BDDâ€™s audience, which lifts this score slightly but remains generic.\n- Signal-to-Noise (2.789): The content is focused, but relevant only to TDD; almost all content is off-topic for BDD.\nNo penalties were applied as the content is not outdated nor critical, just focused elsewhere. Overall, the confidence in classifying this content under Behaviour Driven Development is extremely low, supported only by weak thematic overlap regarding quality and process.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "resourceId": "Test Driven Development",
    "category": "Scrum Team",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 12.88,
    "ai_mentions": 1.0,
    "ai_alignment": 1.6,
    "ai_depth": 1.5,
    "ai_intent": 2.1,
    "ai_audience": 2.7,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is entirely about Test Driven Development (TDD) as a software engineering practice and does not explicitly or implicitly reference the Scrum Team accountability, its structure, or related responsibilities as defined in the Scrum Guide. 'Teams' are mentioned generically, not specifically as Scrum Teams, and no part of the discussion touches on the unique aspects of Scrum Teams (e.g., self-management, cross-functionality, composition of Scrum Master, Product Owner, Developers). \n\n- Direct Mentions (1.0): The content never uses the term 'Scrum Team' or any direct references to the category. 'Teams' are mentioned, but only in a generic sense.\n- Conceptual Alignment (1.6): The content aligns at a very superficial levelâ€”TDD 'supports Agile principles,' but this is neither exclusive to Scrum nor does it engage with anything about the Scrum Team as an accountability.\n- Depth (1.5): No in-depth exploration or analysis of the Scrum Team concept occurs. The focus is solely on TDD methodology.\n- Intent (2.1): The intent is to inform about TDD and its benefits for software teams generally, not specifically Scrum Teams or their structure, purpose, or boundaries.\n- Audience (2.7): The main audience is developers and agile practitioners but not specifically those concerned with Scrum Team accountabilities.\n- Signal (2.2): The entire discussion remains focused on TDD and peripheral team effects; it is not off-topic for agile development but is off-topic for the Scrum Team category.\n\nNo penalties applied, as content is contemporary, not critical or satirical. The category relevance is at best tertiary: the only connection is that Scrum Teams may use TDD, but the content does not address the Scrum Team accountability, its structure, or its defined responsibilities within Scrum. The resulting confidence score appropriately reflects extremely low alignment.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "resourceId": "Test Driven Development",
    "category": "Daily Scrum",
    "calculated_at": "2025-05-06T11:53:03",
    "ai_confidence": 7.68,
    "ai_mentions": 0.0,
    "ai_alignment": 0.9,
    "ai_depth": 0.8,
    "ai_intent": 0.8,
    "ai_audience": 2.7,
    "ai_signal": 0.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is exclusively about Test Driven Development (TDD), a software engineering practice, and does not mention the Daily Scrum or any Scrum framework events. There are zero direct references to the Daily Scrum. On conceptual alignment, the core ideas are centered on automated testing, code quality, and Agile values, but not specifically on Scrum events, giving it a very low score with only a slight partial overlap due to Agile references. Depth of discussion is strong for TDD but entirely unrelated to the depth sought for Daily Scrum; thus, a low value is assigned. The intent focuses on advocacy and explanation of TDD, not on information about the Daily Scrum. The target audience is broader (software practitioners familiar with Agile, but not necessarily Scrum teams), so a slightly higher score here. Signal-to-noise is low since none of the content is relevant to Daily Scrum per the strict definition, hence a minimal score. There are no penalties applied since the content is neither outdated nor critical/satirical. Overall, the content is classified as tertiary at best for the 'Daily Scrum' category due to only tangential Agile mentions.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "Test Driven Development",
    "category": "Product Backlog",
    "calculated_at": "2025-05-06T11:53:07",
    "ai_confidence": 12.37,
    "ai_mentions": 0.4,
    "ai_alignment": 1.9,
    "ai_depth": 2.1,
    "ai_intent": 2.0,
    "ai_audience": 3.2,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses exclusively on the methodology and rationale behind Test Driven Development (TDD), which is a software development practice related to quality assurance and code design. \n\n- Direct Mentions (0.4): The phrase 'Product Backlog' is not mentioned at all. There is only a tangential reference to 'requirements,' without reference to backlog, user stories, prioritization, or Agile work items. \n\n- Conceptual Alignment (1.9): While TDD is often used within Agile environments where product backlogs exist, this content never connects TDD to the concept, purpose, or management of a Product Backlog. There is only indirect alignment via the mention of Agile principles, making the fit extremely weak. \n\n- Depth of Discussion (2.1): The depth is entirely around TDDâ€”its process, benefits, and mindset. No discussion occurs about backlog refinement, prioritization, grooming, user stories, or any other key backlog-related topic. \n\n- Intent / Purpose Fit (2.0): The main purpose is to inform and advocate for TDD, not to educate or support backlog management. The intent does not overlap except perhaps for tangential references to 'requirements,' which is not synonymous with backlog items. \n\n- Audience Alignment (3.2): The likely audience is Agile practitioners or developers interested in quality processes (possible overlap), but the topic is only a distant one for someone seeking Product Backlog knowledge. \n\n- Signal-to-Noise Ratio (2.3): The entire content is focused and relevant to TDD, but this is noise relative to the Product Backlog topic. \n\nNo penalties were applied, as the content is contemporary and not satirical or critical. In summary, this piece would only be very loosely relevant in a tertiary senseâ€”if at allâ€”to the Product Backlog topic, as TDD and backlog management can coexist in Agile but serve different functions. The low confidence score reflects this minimal association.",
    "level": "Ignored"
  },
  "Release Management": {
    "resourceId": "Test Driven Development",
    "category": "Release Management",
    "calculated_at": "2025-05-06T11:53:13",
    "ai_confidence": 10.44,
    "ai_mentions": 0.2,
    "ai_alignment": 1.0,
    "ai_depth": 1.3,
    "ai_intent": 0.9,
    "ai_audience": 3.5,
    "ai_signal": 1.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content solely focuses on Test Driven Development (TDD), a software development approach emphasizing writing tests before code. While TDD is loosely related to software quality and maintainability, the article does not mention Release Management explicitly or implicitly discuss its processes, strategies, or goals. Key release management themesâ€”such as versioning, deployment orchestration, release scheduling, CI/CD, risk mitigation in releases, or stakeholder coordinationâ€”are entirely absent. The depth is focused exclusively on the TDD practice, exploring its impact on code quality, team mindset, and technical excellence but not on release governance or planning. The audience is primarily developers/practitioners interested in development methodology, not release managers or those concerned with release pipelines. Signal-to-noise is modest; all content is relevant to TDD, but not to the Release Management category. No outdated practices or negative tone are present, so no penalties apply. This is classified as 'Tertiary' since TDD is tangential at best to release managementâ€”potentially providing groundwork for better future releases, but that is not explored or suggested here. The final confidence, reflecting near-total misalignment, is very low per the weighted calculation.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "resourceId": "Test Driven Development",
    "category": "Engineering Practices",
    "calculated_at": "2025-05-06T11:53:18",
    "ai_confidence": 92.26,
    "ai_mentions": 9.2,
    "ai_alignment": 9.85,
    "ai_depth": 9.65,
    "ai_intent": 9.3,
    "ai_audience": 8.7,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 92.0,
    "reasoning": "The content explicitly focuses on Test Driven Development (TDD), a core engineering practice, referencing it repeatedly and explaining its process in detail (mentions: 9.2). Its main ideas perfectly align with the category, emphasizing automation, test-first methodology, and links to Agile principles (alignment: 9.85). The discussion explores benefits (quality, accountability, adaptability) and systemic impact in substantial depth, including team culture, technical excellence, adaptability, maintainability, and stakeholder value (depth: 9.65). The primary intent is highly informativeâ€”educating practitioners on why and how TDD drives software quality (intent: 9.3). Content targets technical readers (developers, Agile teams), though could be very slightly more specialized for highly advanced practitioners (audience: 8.7). Nearly all content is on-topic and relevant with minimal filler (signal: 9.1). No penalties apply; the discussion is up-to-date and supportive. This is a textbook Primary example of the 'Engineering Practices' category.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the 'Engineering Practices' category, as it thoroughly explains Test Driven Development (TDD), its process, and its benefits. Itâ€™s highly informative, aimed at technical audiences, and directly addresses how TDD supports software quality and Agile principles. The discussion is focused, relevant, and provides deep insights into both the technical and cultural aspects of TDD in engineering teams."
  },
  "Technical Debt": {
    "resourceId": "Test Driven Development",
    "category": "Technical Debt",
    "calculated_at": "2025-05-06T11:53:02",
    "ai_confidence": 38.26,
    "ai_mentions": 0.2,
    "ai_alignment": 3.6,
    "ai_depth": 3.3,
    "ai_intent": 3.8,
    "ai_audience": 4.2,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content does not directly mention 'technical debt' nor does it explicitly discuss the management, identification, or remediation of suboptimal code or architectural decisions as defined in the category. The primary focus is on explaining Test Driven Development (TDD), its process, and its benefits for code quality, team culture, and sustainable development. Although TDD can contribute to maintainability and reduce the accumulation of technical debt as a secondary effect, the content does not tie this relationship explicitly or in depth. There are subtle, indirect conceptual alignmentsâ€”such as encouragement of maintainable, scalable code, easier refactoring, and the fostering of technical excellenceâ€”that are relevant to technical debt prevention but not its management, consequences, or measurement. The audience seems to be practitioners interested in improving code quality and workflow, which overlaps somewhat with the technical debt audience, but the core purpose and content remain focused on TDD as a practice rather than on technical debt as a category. Signal-to-noise is decent, with little to no off-topic filler, but the signal toward technical debt is weak. Given these factors, the confidence score is low, and the classification as 'Technical Debt' can only be considered tertiary at best.",
    "level": "Ignored"
  },
  "Organisational Agility": {
    "resourceId": "Test Driven Development",
    "category": "Organisational Agility",
    "calculated_at": "2025-05-06T11:53:14",
    "ai_confidence": 71.63,
    "ai_mentions": 2.7,
    "ai_alignment": 7.8,
    "ai_depth": 7.5,
    "ai_intent": 7.2,
    "ai_audience": 7.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "Mentions (2.7): The content never directly names 'Organisational Agility' and only indirectly references Agile principles, so direct mention is low but not absent due to references like â€˜aligns well with Agile principlesâ€™. Alignment (7.8): While the core topic is TDDâ€”a development methodologyâ€”the content links TDD to agile values such as responsiveness, continuous improvement, and adaptability, which are conceptually aligned with organisational agility. Some references to organisational outcomes like culture and trust further support alignment, but its central focus remains technical quality. Depth (7.5): The piece moves beyond a process tutorial and discusses cultural impact, adaptability, collaboration, and stakeholder outcomes. However, it does not comprehensively address full organisational transformation, limiting the depth versus category definition. Intent (7.2): The purpose is to advocate and explain TDD in a way that highlights broader agile-compatible benefits, fitting the categoryâ€™s spirit but remaining primarily a TDD piece. Audience (7.0): The primary audience appears to be technical (software engineers, quality advocates), but since it references organisational culture and stakeholder trust, it is also somewhat relevant for leaders interested in agility. Signal (7.1): Nearly all content is focused on TDDâ€™s value within an agile or responsive culture, with very little off-topic or filler; a slightly higher signal could be reached if more direct discussion of specific organisational agility frameworks occurred. No penalties are applied as the tone is supportive, forward-looking, and does not reference obsolete practices. Level: Secondaryâ€”TDD is presented as a supporting practice within the broad set of organisational agility enablers but is not the primary thematic anchor.",
    "level": "Secondary",
    "reasoning_summary": "This content is a good secondary fit for the Organisational Agility category. While it mainly focuses on TDD, it thoughtfully connects TDD to agile values like adaptability and continuous improvement. The discussion of culture and trust adds relevance, but the central theme remains technical. Itâ€™s most useful for those interested in how technical practices support broader agility, rather than as a core resource on organisational agility itself."
  },
  "Time to Market": {
    "resourceId": "Test Driven Development",
    "category": "Time to Market",
    "calculated_at": "2025-05-06T11:53:03",
    "ai_confidence": 31.41,
    "ai_mentions": 0.6,
    "ai_alignment": 3.5,
    "ai_depth": 3.3,
    "ai_intent": 2.9,
    "ai_audience": 6.5,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "The content provides a focused overview of Test Driven Development (TDD) as a software engineering approach. Direct mentions (0.6): The category 'Time to Market' is not explicitly named or directly referenced, nor are key Time to Market metrics or practices mentioned. Conceptual alignment (3.5): While TDD, by ensuring quality and fostering a culture of continuous improvement, can indirectly contribute to faster, more reliable delivery, the content does not connect TDD specifically to measuring or improving Time to Market, nor discuss value delivery speed explicitly. Depth (3.3): The discussion is thorough in terms of TDD's quality benefits and process, but is not deep regarding Time to Market concepts â€” there's no discussion of lead/cycle time, market delivery cadence, or concrete process acceleration. Intent (2.9): The intent is to explain and advocate for TDD as a methodology to improve software quality and maintainability, not to educate on or measure Time to Market. Audience (6.5): The material targets software development teams and technical practitioners, overlapping somewhat with the typical audience for Time to Market discussions but not exclusively so. Signal (6.4): The content is focused and mostly relevant to its topic (TDD), with minimal tangential or filler material, but little of it is relevant signal for Time to Market. No penalties for tone, outdatedness, or contradictions. Overall, the connection between TDD and Time to Market is only inferential and indirect â€” the content might be referenced in a Time to Market conversation as supportive or enabling context but does not address the measurement, strategy, or impact of Time to Market in line with the classification definition. Thus, this is a Tertiary level fit.",
    "level": "Ignored"
  },
  "Lean": {
    "resourceId": "Test Driven Development",
    "category": "Lean",
    "calculated_at": "2025-05-06T11:53:06",
    "ai_confidence": 21.471,
    "ai_mentions": 0.6,
    "ai_alignment": 2.9,
    "ai_depth": 3.1,
    "ai_intent": 3.4,
    "ai_audience": 6.2,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content is focused exclusively on Test Driven Development (TDD), a software quality practice most closely associated with Agile methodologies. While TDD and Lean can be related (e.g., via shared concepts like continuous improvement and value delivery), Lean itself is not mentioned at all, nor are its unique frameworks, tools, or language (such as waste reduction, value stream mapping, 5S, JIT, Kanban, or Kaizen). The conceptual alignment score is low as TDD's themes overlap incidentally (continuous improvement, value, quality), but the material does not explicitly or substantially link these ideas to Lean principles or history. The depth of discussion is moderate regarding TDD, but not with respect to Lean. Intent/purpose is tangential: while fostering quality and improvement, it does not address Lean's core aim of waste elimination grounded in the Toyota Production System. Audience alignment is higherâ€”software practitioners interested in TDD may also be Lean's audience in a software context, but not universally. The signal-to-noise ratio is high (strong focus, little filler), but ultimately the content fits Lean only in a tertiary, highly indirect manner. No penalties are applied as the content is current, objective, and does not contradict Lean, but its inclusion in Lean would be tangential and somewhat misleading.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "resourceId": "Test Driven Development",
    "category": "Systems Thinking",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 20.55,
    "ai_mentions": 0.4,
    "ai_alignment": 2.1,
    "ai_depth": 2.0,
    "ai_intent": 1.5,
    "ai_audience": 7.5,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), an engineering practice within software development, without any direct reference or thorough discussion of Systems Thinking principles. \n\n1. Mentions (0.4): There are no explicit mentions of 'Systems Thinking' or its foundational concepts (such as feedback loops, system mapping, or interdependencies); the only remotely related phrases are 'systemic practice' and 'organisation,' but these don't fit the Systems Thinking context as defined.\n\n2. Conceptual Alignment (2.1): While TDD could be considered a component of a broader systems approach if explicitly discussed in that light, this content presents TDD as a quality practice aligned with Agile and focused on coding outcomes â€” not on holistic, interconnected system behaviour, mapping, or analysing dynamics. The term 'systemic practice' is used, but not in the explicit sense required by Systems Thinking.\n\n3. Depth (2.0): The discussion is deep about TDD but never extends into Systems Thinking frameworks, tools (e.g., causal loops, system dynamics), or principles (e.g., feedback loops, interdependencies). There is no mapping or analysis of complex systems, just focus on software quality benefits.\n\n4. Intent (1.5): The clear intent is to explain and advocate for TDD; Systems Thinking is not the purpose or even a substantial sub-thread.\n\n5. Audience (7.5): The content targets technical practitioners (developers, software teams), which partly aligns with one subset of the Systems Thinking audience (practitioners in organisations), but misses leaders or strategists exploring organisational systemic change.\n\n6. Signal (2.0): The discussion is tightly focused on TDD, delivering high signal for that topic, but nearly all content is off-topic from the perspective of Systems Thinking.\n\nNo penalties are applied as the content is recent, neutral, and not critical of the Systems Thinking approach. Overall, the confidence score is very low, and 'Tertiary' accurately reflects an extremely indirect or incidental connection.",
    "level": "Ignored"
  },
  "Agentic Agility": {
    "resourceId": "Test Driven Development",
    "category": "Agentic Agility",
    "calculated_at": "2025-05-06T11:53:19",
    "ai_confidence": 25.865,
    "ai_mentions": 0.5,
    "ai_alignment": 3.4,
    "ai_depth": 2.8,
    "ai_intent": 3.1,
    "ai_audience": 6.0,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content focuses on the methodology and benefits of Test Driven Development (TDD), describing it as a practice that leads to better software quality, accountability, and adaptability. While there are surface-level thematic connections to aspects important to Agentic Agilityâ€”such as autonomy, quality, and adaptabilityâ€”the content never directly mentions or explicitly explores the concept of agency, agentic agility, or related constructs. \n\nDirect Mentions: (0.5/10) The phrase 'agentic agility' and even terms like 'agency' or 'intentional/adaptive action' are entirely absent. The closest conceptual overlap is accountability, but this is incidental, not central.\n\nConceptual Alignment: (3.4/10) There is partial overlap, as TDD does foster adaptability and accountabilityâ€”features that contribute to agentic environments. Yet, the focus is on technique/process, not the underlying agentic properties or the distinction between human and AI agency, self-management, or true intentionality.\n\nDepth of Discussion: (2.8/10) The depth is focused entirely on TDD itselfâ€”tools, habits, and outcomesâ€”not the mechanisms of agentic action, constraints in agility, or the cultivation of agency within teams. Any link to Agentic Agility remains background context.\n\nIntent / Purpose Fit: (3.1/10) The intent is to educate about TDD, its benefits, and its alignment with Agile. It does not aim to explicate or enhance the understanding of Agentic Agility.\n\nAudience Alignment: (6.0/10) The primary audience (technical practitioners in Agile contexts) overlaps with those interested in Agentic Agility; however, this is coincidental and not by design.\n\nSignal-to-Noise Ratio: (7.5/10) The content is highly relevant and on-task for TDD, with little unrelated filler, though not focused on Agentic Agility, so its relevance to the target category is lower.\n\nNo penalties were applied, as the content is not outdated, satirical, or oppositional. \n\nIn summary, the content offers minimal linkage to Agentic Agility, mentioning only tangential concepts that might support a more agentic organization, but falling far short of the in-depth, intentional discussion required for even secondary categorization.",
    "level": "Ignored"
  },
  "Lean Startup": {
    "resourceId": "Test Driven Development",
    "category": "Lean Startup",
    "calculated_at": "2025-05-06T11:53:13",
    "ai_confidence": 4.43,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 1.4,
    "ai_intent": 0.7,
    "ai_audience": 0.6,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 4.0,
    "reasoning": "The content focuses entirely on Test Driven Development (TDD), a software engineering methodology centered around writing tests before code. There is no direct mention of Lean Startup, Lean principles, or any of the key Lean Startup concepts such as MVP, Build-Measure-Learn, validated learning, rapid experimentation, customer development, or Lean metrics. Alignment with Lean Startup is very weak; while both TDD and Lean Startup value learning and iterativity, the content narrowly applies this to software quality and technical practices, not business hypothesis testing, market validation, or iterative product-market fit. Depth is minimal with respect to Lean Startup, as it does not discuss or even allude to Lean Startup methodology and remains focused on TDDâ€™s implications for code and Agile alignment. The purpose of the content is purely educational on TDD, not Lean Startup, indicating low intent fit. The audience is technical practitioners (developers), not entrepreneurs or innovators concerned with startup methodologies. The signal-to-noise ratio, in the context of Lean Startup, is low; nearly all content is off-topic for this category. No penalties are applied, as the content is not outdated nor actively critical of Lean Startupâ€”it is simply unrelated. Therefore, classification under Lean Startup is at a tertiary level, with an extremely low confidence score per the weighted formula.",
    "level": "Ignored"
  },
  "Test First Development": {
    "resourceId": "Test Driven Development",
    "category": "Test First Development",
    "calculated_at": "2025-05-06T11:53:18",
    "ai_confidence": 81.5,
    "ai_mentions": 8.2,
    "ai_alignment": 8.7,
    "ai_depth": 8.4,
    "ai_intent": 8.3,
    "ai_audience": 8.0,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "This content directly discusses Test Driven Development (TDD), explicitly mentioning the test-first approach and its influence on software quality and design. \n\n1. Mentions (8.2): TDD is directly named throughout, and the key concept of writing tests before code (core to 'Test First Development') is repeatedly referenced, but the specific label 'Test First Development' is not used verbatim, slightly reducing the score.\n\n2. Conceptual Alignment (8.7): The main ideasâ€”writing tests before code, using tests to define requirements, fostering quality, and supporting Agile principlesâ€”are strongly aligned with the category's definition and key topics.\n\n3. Depth (8.4): The content provides a multi-dimensional exploration of TDD, covering its principles, long-term cultural impact, code maintainability, defect prevention, collaboration, and technical excellence, moving beyond basic definitions.\n\n4. Intent (8.3): The primary intent is informative and positive about using TDD as a means to deliver value, quality, and agilityâ€”well-aligned with the Test First Development category. There is no evidence of a tangential or off-purpose focus.\n\n5. Audience (8.0): The article targets practitioners, technical teams, and leaders invested in development quality and practicesâ€”matching the intended audience for Test First Development guidance, though not specifically mentioning designers or product owners.\n\n6. Signal (8.1): The discussion is focused and coherent, sticking closely to TDD as a Test First approach with little digression or filler.\n\nNo penalties are applied: The content is up-to-date, and the tone is fully supportive. \n\nSince TDD is presented as the main subject and as a primary example of Test First Development, with deep alignment and intent, but without broader coverage (e.g., of manual test first, ATDD, or explicit cross-role collaboration), this resource is classified as 'Primary' for the category. The final confidence score of 81.5 precisely matches the content's strong but not exhaustive alignment with the full spectrum of Test First Development.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong fit for the Test First Development category, as it thoroughly explores Test Driven Development (TDD) and its core principles, such as writing tests before code and improving software quality. While it doesnâ€™t cover every aspect of the category, its focus, depth, and relevance make it a primary resource for those interested in test-first approaches. The content is well-aligned with the needs of technical teams and practitioners."
  },
  "Cycle Time": {
    "resourceId": "Test Driven Development",
    "category": "Cycle Time",
    "calculated_at": "2025-05-06T11:53:03",
    "ai_confidence": 16.328,
    "ai_mentions": 0.4,
    "ai_alignment": 1.0,
    "ai_depth": 1.3,
    "ai_intent": 2.1,
    "ai_audience": 5.2,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The provided content is a focused discussion about Test Driven Development (TDD), emphasizing its benefits on software quality, maintainability, and alignment with Agile principles. \n\n- **Direct Mentions (0.4):** The article never explicitly mentions 'Cycle Time' or references its measurement or implications. There is only a faint, indirect relationshipâ€”one could infer that TDD might impact cycle time, but this is not articulated.\n- **Conceptual Alignment (1.0):** The content does not align conceptually with Cycle Time as defined. It discusses development practices and quality, not measuring the time to complete units of work or workflow efficiency.\n- **Depth of Discussion (1.3):** The article goes into depth about TDD but not at all about Cycle Time. Any connection to Cycle Time is highly tangential and not explored; depth here only accounts for a minor, possible indirect impact TDD might have on workflow speed.\n- **Intent/Purpose Fit (2.1):** The main purpose is to promote and explain TDDâ€”not Cycle Time. This is slightly relevant in that process improvements might affect efficiency, but it is not intentional.\n- **Audience Alignment (5.2):** The piece is directed at technical teams and practitioners working in Agile, which partially overlaps with the audience interested in Cycle Time but is not specifically targeting those concerned with workflow metrics.\n- **Signal-to-Noise Ratio (2.3):** The content is focused, but the signal relating to Cycle Time is extremely low.\n\nNo penalties were applied as the content is current, aligned with Agile practices, and does not contradict the spirit of the category. Final confidence is very low (16.328), appropriately reflecting that the content only marginally touches on the Cycle Time category, if at all. The classification level is 'Tertiary' as Cycle Time is at best an indirect, background implication of the main topic.",
    "level": "Ignored"
  },
  "Coaching": {
    "resourceId": "Test Driven Development",
    "category": "Coaching",
    "calculated_at": "2025-05-06T11:53:59",
    "ai_confidence": 23.885,
    "ai_mentions": 0.3,
    "ai_alignment": 3.2,
    "ai_depth": 2.9,
    "ai_intent": 2.1,
    "ai_audience": 7.2,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content focuses on explaining the concept, purpose, and benefits of Test Driven Development (TDD), describing its practices, cultural impact, and alignment with Agile values. However, it makes no direct mention of coaching or anything closely relatedâ€”there is zero reference to coaching, mentoring, facilitation, or development of individuals through guidance. The alignment score is low because while TDD may incidentally foster certain team habits (collaboration, continuous improvement), the article does not address coaching as a process or discuss any roles or techniques typical of the coaching category. The depth of discussion is modest (focused solely on TDD and its procedural/cultural implicationsâ€”not coaching methods or frameworks). The intent is to inform about TDD, not about coaching or supporting individual/team development via coaching principles, hence the low intent score. Audience alignment is higher, since both TDD practitioners and coaching audiences may overlap (e.g., Agile teams), but the main focus is technical practitioners, not specifically those interested in coaching. The signal is reasonable, as the content does not go off-topicâ€”it remains relevant to TDD throughout, with minimal filler. No penalties apply as the content is current and not contradictory or undermining to coaching. Overall, the evidence for a primary or even secondary match to Coaching is very weak: if coaching at all, only peripherally through references to 'culture' and 'collaboration.' As such, the 'Tertiary' level is appropriate, and the confidence score remains low and proportionate to the evident lack of category fit.",
    "level": "Ignored"
  },
  "Miscellaneous": {
    "resourceId": "Test Driven Development",
    "category": "Miscellaneous",
    "calculated_at": "2025-05-06T11:53:19",
    "ai_confidence": 13.924,
    "ai_mentions": 1.2,
    "ai_alignment": 2.9,
    "ai_depth": 3.0,
    "ai_intent": 2.2,
    "ai_audience": 2.1,
    "ai_signal": 1.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content directly discusses Test Driven Development (TDD), a recognized practice in software development. It explicitly connects TDD to Agile principles, noting its alignment with values like collaboration, adaptability, technical excellence, and responsiveness to change. The main themes and terminology (e.g., 'Agile principles', 'continuous improvement', 'test coverage', 'quality') are rooted in well-established frameworks, specifically Agile, and the piece offers actionable rationales and expected outcomes for adopting TDD, which disqualifies it from being considered 'Miscellaneous' except at the furthest periphery. On scoring: 'Direct Mentions' is low (1.2) because 'Miscellaneous' is never named or suggested; 'Conceptual Alignment' (2.9) and 'Depth of Discussion' (3.0) are also low, since the content is specifically about TDD and its philosophy, not an undefined or catch-all topic; 'Intent' (2.2) and 'Audience' (2.1) scores reflect that the content is tailored to practitioners or teams interested in established software development practices; 'Signal' (1.8) is low, as almost all the content pertains to TDD's role within recognized frameworks, leaving minimal 'miscellaneous' noise. No penalties were applied as the tone is neutral and content is not outdated. The confidence score is low (13.924), reflecting that this piece is not a strong fit for 'Miscellaneous' by any dimension, and at best could only be mapped there as a last resort if more direct categories were unavailable. This justifies a 'Tertiary' level.",
    "level": "Ignored"
  },
  "Decision Theory": {
    "resourceId": "Test Driven Development",
    "category": "Decision Theory",
    "calculated_at": "2025-05-06T11:54:03",
    "ai_confidence": 9.45,
    "ai_mentions": 0.3,
    "ai_alignment": 0.5,
    "ai_depth": 0.5,
    "ai_intent": 0.5,
    "ai_audience": 2.1,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content is focused exclusively on Test Driven Development (TDD) as a software engineering practice, highlighting automated testing as a means for better code quality and team dynamics. \n\n- Direct Mentions (0.3): Decision Theory is not referenced at all, nor are any of its direct concepts (probability, heuristics, behavioural economics, etc.) explicitly discussed. The closest topical mention is 'decision' in general, which does not connect to the academic field.\n\n- Conceptual Alignment (0.5): There are only very indirect connections. While 'driving better outcomes' and 'making design choices' could tangentially relate to decision-making, the content never discusses uncertainty, risk, probability, heuristics, or frameworks for making decisions. The emphasis is technical implementation, not on theoretical principles of decision-making.\n\n- Depth (0.5): The discussion centers on the mechanics and cultural benefits of TDD, not on decision frameworks, heuristics, or probabilistic reasoning.\n\n- Intent (0.5): The purpose is to inform and advocate for using TDD for software quality, rather than to educate about or apply decision theory principles.\n\n- Audience Alignment (2.1): The audience is software practitioners interested in quality/development, not researchers, strategists, or those studying decision theory. There is only minimal overlap in that agile practitioners may be peripherally interested in decision-theoretic concepts.\n\n- Signal-to-Noise (1.0): The content is highly focused on TDD, but that focus is not relevant to decision theory.\n\nNo penalties are applied as the content is current, not satirical, and does not reference any outdated practices. \n\nOverall, the confidence score is extremely low and the category fit is tertiary: nearly all key topics for Decision Theory are absent, and there is no analytical or conceptual bridge between TDD and decision-making under uncertainty.",
    "level": "Ignored"
  },
  "Digital Transformation": {
    "resourceId": "Test Driven Development",
    "category": "Digital Transformation",
    "calculated_at": "2025-05-06T11:53:02",
    "ai_confidence": 26.78,
    "ai_mentions": 0.3,
    "ai_alignment": 2.9,
    "ai_depth": 3.15,
    "ai_intent": 2.55,
    "ai_audience": 3.2,
    "ai_signal": 3.45,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content focuses nearly exclusively on Test Driven Development (TDD) as a software engineering practice, highlighting its quality benefits, relationship to Agile, and technical excellence. \n\n1. Mentions (0.30): The term 'Digital Transformation' does not appear, nor do synonymous or directly related phrases. TDD's contextual relevance is only loosely connected to digital transformation as a broader theme.\n\n2. Alignment (2.90): TDD contributes to code quality, reliability, and maintainabilityâ€”which can be components of an organization's transformation towards higher technical standards. However, the piece does not discuss the strategic adoption or integration of digital technologies for broader transformational outcomes, nor does it address agility at the organizational level, customer engagement, or operational transformation through digital tools.\n\n3. Depth (3.15): The discussion offers some substantive detail about TDD's practice, benefits, and cultural effects within teams, but it does not extend into matters of organizational strategy, change management, technology integration, or the metrics and frameworks used in the measurement of digital transformation. The discussion is strong on TDD but not on transformation.\n\n4. Intent (2.55): The article aims to advocate for TDD as a practice for software teams, not to guide or inform strategic digital transformation initiatives. Any connection to the category is incidental rather than central.\n\n5. Audience (3.20): The content is targeted at developers, technical teams, and those focused on software craftsmanship, not the executives or strategists responsible for planning and leading digital transformation initiatives. There is a small overlap in audience as tech leads or engineering managers engaged in both.\n\n6. Signal (3.45): The discussion is focused and relevantâ€”but solely to TDD. None of the main subtopics directly address digital transformation at the organizational level, making the actual 'signal' for this category quite low compared to noise for this classification purpose.\n\nNo penalties are applied as the discussion is neither outdated nor contradictory to the category; it simply misaligns in scope. Overall, this resource is only tangentially, and not meaningfully, relevant to Digital Transformation; its level is Tertiary.",
    "level": "Ignored"
  },
  "Technical Leadership": {
    "resourceId": "Test Driven Development",
    "category": "Technical Leadership",
    "calculated_at": "2025-05-06T11:53:02",
    "ai_confidence": 71.953,
    "ai_mentions": 2.7,
    "ai_alignment": 7.4,
    "ai_depth": 7.1,
    "ai_intent": 7.3,
    "ai_audience": 8.2,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 72.0,
    "reasoning": "The content is focused on Test Driven Development (TDD), which is a technical practice rather than explicitly on technical leadership. For 'Direct Mentions,' the category (technical leadership) is not directly named, and language is primarily focused on TDD and its values/practices (score: 2.7). For 'Conceptual Alignment,' there is moderate alignment: the text discusses fostering a culture of quality, continuous improvement, collaboration, and technical excellence, which are all relevant to technical leadership, but it stops short of explicitly linking TDD to the roles or responsibilities of a technical leader (score: 7.4). 'Depth of Discussion' is substantial about TDD's benefits and Agile alignment, offering a few deeper reflections on culture and adaptability, but does not thoroughly cover leadership actions or challenges relating to TDD (score: 7.1). On 'Intent,' the main purpose is informative about TDD and its broader benefits, with clear relevance to those in or aspiring to technical leadership roles within Agile environments (score: 7.3). For 'Audience Alignment,' the intended reader is likely a developer or team member, but many technical leaders would value this content too (score: 8.2). Finally, the 'Signal-to-Noise Ratio' is strong, with all content being focused and relevant to team technical practices in a leadership-relevant context (score: 8.0). No penalties are applied: the tone is neutral, content is current, and thereâ€™s no outdated methodology or direct contradiction. Overall, while the document is not â€˜primarilyâ€™ about technical leadership, it is very relevant and supportive, justifying the 'Secondary' level.",
    "level": "Secondary",
    "reasoning_summary": "This content primarily explores Test Driven Development, focusing on its practices and benefits rather than directly addressing technical leadership. While it highlights themes like quality, collaboration, and continuous improvementâ€”important to leadersâ€”it doesnâ€™t explicitly connect TDD to leadership roles. The material is highly relevant for technical leaders but serves more as supportive, secondary content for this category."
  },
  "Employee Engagement": {
    "resourceId": "Test Driven Development",
    "category": "Employee Engagement",
    "calculated_at": "2025-05-06T11:53:02",
    "ai_confidence": 18.863,
    "ai_mentions": 0.7,
    "ai_alignment": 2.9,
    "ai_depth": 2.4,
    "ai_intent": 2.1,
    "ai_audience": 5.0,
    "ai_signal": 3.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses explicitly on Test Driven Development (TDD), a technical software engineering practice. \n\n1. **Direct Mentions (0.7):** The term 'employee engagement' is not mentioned, nor are any of its synonyms. The only obscure connection is the brief phrase 'culture of quality and accountability,' which is not specific to engagement.\n\n2. **Conceptual Alignment (2.9):** The content marginally touches upon social or psychological concepts, such as team adaptability, culture of reliability, and collaboration, but these are clearly in the service of software quality, not engagement per se. No direct reference is made to intrinsic or extrinsic motivation, engagement measurement, recognition, or other listed topics.\n\n3. **Depth of Discussion (2.4):** While the content deeply discusses TDD, the aspects relevant to Employee Engagement (such as culture, collaboration) are mentioned only in passing. There is no thorough exploration of engagement principles or strategies.\n\n4. **Intent / Purpose Fit (2.1):** The primary intent is to inform about TDDâ€™s benefits for software quality. While there is minor overlap in ideas like team mindset and culture, the purpose does not align with motivating or committing employees per the category definition.\n\n5. **Audience Alignment (5.0):** The content targets software practitioners, who occasionally overlap with the audience interested in employee engagement, but the engagement aspect is peripheral, not central.\n\n6. **Signal-to-Noise Ratio (3.8):** Most of the content is relevant to TDD, not Employee Engagement. Only a small fraction briefly touches on cultural or collaborative benefits, resulting in more â€˜noiseâ€™ relative to the target category. \n\nNo penalties were applied as the content is current, on-tone, and does not contradict the category. \n\nOverall, the match to Employee Engagement is weak and only tertiary at bestâ€”it provides almost none of the specifically required discussion on motivation, commitment, feedback, recognition, growth, or measurement.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "resourceId": "Test Driven Development",
    "category": "Frequent Releases",
    "calculated_at": "2025-05-06T11:53:03",
    "ai_confidence": 25.21,
    "ai_mentions": 0.75,
    "ai_alignment": 2.25,
    "ai_depth": 2.1,
    "ai_intent": 2.9,
    "ai_audience": 7.2,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "Direct Mentions (0.75): The content does not explicitly mention frequent releases, continuous delivery, DevOps, CI/CD, or releasing practices. Its only indirect connection is referencing agile principles, but nowhere does it invoke release-related terminology. \n\nConceptual Alignment (2.25): Test Driven Development (TDD) is a quality and development discipline. While TDD can be one useful enabler for safer, faster releases (since rapid validation can support continuous delivery), none of the main core ideas discuss incrementality of releases, user feedback cycles, or release automation. Thus, the overlap is tangential at best.\n\nDepth (2.1): The depth is focused squarely on TDD's practice, rationale, and benefits, rather than any exploration of release strategies or processes. There's some mention of agility and adaptability, but not related to pipelines or delivery frequency.\n\nIntent/Purpose Fit (2.9): The main purpose is to inform about TDD, its role in quality and technical excellence, not about frequent releases. Though tangentially supportive to a culture of continuous delivery, it is not the primary intent.\n\nAudience Alignment (7.2): The presumed reader is a developer, tester, or technical team member â€” the same audience that cares about frequent releases. However, the content might also appeal to technical managers or anyone interested in quality, showing only partial overlap, not complete.\n\nSignal-to-Noise (7.7): The signal is high for TDD, but nearly all content is off-topic for 'Frequent Releases.' There's little tangential or filler discussion, but its focus is fundamentally about something else, hurting its signal with respect to this particular category.\n\nNo penalties applied: The content is up-to-date, not critical or satirical, and tone aligns with modern software practices, so no deductions are appropriate.\n\nLevel: Tertiary â€” TDD is an enabling practice for agility and quality, which can support frequent releases, but in this piece, that connection is not drawn explicitly or in depth. Its inclusion under 'Frequent Releases' would be peripheral and likely confusing unless specifically reframed for that context.",
    "level": "Ignored"
  },
  "Agile Planning": {
    "resourceId": "Test Driven Development",
    "category": "Agile Planning",
    "calculated_at": "2025-05-06T11:53:03",
    "ai_confidence": 49.525,
    "ai_mentions": 2.5,
    "ai_alignment": 5.9,
    "ai_depth": 5.7,
    "ai_intent": 6.1,
    "ai_audience": 8.0,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 50.0,
    "reasoning": "The content is primarily focused on Test Driven Development (TDD) as a software development practice. \n\n1. **Direct Mentions (2.5):** There are no explicit mentions of 'Agile Planning' or direct terminology from the category. TDD is discussed in the context of agile principles, but the category name or specific Agile Planning terminology (e.g., user stories, sprints, backlog refinement) is not present.\n\n2. **Conceptual Alignment (5.9):** The content references Agile principles and acknowledges that TDD aligns with agility, collaboration, adaptability, and continuous improvement. However, Agile Planning as a set of practices (focusing on how work is planned, structured, and adjusted) is not the center of the discussionâ€”TDD is positioned as a technical discipline that can support iterative development and adaptability, which is conceptually adjacent but not wholly aligned.\n\n3. **Depth of Discussion (5.7):** The depth is moderate in terms of discussing how TDD relates to agile principles like adaptability and continuous improvement, but the core of the content stays on TDD itself (test-first, quality, accountability). Nuances of Agile Planning techniques, frameworks, or planning ceremonies are not discussed.\n\n4. **Intent / Purpose Fit (6.1):** The intent is to inform about TDD and its benefits, with some connections to agile culture and principles. It is not specifically about planning processes, but touches on concepts relevant to agility and adaptability, making the alignment tangentially supportive at best.\n\n5. **Audience Alignment (8.0):** The description targets practitioners and teams interested in agile and quality software delivery, which overlaps with the likely audience for 'Agile Planning.' Hence, this score is relatively high.\n\n6. **Signal-to-Noise Ratio (7.5):** Nearly all content is focused and relevant to TDD's benefits in quality and adaptability, with some thematic links to agile philosophy. However, since the relation to Agile Planning is more implicit than direct, the signal for the precise category is moderate.\n\n**Level:** Tertiary. The content is not a primary or even secondary resource for Agile Planning; it is a related but distinctly focused discussion. The confidence score is commensurately modest, matching the distant but non-negligible relationship.",
    "level": "Tertiary"
  },
  "Agile Values and Principles": {
    "resourceId": "Test Driven Development",
    "category": "Agile Values and Principles",
    "calculated_at": "2025-05-06T11:53:09",
    "ai_confidence": 65.47,
    "ai_mentions": 2.4,
    "ai_alignment": 7.1,
    "ai_depth": 6.8,
    "ai_intent": 7.2,
    "ai_audience": 7.0,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 65.0,
    "reasoning": "The content primarily discusses Test Driven Development (TDD) as a practice and technique focusing on software design, quality, and testing. While TDD itself is not an Agile value or principle, the content does establish ties to Agile concepts. In particular, phrases like 'aligns well with Agile principles,' 'encourages collaboration and responsiveness to change,' and 'cultivates a mindset of continuous improvement' show moderate conceptual alignment and intentional linking. However, only a small portion of the text is about core Agile values or principles, as the main thrust is TDD and its benefits. There are no direct mentions of the Agile Manifesto, specific values (e.g., 'Individuals and interactions'), or numbered principles, and the discussion does not deeply explore Agile's foundational beliefs. The target audienceâ€”teams and organizations interested in quality deliveryâ€”is reasonably well-matched to those concerned with Agile values, but the focus is practical and practice-oriented rather than deeply philosophical or foundational. The content is clear and focused on TDD, only tangential to Agile values, resulting in a moderate signal-to-noise ratio. No penalties are warranted, as the content is current, positively framed, and not critical or outdated. Overall, this is a 'Secondary' level connection: TDD is shown as a technique compatible with (and somewhat supportive of) Agile principles, but the content does not primarily aim to educate or deepen understanding of the values and principles themselves.",
    "level": "Secondary"
  },
  "Customer Retention": {
    "resourceId": "Test Driven Development",
    "category": "Customer Retention",
    "calculated_at": "2025-05-06T11:53:16",
    "ai_confidence": 31.985,
    "ai_mentions": 1.7,
    "ai_alignment": 3.4,
    "ai_depth": 2.7,
    "ai_intent": 3.8,
    "ai_audience": 5.2,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "This content is a high-level overview of Test Driven Development (TDD) with a focus on software design, code quality, and team practices. \n\n- **Direct Mentions (1.7):** There are no explicit or even indirect mentions of 'customer retention', its synonyms, or related retention-focused terminology. The only remote connection is in the final sentence where 'customers' are referenced in a general sense, but not in a way aligned with the category definition.\n\n- **Conceptual Alignment (3.4):** While TDD contributes to quality, which may theoretically support user satisfaction, the core ideas do not align with customer retention strategies. The alignment is coincidentalâ€”TDD could be a building block in a much larger strategy, but the content does not frame the discussion in retention terms.\n\n- **Depth of Discussion (2.7):** The depth is exclusively technical, focused on process, code, and team benefits. There is no substantial exploration of customer retention, its measurement, or its strategic drivers.\n\n- **Intent / Purpose Fit (3.8):** The main intent is to inform about TDDâ€™s value for developers and organisations, not to articulate how it impacts customer retention or engagement. Any benefit to retention is both implied and generic.\n\n- **Audience Alignment (5.2):** The audience is primarily technical teams (developers, engineering managers) rather than roles focused on designing customer retention strategies. However, technical stakeholders can play a secondary role in broader retention efforts, justifying a moderate score.\n\n- **Signal-to-Noise Ratio (4.1):** While the content is focused, the relevance to the retention category is minimal; nearly all discussion is off-topic from the perspective of customer retention.\n\n- **Level:** Tertiary â€” The linkage to customer retention is several degrees removed, relying on overstretched indirect benefits, not on direct exploration or strategy. No penalties were applied, as the content is neither outdated nor in conflict with the category framing.\n\nTaken together, the evidence supports a low confidence that this content fits meaningfully under 'Customer Retention'. The weighted score reflects a tertiary, indirect association at best.",
    "level": "Ignored"
  },
  "Lean Product Development": {
    "resourceId": "Test Driven Development",
    "category": "Lean Product Development",
    "calculated_at": "2025-05-06T11:54:01",
    "ai_confidence": 43.633,
    "ai_mentions": 1.2,
    "ai_alignment": 4.4,
    "ai_depth": 4.6,
    "ai_intent": 5.8,
    "ai_audience": 7.0,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content focuses on Test Driven Development (TDD) as a practice for improving software quality by writing tests before code, aligning TDD with Agile principles and a culture of continuous improvement. However, it does not directly mention Lean Product Development. The main ideasâ€”the importance of quality, adaptability, and reducing defectsâ€”are conceptually adjacent to Lean's values but lack explicit discussion of Lean principles such as waste elimination, value stream mapping, or specific lean tools and frameworks. \n\nDirect Mentions (1.200): Lean Product Development is not named or referenced at all; only Agile is briefly mentioned as a conceptual peer to TDD. \n\nConceptual Alignment (4.400): While promoting continuous improvement and value delivery is relevant to Lean, the content's main focus is on development quality and testing, not on waste reduction, learning cycles, or lean-specific approaches. \n\nDepth of Discussion (4.600): The content provides a moderate depth on TDD and its cultural/organisational impact, but does not explore Lean methodologies or tools. \n\nIntent/Purpose Fit (5.800): The purpose is to advocate for TDD as software best practice, not for Lean Product Development, though some underlying intent (continuous improvement, adaptability) loosely aligns with Lean. \n\nAudience Alignment (7.000): TDD content is targeted at software developers/practitioners, which often overlaps with those interested in Lean, but may not specifically reach lean product strategists or process engineers. \n\nSignal-to-Noise (6.300): The content remains focused on TDD and quality, without much tangential material, yet little is directly relevant to Lean, so the signal is moderate. \n\nNo penalty is applied because the content is contemporary, not satirical or critical, and does not reference obsolete practices. Overall, this piece would be a tertiary fit, as it might interest Lean audiences as an adjacent practice but does not exemplify mainline Lean Product Development topics or discussions.",
    "level": "Tertiary"
  },
  "Value Stream Mapping": {
    "resourceId": "Test Driven Development",
    "category": "Value Stream Mapping",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 9.846,
    "ai_mentions": 0.1,
    "ai_alignment": 0.2,
    "ai_depth": 0.1,
    "ai_intent": 0.3,
    "ai_audience": 4.0,
    "ai_signal": 0.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), a software development methodology. There is no direct or indirect mention of Value Stream Mapping (VSM), and none of the key topics for the categoryâ€”such as mapping workflows, Lean waste analysis, or diagramming value streamsâ€”are touched. The conceptual alignment is minimal: while both TDD and VSM can fall under process improvement or Lean-Agile topics, TDD concentrates on code quality by way of test-first development, not workflow visualization or optimization at the process level. Depth of discussion on VSM is nonexistent, as the entire piece is a focused, reasonably in-depth exploration of TDD benefits and practices. The intent is to inform about TDD, not VSM; at best, there's a tertiary alignment in that both aim for quality and waste reduction, but this is generic. The audience (software/Agile practitioners) could overlap with those interested in VSM, but it is not specifically addressed. The signal-to-noise ratio relative to VSM is extremely poor; the content is on-topic for TDD only. No penalties are necessary as the content is recent, neutral in tone, and not satirical or critical towards VSM or Lean. The resulting very low confidence score and tertiary classification reflect that this text is not meaningfully about Value Stream Mapping.",
    "level": "Ignored"
  },
  "Ability to Innovate": {
    "resourceId": "Test Driven Development",
    "category": "Ability to Innovate",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 32.528,
    "ai_mentions": 1.2,
    "ai_alignment": 3.7,
    "ai_depth": 2.8,
    "ai_intent": 3.2,
    "ai_audience": 7.9,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "While the content on Test Driven Development (TDD) references practices that promote technical excellence and continuous improvementâ€”qualities tangentially related to innovationâ€”the text does not directly address the Ability to Innovate as defined. There are no explicit references to organisational innovation capacity, innovation metrics, case studies, or practices specifically aimed at increasing innovation. The main ideas focus on code quality, accountability, maintainability, and delivery predictability, which are foundational for potential innovation but do not substantively cover mechanisms or management of innovation.\n\nDirect Mentions (1.2): 'Innovation' or 'Ability to Innovate' are not named; 'continuous improvement' and 'adaptability' are the closest, yet do not suffice per the strict classification criteria.\n\nConceptual Alignment (3.7): TDD's benefits around adaptability, continuous improvement, and responsiveness to change are somewhat adjacent to innovation themes, especially within Agile contexts, but the primary thrust is quality and predictability, not innovation per se.\n\nDepth of Discussion (2.8): The content does not substantially explore how TDD enables or measures organisational innovation, nor how it contributes to a sustained culture or framework for generating new solutions.\n\nIntent/Purpose Fit (3.2): The intent is to explain TDD and its impact on software quality and development culture, not to discuss innovation or strategies for enhancing it within organisations.\n\nAudience Alignment (7.9): The target audience (technical practitioners and Agile teams) moderately overlaps with those interested in innovation capacity, but not specifically at the innovation evaluation or strategy level.\n\nSignal-to-Noise Ratio (8.3): The content is mostly focused and coherent, discussing TDD throughout, though relevant to innovation only peripherally.\n\nNo penalties have been applied as the content is current, not misleading, and does not contradict the intended category. Overall, the score sits in the lower 'Tertiary' tier, reflecting weak and mostly indirect alignment with the \"Ability to Innovate\" category.",
    "level": "Ignored"
  },
  "Evidence Based Leadership": {
    "resourceId": "Test Driven Development",
    "category": "Evidence Based Leadership",
    "calculated_at": "2025-05-06T11:53:14",
    "ai_confidence": 24.584,
    "ai_mentions": 0.2,
    "ai_alignment": 0.8,
    "ai_depth": 1.3,
    "ai_intent": 0.7,
    "ai_audience": 9.1,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content provides an overview of Test Driven Development (TDD) as a software engineering practice, emphasizing quality, accountability, and technical excellence. However, it does not directly discuss leadership decisions, evidence-based frameworks, or the principles outlined in the evidence-based leadership category definition. \n\n- Direct Mentions (0.2): The category is not mentioned or referenced at all, nor are its key terms; the closest is an indirect mention of Agile principles.\n- Conceptual Alignment (0.8): Some overlap exists in themes of accountability, continuous improvement, and fostering a quality culture, but these are contextualized in software development, not leadership decision-making or evidence-based frameworks.\n- Depth of Discussion (1.3): The discussion is thorough for TDD as a technical practice, but there's minimal to no exploration of evidence-based leadership specifically, and leadership itself is not a focus.\n- Intent/Purpose Fit (0.7): The purpose of the content is to inform about TDD benefits for software quality, not to serve leaders or to advocate evidence-based decision-making in leadership.\n- Audience Alignment (9.1): The audience is primarily technical (software developers) rather than leaders, but since some TDD discussions occur at team or organizational levels, a partial audience overlap exists.\n- Signal-to-Noise Ratio (8.0): The content is highly focused and on-topic about TDD, but almost none of it is relevant to evidence-based leadership, so in this classification context, 'signal' is low.\n\nNo penalties were applied since the content is neither outdated nor contradicts the category, but it is only very distantly related, meriting a tertiary classification. Overall, the confidence score is very low, reflecting that while the content is clean and focused, it is almost entirely about technical practices, not leadership informed by empirical data.",
    "level": "Ignored"
  },
  "Throughput": {
    "resourceId": "Test Driven Development",
    "category": "Throughput",
    "calculated_at": "2025-05-06T11:53:12",
    "ai_confidence": 6.93,
    "ai_mentions": 0.7,
    "ai_alignment": 0.9,
    "ai_depth": 0.8,
    "ai_intent": 1.0,
    "ai_audience": 1.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The provided content focuses entirely on Test Driven Development (TDD) as a methodology for improving software quality and fostering a culture of continuous improvement. Upon close examination: \n\n- Direct Mentions (0.7): The word 'throughput' is not mentioned, nor are there any references to it as a metric. The only vague connection is in very general statements about predictability and sustainable delivery, which are not explicitly about throughput.\n\n- Conceptual Alignment (0.9): The content does not discuss throughput as a measure of work items completed over time, nor does it differentiate throughput from related concepts. Any potential relevance is indirect, stemming from TDD possibly affecting throughput in practice, but this is neither stated nor implied.\n\n- Depth of Discussion (0.8): There is no substantive exploration or analysis of throughput, its calculation, visualization, or use in empirical forecasting. Any relation would be coincidental or inferred by the reader, not intentional in the content.\n\n- Intent / Purpose Fit (1.0): The main purpose is to explain and advocate for TDD, not to inform or support throughput analysis.\n\n- Audience Alignment (1.2): The content targets software practitioners, potentially overlapping with those interested in throughput, but the focus is solidly on technical practices, not delivery metrics.\n\n- Signal-to-Noise Ratio (1.0): The content is relevant and focused for its topic (TDD), but unrelated to throughput, so signal is high for its own topicâ€”not for the throughput category.\n\nNo penalties are applied, as the content is not outdated or critical of the throughput category. \n\nThis results in a very low confidence (6.93/100) that the content fits the 'Throughput' category. It is at best tertiary, with only the most indirect conceptual link.",
    "level": "Ignored"
  },
  "Software Development": {
    "resourceId": "Test Driven Development",
    "category": "Software Development",
    "calculated_at": "2025-05-06T11:53:10",
    "ai_confidence": 94.17,
    "ai_mentions": 8.8,
    "ai_alignment": 9.7,
    "ai_depth": 9.4,
    "ai_intent": 9.1,
    "ai_audience": 8.8,
    "ai_signal": 9.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 94.0,
    "reasoning": "This content is deeply focused on Test Driven Development (TDD), a core software development methodology explicitly listed in the category definition. \n\n1. **Direct Mentions (8.8)**: The term 'Test Driven Development (TDD)' is both in the title and mentioned early in the text, and its role as a software development approach is explicit. There are about 2-3 direct mentions combined with indirect references to related concepts (e.g., 'integrating testing into the development process').\n\n2. **Conceptual Alignment (9.7)**: The entire discussion centers on TDD, which is directly cited in the key topics. It details its impact on software quality, maintainability, refactoring, and Agile principlesâ€”all central to software development.\n\n3. **Depth of Discussion (9.4)**: The content goes beyond definitions, discussing cultural effects, links to Agile, test coverage, technical excellence, and organisational impact. While not tutorial-level, the detail is substantive and holistic.\n\n4. **Intent / Purpose Fit (9.1)**: The main purpose is to inform and advocate for TDD as a professional practice, not mere tool preference or tangential commentary. The writing stays highly relevant to practitioners and teams seeking methodological improvements.\n\n5. **Audience Alignment (8.8)**: The discussion is clearly aimed at software engineers, developers, and technical leadsâ€”those practicing or influencing development process decisions. It avoids executive-level or generic business language.\n\n6. **Signal-to-Noise Ratio (9.2)**: There is no notable digression or filler. Nearly every sentence contributes to explaining or advocating for aspects of TDD as a software methodology.\n\nNo penalties apply because the content is current, on-topic, aligns with the intent, and maintains a neutral-professional tone. The result feels highly proportionate: the central position of TDD places this as a Primary fit under 'Software Development'.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the 'Software Development' category, as it thoroughly explores Test Driven Development (TDD)â€”a key methodology in the field. The discussion is detailed, relevant, and aimed at practitioners, offering insights into TDDâ€™s impact on quality, maintainability, and Agile practices. Its focus and depth make it highly suitable for professionals interested in software development methodologies."
  },
  "Install and Configuration": {
    "resourceId": "Test Driven Development",
    "category": "Install and Configuration",
    "calculated_at": "2025-05-06T11:53:09",
    "ai_confidence": 6.015,
    "ai_mentions": 0.2,
    "ai_alignment": 0.9,
    "ai_depth": 1.1,
    "ai_intent": 0.6,
    "ai_audience": 1.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), discussing its philosophy, benefits, and role within Agile practices. There are zero explicit mentions of 'install', 'setup', or 'configuration', and the text never references the processes, best practices, or troubleshooting steps associated with installing or configuring any tools, platforms, or environments. Conceptually, the piece aligns with general software craftsmanship and Agile principles, but not even tangentially with installation or configuration topics. The depth is purely theoreticalâ€”no practical technical instructions or actionable implementation steps. The intent is to inform about TDDâ€™s value, targeting a general Agile/development audience, which could overlap with practitioners but not those seeking install/configuration guidance. The signal-to-noise ratio is high in the context of its actual topic (TDD), but entirely out of scope for the target Install and Configuration category. No penalties apply, as the text is current and accurately presented. Therefore, this content ranks as 'Tertiary' relevance, with the very low confidence score reflecting only the faintest, negligible indirect overlap via references to Agile-related tools or processes.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "resourceId": "Test Driven Development",
    "category": "Asynchronous Development",
    "calculated_at": "2025-05-06T11:53:06",
    "ai_confidence": 6.224,
    "ai_mentions": 0.5,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 1.1,
    "ai_audience": 1.0,
    "ai_signal": 0.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content provides an overview of Test Driven Development (TDD), focusing on writing automated tests before code, fostering code quality, maintainability, and technical excellence. There are no direct mentions of asynchronous development, remote collaboration, time zone differences, or associated tools and practices. Conceptual alignment is extremely weak; while automation and quality practices may be tangentially useful to asynchronous teams, they are not discussed or contextualized this way. The depth of discussion pertains only to TDD, not asynchronous development. The content intent is to inform about TDD and its benefits, with no allusion to distributed or asynchronous teamwork. The likely audience (software engineers interested in quality) only partially overlaps with those seeking knowledge specifically on asynchronous development practices. Signal-to-noise ratio is reasonably high (content is focused on its declared topic), but almost none is relevant to the asynchronous development category. There are no penalties applied, as the content is current and not critical or satirical. Overall, this is a textbook example of tertiary relevance: almost no connection beyond the fact that TDD might be used in asynchronous environments, which is not actually discussed here.",
    "level": "Ignored"
  },
  "Definition of Ready": {
    "resourceId": "Test Driven Development",
    "category": "Definition of Ready",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 9.75,
    "ai_mentions": 0.1,
    "ai_alignment": 0.5,
    "ai_depth": 0.4,
    "ai_intent": 0.2,
    "ai_audience": 2.5,
    "ai_signal": 0.15,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content thoroughly discusses Test Driven Development (TDD) but does not directly mention or discuss Definition of Ready (DoR) or any of its key topics. \n\n- Mentions (0.1): There are no explicit or implicit references to 'Definition of Ready' or its related criteria or practices.\n- Alignment (0.5): The main ideas support Agile practices (like quality, collaboration, code maintainability), which are tangentially relevant to an Agile environment, but do not specifically address backlog item readiness or DoR.\n- Depth (0.4): The discussion explores TDD in detail but does not touch on checklists, readiness criteria, or sprint planning readinessâ€”missing any substantive exploration of DoR.\n- Intent (0.2): The purpose is to inform about TDD, not the criteria or process for ensuring a backlog item's readiness for sprint planning.\n- Audience (2.5): The target audience (Agile practitioners, developers, possibly Scrum Masters) overlaps with the target audience for DoR discussions but is not focused on readiness per se.\n- Signal (0.15): Nearly all content is off-topic for DoRâ€”the entire signal is on TDD, with almost no relevant content for DoR. \n\nNo penalties were needed, as the content is not outdated and maintains a neutral tone. The overall confidence is very low, proportionate to the near-total lack of relevance to DoR.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "resourceId": "Test Driven Development",
    "category": "Unrealised Value",
    "calculated_at": "2025-05-06T11:53:12",
    "ai_confidence": 17.525,
    "ai_mentions": 0.3,
    "ai_alignment": 1.95,
    "ai_depth": 2.025,
    "ai_intent": 3.575,
    "ai_audience": 4.7,
    "ai_signal": 4.95,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content provided focuses squarely on Test Driven Development (TDD) as a technique for improving software quality and reliability. Regarding the 'Unrealised Value' category, there is no direct mentionâ€”either explicit or implicitâ€”of concepts such as potential value capture, latent market demand, innovation opportunities, or the Evidence-Based Management context. \n\n- Mentions (0.3): 'Unrealised Value' and related terminology are not present at all.\n- Alignment (1.95): The articleâ€™s emphasis on quality, improvement, and predictability are tangentially related to creating value, but not to identifying or measuring untapped potentialâ€”the main concept in this category.\n- Depth (2.025): Discussion centers around TDD benefits and process, with slight reference to continuous improvement, but lacks any substantial exploration of Unrealised Value indicators, strategies, or frameworks.\n- Intent (3.575): The primary intent is to advocate for TDD as a best practice in software development, not to inform or guide on Unrealised Value.\n- Audience (4.7): The content targets software practitioners and technical teams, not specifically those interested in organisational value management or strategic opportunity identification. There is limited overlap in secondary audience interest.\n- Signal (4.95): The explanation is focused and entirely on TDD, with no digressions, butâ€”because it is off-topic for Unrealised Valueâ€”the effective signal for this classification is low.\n\nNo penalties are applied, as the content is neither outdated nor contrarian. This content only superficially intersects with any aspect of Unrealised Value (in the sense that TDD may facilitate capabilities that someday enable capturing additional value, but this is not discussed explicitly or in context). Thus, this receives a low (tertiary) classification with a confidence score of **17.525**.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "resourceId": "Test Driven Development",
    "category": "Organisational Physics",
    "calculated_at": "2025-05-06T11:53:16",
    "ai_confidence": 22.936,
    "ai_mentions": 0.7,
    "ai_alignment": 2.9,
    "ai_depth": 2.8,
    "ai_intent": 3.2,
    "ai_audience": 3.6,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD) as a software engineering methodology. \n\n- **Direct Mentions (0.700):** There are no explicit mentions of 'Organisational Physics,' nor of systems thinking or related terminology; only the word 'systemic' appears once in reference to TDD, but it is not in the context of systems thinking or organisational dynamics.\n\n- **Conceptual Alignment (2.900):** While there is some indirect reference to how TDD might affect organisational culture and foster reliability within teams, the content does not address the interplay between organisational structure/culture/processes or explore feedback loops, emergent behaviours, or systems thinking principles as outlined in the category definition.\n\n- **Depth of Discussion (2.800):** The depth is primarily focused on the software practice of TDD. The discussion of benefits at the organisational level is cursory and not developed in the context of systems thinking or organisational dynamics.\n\n- **Intent / Purpose Fit (3.200):** The main purpose is to explain and encourage the adoption of TDD within development teams, not to apply or discuss systems thinking principles in an organisational context. Some mention of organisational culture and quality provides a mild relevance, but the alignment is mostly coincidental.\n\n- **Audience Alignment (3.600):** The content is oriented to software developers or teams interested in improving internal processes. There is some overlap with the systems thinking/organisational audience (e.g., managers who might sponsor TDD initiatives), but it is not specifically targeting practitioners of Organisational Physics.\n\n- **Signal-to-Noise Ratio (4.000):** The content is coherent and focused on TDD with minimal filler or off-topic commentary. Any tangential reference to broader organisational impact is brief and not particularly noisy.\n\n- **Level:** Tertiary, as the relationship to Organisational Physics is limited to extremely indirect references to organisational culture and process improvement, with no substantive exploration of the key themes or frameworks from Organisational Physics.\n\n- **Penalties:** No deductions were necessary, as the tone is neutral, the practices described are current, and there is no contrarian stance towards the category.\n\n**Conclusion:** The content does not fit confidently within the category of Organisational Physics, with minimal conceptual or audience overlap and virtually no discussion of systems thinking as applied to organisational dynamics.",
    "level": "Ignored"
  },
  "Leadership": {
    "resourceId": "Test Driven Development",
    "category": "Leadership",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 34.25,
    "ai_mentions": 1.2,
    "ai_alignment": 3.1,
    "ai_depth": 3.6,
    "ai_intent": 3.0,
    "ai_audience": 4.9,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content primarily focuses on Test Driven Development (TDD) as a technical software development practice. \n\n**1. Direct Mentions (1.200):** 'Leadership' as a term or explicit concept is not directly mentioned or discussed. There are indirect nods to accountability and a culture of quality, but the category itself is not referenced.\n\n**2. Conceptual Alignment (3.100):** While TDD promotes accountability, quality, and adaptabilityâ€”values also supported by effective leadershipâ€”the main ideas remain rooted in software engineering method, not leadership principles or roles. There is some secondary alignment (e.g., 'fosters a culture of quality and accountability') but these are byproducts of TDD rather than direct leadership themes.\n\n**3. Depth of Discussion (3.600):** The content explores TDD in moderate depth but does not substantially discuss leadership or its specific aspects as outlined (e.g., adaptive leadership, decision-making, building teams, driving cultural change). Any references to culture or improvement are superficial with respect to leadership.\n\n**4. Intent / Purpose Fit (3.000):** The intent is to explain and promote TDD for software quality, not to inform or guide leadership practices. Leadership-related outcomes are incidental rather than core intent.\n\n**5. Audience Alignment (4.900):** The probable audience is technical practitioners (software developers, engineers). These might overlap slightly with leaders in Agile/DevOps contexts, but the messaging is not tailored to leaders or those driving organizational transformation.\n\n**6. Signal-to-Noise Ratio (3.200):** The content is on-topic for TDD with little filler, but most of it is not signal for leadership as strictly defined here. Leadership-relevant content is a small fraction.\n\n**Penalties:** No points deducted; the material is not outdated and does not contradict the category, just fails to meet its criteria.\n\n**Level:** Tertiary. Leadership appears only as a distant, indirect effect (if at all), far from the contentâ€™s primary or even secondary focus.\n\n**Overall, the confidence score reflects that while TDD might foster favorable cultural outcomes, the content is only tangentially relevant to the 'Leadership' category as strictly defined.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "resourceId": "Test Driven Development",
    "category": "Scrum Master",
    "calculated_at": "2025-05-06T11:53:07",
    "ai_confidence": 10.8,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.5,
    "ai_intent": 0.2,
    "ai_audience": 1.4,
    "ai_signal": 1.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), a software engineering practice. There is no mention of the Scrum Master accountability, nor any explicit or even implicit reference to Scrum roles or their responsibilities. While the text makes high-level references to accountability, continuous improvement, and Agile principles, these are general attributes of modern development practices and do not relate specifically to the Scrum Master in the context of the Scrum framework. \n\n- **Direct Mentions (0.2):** There is no mention of 'Scrum Master' or discussions directly referencing this role or its accountability; a minimal score is given because 'accountability' is noted very generally.\n- **Conceptual Alignment (0.6):** Concepts like 'continuous improvement' and 'accountability' are present, but they apply broadly to teams and engineering culture, not specifically to the Scrum Master accountability as defined.\n- **Depth of Discussion (0.5):** The content goes deep into TDD, but not into any aspects of the Scrum Master, their responsibilities, or impact on teams.\n- **Intent / Purpose Fit (0.2):** The main intent is to inform about TDD and its value in software engineering, not to address or serve those interested primarily in Scrum Master accountability.\n- **Audience Alignment (1.4):** The target audience is practitioners interested in development practices; this slightly overlaps with some Scrum Masters, but is not specifically about or for them.\n- **Signal-to-Noise Ratio (1.2):** The content is focused, but its focus is entirely on TDD, not on the relevant Scrum Master category, so it's mostly noise for that tagging purpose.\n\nNo penalties were applied as the content is neither outdated nor contradictory; it is simply irrelevant to the Scrum Master accountability. The overall confidence is very low, and the category fit is clearly tertiary, if present at all.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "resourceId": "Test Driven Development",
    "category": "Agile Leadership",
    "calculated_at": "2025-05-06T11:53:12",
    "ai_confidence": 30.96,
    "ai_mentions": 1.3,
    "ai_alignment": 3.8,
    "ai_depth": 3.3,
    "ai_intent": 2.5,
    "ai_audience": 6.2,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "The content primarily describes Test Driven Development (TDD), focusing on its process, quality benefits, and alignment with Agile principles. \n\n(1) Direct Mentions (1.3): 'Agile' is referenced only briefly in relation to TDD aligning with Agile principles, but 'Agile Leadership' as a term or explicit leadership focus is absent. \n\n(2) Conceptual Alignment (3.8): There's a partial alignment, as TDD does foster cultural benefits like continuous improvement and adaptability, which minimally overlap with Agile leadership responsibilities. However, the main focus is technical practice, not leadership roles. \n\n(3) Depth of Discussion (3.3): While the article touches on team dynamics and culture (e.g., accountability, trust), it does not explore leadership's role in promoting or guiding TDD adoption, nor does it discuss specific leadership techniques. \n\n(4) Intent / Purpose Fit (2.5): The main intent is to inform about TDD and its advantages for quality and Agile compatibility, rather than to guide leaders in Agile transformation or leadership methods. \n\n(5) Audience Alignment (6.2): The piece generally targets practitioners (developers, technical teams), though benefits to teams and organizations are acknowledged. This is somewhat relevant for leaders, but not specifically tailored to them.\n\n(6) Signal-to-Noise Ratio (5.7): The majority of the content remains technical and practice-focused, with only brief references to cultural or organizational benefits.\n\nLevel: Tertiary, because any connection to Agile Leadership is indirect and emerges only through broad themes like culture and adaptability (secondary effects of TDD), rather than a primary or even secondary focus. No penalties were applied because the content is current, accurate, and does not contradict Agile leadership conceptsâ€”but it does not demonstrate meaningful focus on leadership roles or methods either. The final confidence score proportionately reflects that the inclusion under 'Agile Leadership' would be tangential.",
    "level": "Ignored"
  },
  "Project Management": {
    "resourceId": "Test Driven Development",
    "category": "Project Management",
    "calculated_at": "2025-05-06T11:53:05",
    "ai_confidence": 28.45,
    "ai_mentions": 1.8,
    "ai_alignment": 3.4,
    "ai_depth": 2.9,
    "ai_intent": 3.6,
    "ai_audience": 3.0,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content solely discusses Test Driven Development (TDD) as a software engineering practice. There are no direct mentions of project management methodologies, principles, or rolesâ€”only very indirect references (e.g., 'teams deliver value predictably', 'continuous improvement'). While TDD is relevant within Agile and can influence team culture, the conceptual alignment with project management is low, as the main focus is on technical quality and code-level practices, not on planning, execution, stakeholder management, or any project lifecycle phases. The depth is similarly low, as there is no discussion of tools, governance, stakeholder communication, or methodologies like Waterfall or PRINCE2. The intent is to inform about TDD benefits in software engineering, not to guide on project management approaches. The audience appears to be software developers or teams focused on code quality, which is tangential to a project management audience. The signal-to-noise ratio is moderate; the content is focused, but the focus is almost entirely outside of project management scope. No penalties are applied, as the tone and information are current and non-contradictory. The overall confidence score thus remains quite low, and 'Tertiary' is appropriate, since the overlap with Project Management is peripheral and incidental at best.",
    "level": "Ignored"
  },
  "Psychological Safety": {
    "resourceId": "Test Driven Development",
    "category": "Psychological Safety",
    "calculated_at": "2025-05-06T11:53:06",
    "ai_confidence": 20.0,
    "ai_mentions": 0.4,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 2.0,
    "ai_audience": 6.1,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content wholly focuses on Test Driven Development (TDD) as a software engineering practice, describing its mechanics, code quality, technical excellence, defect reduction, and organizational benefits. There is no direct mention of 'psychological safety' or its key terms, and no explicit connection is drawn between TDD and the core aspects of psychological safety (such as risk-taking, open communication, team trust, or freedom from fear of negative consequences). The conceptual alignment and depth scores are very low, reflecting the absence of discussion around creating an environment where team members feel safe to innovate or admit mistakes without penalty. The intent is strictly technical/process-driven and not about psychological safety as a concept or goal. The audience is somewhat adjacentâ€”software developers who might care about both topicsâ€”but the signal-to-noise ratio is low for this category, as nearly all content is focused on test practices, not team culture or safety. No penalties were applied, as the tone, references, and context were not outdated or contrary, but the fit is clearly tertiary and confidence is low by design, as prescribed by evidence from the content.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "resourceId": "Test Driven Development",
    "category": "Open Space Agile",
    "calculated_at": "2025-05-06T11:53:06",
    "ai_confidence": 17.97,
    "ai_mentions": 0.4,
    "ai_alignment": 2.2,
    "ai_depth": 2.0,
    "ai_intent": 2.8,
    "ai_audience": 6.5,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), a technical Agile practice. \n\n1. Direct Mentions (0.400): The term 'Open Space Agile' is not mentioned directly, nor is Open Space Technology. Only a tangential reference to 'Agile principles' appears, meriting a minimal score.\n2. Conceptual Alignment (2.200): While TDD aligns with technical excellence and collaboration (part of Agile), it does not discuss Open Space Agile's collective participation, emergence, or co-creation. The alignment is distant and incidental.\n3. Depth of Discussion (2.000): The depth is high regarding TDD but not about Open Space Agile. No principles, practices, or case studies about Open Space Agile are provided.\n4. Intent / Purpose Fit (2.800): The content is intended to inform about TDD within an Agile context, but its purpose is not directly related to Open Space Agile. The intent overlaps only at a broad Agile level.\n5. Audience Alignment (6.500): The target audience (Agile practitioners/developers) overlaps in part, as both TDD and Open Space Agile appeal to those participating in Agile transformations, but TDD is much more tactical and technical.\n6. Signal-to-Noise Ratio (4.000): The content is focused and on-topic for TDD and Agile, but is almost entirely off-topic for Open Space Agile; thus, the score is below average for this category.\n\nNo penalties have been applied because there are no references to obsolete practices, nor is the tone contradictory. The resulting level is 'Tertiary', as any connection to Open Space Agile is incidental, not central.\n\nIn summary, this content does not substantively fit the 'Open Space Agile' category. Its confidence score is low and consistent with the near lack of overlap in terms of direct mention, intent, and conceptual depth.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "resourceId": "Test Driven Development",
    "category": "Professional Scrum",
    "calculated_at": "2025-05-06T11:53:06",
    "ai_confidence": 63.25,
    "ai_mentions": 1.4,
    "ai_alignment": 7.1,
    "ai_depth": 6.9,
    "ai_intent": 7.2,
    "ai_audience": 8.3,
    "ai_signal": 8.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 63.0,
    "reasoning": "The content is a strong, general overview of Test Driven Development (TDD), focusing on its role in fostering quality, accountability, and adaptability in teams, which are conceptually aligned with core values of Professional Scrum (e.g., technical excellence, empirical practices, professionalism). The link to technical excellence, accountability, and continuous improvement is clear, and the emphasis on stakeholder value, team culture, and quality outcomes further aligns with the ethos of Professional Scrum. However, there is no direct or explicit mention of Professional Scrum, the Scrum framework, empiricism, or Scrum roles, leading to a low score on the 'Direct Mentions' dimension. While the content invokes concepts (like technical excellence and Agile principles) that overlap with Professional Scrum, it discusses them mainly from the vantage of TDD and Agile more broadly rather than Scrum specifically. It demonstrates moderate depth, focusing mainly on quality, adaptability, and continuous improvement, but does not fully explore the nuances of accountability as defined by Scrum roles, nor does it address evidence-based management or the avoidance of cargo cult practices directly. The intent is generally aligned with Professional Scrum by promoting disciplined and value-driven software development, and the target audience (technical teams, developers focused on quality practices) overlaps substantially. Nearly all of the content is focused and relevant (high signal). No penalties apply as the content is current, professionally framed, and not satirical or critical. In summary, this piece serves as a 'Secondary' resource for Professional Scrum: it's highly relevant and supports its principles but is not primarily written to expound the ethos or philosophy unique to Professional Scrum.",
    "level": "Secondary"
  },
  "Product Owner": {
    "resourceId": "Test Driven Development",
    "category": "Product Owner",
    "calculated_at": "2025-05-06T11:53:06",
    "ai_confidence": 12.364,
    "ai_mentions": 0.3,
    "ai_alignment": 1.7,
    "ai_depth": 1.6,
    "ai_intent": 2.2,
    "ai_audience": 3.0,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 12.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD) as a practice for software development teams. It does not explicitly mention the Product Owner (mentons: 0.3), nor does it discuss Product Owner accountability, decision-making, backlog prioritisation, or strategic roles. Only very weak conceptual alignment (1.7) is presentâ€”the text speaks about 'accountability,' 'delivering value,' and 'stakeholders,' but these are not tied to the Product Owner role and are instead generic descriptors of team behavior and outcomes. The depth of discussion (1.6) on Product Owner relevance is practically absent, as the content thoroughly covers testing practices rather than PO accountability. Intent (2.2) is only marginally aligned, as the underlying goal of improving quality and predictability is relevant to agile teams, but not specifically to the PO's responsibilities. The audience score (3.0) reflects that agile practitionersâ€”including those interested in PO workâ€”might read this, but the primary audience is likely developers focused on technical practices. Signal score (3.1) is higher than zero because the content remains on-topic for TDD, but nearly all discussion is orthogonal to the Product Owner category definition. No penalties were applicable, as the content is not outdated nor critical/satirical. Overall, the confidence is very low (12.364), at a clear tertiary level, because the piece does not substantively engage with the Product Owner accountability, its practices, or its concerns.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "resourceId": "Test Driven Development",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-06T11:53:21",
    "ai_confidence": 15.77,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 1.3,
    "ai_intent": 1.7,
    "ai_audience": 4.2,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content exclusively discusses Test Driven Development (TDD), focusing on its role in improving code quality, maintainability, and Agile alignment. There is no direct mention of Site Reliability Engineering (SRE), nor are there references to key SRE concepts such as incident response, SLOs/SLIs, automation for reliability, or production system resilience. The discussion is both conceptually and practically aligned to general software engineering and Agile quality practices, not the specific objectives or scope of SRE. The depth remains at the level of general software quality; the primary audience appears to be developers interested in improving their workflow and codebase, not specifically SRE practitioners. There is minimal overlap in intent, and the focus is not on production reliability nor SRE's unique integration of dev and ops. Any alignment is tangential, noting TDD's impact on reliability in a very broad sense, not the systemic, scalable, production-focused reliability engineering that SRE addresses. Thus, only minimal points are assigned, reflecting a tertiary and indirect relevance.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "resourceId": "Test Driven Development",
    "category": "Technical Excellence",
    "calculated_at": "2025-05-06T11:53:06",
    "ai_confidence": 88.61,
    "ai_mentions": 8.6,
    "ai_alignment": 9.4,
    "ai_depth": 8.9,
    "ai_intent": 9.3,
    "ai_audience": 8.8,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 89.0,
    "reasoning": "The content is highly relevant to the 'Technical Excellence' category. \n\nDirect Mentions (8.6): 'Technical excellence' is explicitly referenced in one sentence: 'TDD also supports the concept of technical excellence,' making the connection overt. While the frequency of direct mentions is not high, the presence is clear and unambiguous.\n\nConceptual Alignment (9.4): The entire piece centers on TDD as a means to drive quality, maintainability, and adaptabilityâ€”core components of technical excellence as defined (e.g., fostering quality, accountability, continuous improvement, maintainability, and Agile alignment). The link between TDD and higher engineering practices is clear.\n\nDepth of Discussion (8.9): The discussion goes beyond surface-level definition by exploring TDDâ€™s cultural impact, connection to Agile, encouragement of collaboration, and contribution to a culture of reliability. However, the discussion could delve deeper into broader technical practices or challenges to score even higher.\n\nIntent / Purpose Fit (9.3): The main purpose is to inform how TDD enables the attainment of technical excellence within teams (aligning with efficient, high-quality software delivery). The aim is neither tangential nor critical, but supportive and informative.\n\nAudience Alignment (8.8): The tone and terminology indicate it targets teams/practitioners seeking to improve software quality and delivery (the intended audience for technical excellence discussions), though not delving deeply into specific implementation which could target engineers even more precisely.\n\nSignal-to-Noise Ratio (9.1): Content is focused with virtually no filler or off-topic sections, maintaining high signal and relevance throughout.\n\nNo penalties were necessary, as the content is current, positive, and directly aligned with the target category. The final confidence score (88.61) reflects strong, though not absolute (due to moderate depth and a single direct mention), evidence of fit. This makes the content a primary categorization.",
    "level": "Primary",
    "reasoning_summary": "This content is a strong match for the 'Technical Excellence' category. It clearly links TDD to technical excellence, discussing how TDD enhances quality, maintainability, and team culture. The focus is relevant and well-aligned with the intended audience, though it could explore broader practices in more depth. Overall, it effectively supports and informs on achieving technical excellence in software teams."
  },
  "Product Validation": {
    "resourceId": "Test Driven Development",
    "category": "Product Validation",
    "calculated_at": "2025-05-06T11:53:07",
    "ai_confidence": 31.35,
    "ai_mentions": 0.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.6,
    "ai_intent": 3.0,
    "ai_audience": 6.7,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "The content focuses on Test Driven Development (TDD), a software engineering practice centered on improving code quality by writing automated tests prior to development. There is no direct mention of 'product validation' nor explicit references to methodologies for validating product ideas with real users. The conceptual alignment is low because TDD is concerned with ensuring functional correctness and maintainability at the code level, not with validating product-market fit, gathering user feedback, or integrating user testingâ€”as defined by the Product Validation category. The depth is also low; while TDD is discussed in relation to quality and organizational culture, these discussions do not extend into product validation practices, such as engaging users, prototyping, or feedback loops. The intent is tangential; it aims to inform about TDD's value in development, not about validating product ideas. The audience aligns at a technical practitioner level (software developers), which could overlap with individuals engaged in product validation, but the topic is narrowly about development practices. The signal-to-noise ratio is reasonably high because the content remains focused, but its focus is on TDD, not product validation, hence its lower relevance. No penalties were applied as the content is not outdated and does not contradict the framing. Overall, this resource is tertiary to the Product Validation category, focusing on software engineering quality assurance rather than the testing of product ideas with real users.",
    "level": "Ignored"
  },
  "Experimentation": {
    "resourceId": "Test Driven Development",
    "category": "Experimentation",
    "calculated_at": "2025-05-06T11:53:14",
    "ai_confidence": 22.733,
    "ai_mentions": 0.6,
    "ai_alignment": 2.2,
    "ai_depth": 2.0,
    "ai_intent": 2.5,
    "ai_audience": 7.9,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content is focused on Test Driven Development (TDD), describing its process, benefits, and alignment with Agile principles. However, it does not explicitly or implicitly reference experimentation, hypothesis testing, or systematic idea validation. \n\n- Mentions (0.6): The term 'experimentation' or related hypothesis-driven vocabulary is not used at all. TDD is described as a process, not as an experimental methodology.\n- Alignment (2.2): While TDD is a form of process improvement and supports iterative change, it does not inherently follow hypothesis-driven experimentation as defined in the classification. The connection to experimentation is very weak and indirect, as the content discusses Agile alignment and continuous improvement in a general sense.\n- Depth (2.0): There is no substantial discussion of experimentation concepts, techniques, or learning from systematic tests or experiments. Any overlap is superficial (e.g., continuous improvement as an Agile value), but not via experimentation.\n- Intent (2.5): The main purpose is to explain and advocate for TDD, not to explore experimentation in Agile. The content does mention quality improvement and adaptability, which are outcomes experimentation can also support, but TDD is not positioned as an experiment-driven approach.\n- Audience (7.9): The content targets Agile practitioners and software teams, similar to the likely audience for experimentation in Agile, so there is alignment here.\n- Signal (8.1): The content is focused, relevant, and lacks fillerâ€”it just addresses TDD and its value, but not experimentation.\n\nNo penalties were applied as the content is up-to-date and does not contradict or undermine the experimentation category. Given the low/absent direct connection to experimentationâ€”as defined by hypothesis-driven approachesâ€”the confidence and primary level assignments are accordingly low (tertiary).",
    "level": "Ignored"
  },
  "Azure Repos": {
    "resourceId": "Test Driven Development",
    "category": "Azure Repos",
    "calculated_at": "2025-05-06T11:53:07",
    "ai_confidence": 6.84,
    "ai_mentions": 0.1,
    "ai_alignment": 0.25,
    "ai_depth": 0.3,
    "ai_intent": 0.1,
    "ai_audience": 2.2,
    "ai_signal": 0.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content strictly discusses Test Driven Development (TDD) as a practice and philosophy, with zero direct or indirect references to Azure Repos, source control, repository management, or any specific tooling. \n\n- Mentions: The term 'Azure Repos' is not present, nor are there any references or synonyms (score: 0.10, minimal possible).\n- Alignment: TDD is a software engineering methodology, not a source control or repository management solution. There is no conceptual mapping to Azure Repos functionality or intent, except possibly as a very distant, indirect connection via software quality practices (score: 0.25).\n- Depth: The discussion is thorough about TDD, but applies zero depth to Azure Repos (score: 0.30, acknowledging thoroughness on its direct topic but not about the category).\n- Intent: The primary intent is educational/informative about TDD and test automation, not Azure Repos or version control practices (score: 0.10).\n- Audience: The target audience (developers interested in TDD/quality) slightly overlaps with Azure Repos users (practitioners in software development), hence a modest scor (2.20), as the technical audience is somewhat similar.\n- Signal-to-Noise: All content is relevant to TDD, but none to Azure Repos. For this category, it's almost complete noise (score: 0.10).\n\nNo penalties were applied as the content is current, accurate, and neutral in tone. The result is tertiary relevance only: while the audience overlap is conceivable, thereâ€™s no substantive relevance to Azure Repos.",
    "level": "Ignored"
  },
  "Business Agility": {
    "resourceId": "Test Driven Development",
    "category": "Business Agility",
    "calculated_at": "2025-05-06T11:53:09",
    "ai_confidence": 42.225,
    "ai_mentions": 1.2,
    "ai_alignment": 4.9,
    "ai_depth": 4.6,
    "ai_intent": 4.5,
    "ai_audience": 4.2,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content primarily discusses Test Driven Development (TDD) as a software engineering practice. While there are several indirect mentions that TDD aligns with agile values (e.g., 'aligns well with Agile principles', 'collaboration and responsiveness to change'), there is no direct mention of 'Business Agility' or explicit focus on organisational adaptation to market dynamics. TDD is presented as fostering quality, accountability, and adaptability within teamsâ€”qualities that can contribute to business agility, but the main focus remains technical and process-driven rather than organisational. \n\nOn Direct Mentions, the score is low (1.2) as 'business agility' is not mentioned at all, though 'Agile principles' and organisational benefits are implied. Conceptual Alignment is moderate (4.9): TDD supports certain enablers of business agility (technical excellence, adaptability), but the exploration is more about software development efficiency, not agility at the business level. Depth of Discussion (4.6) reflects some discussion of long-term benefits and team culture, but stays within the scope of TDD. Intent/Purpose Fit (4.5) is moderate, since the aim is to advocate for TDD as a quality engineering practice rather than business agility per se. Audience Alignment (4.2) skews technical (engineers, developers), not executives or business strategists. Signal-to-Noise (5.1) is mid-level; the piece is focused and relevant to TDD, but only tangentially to business agility.\n\nNo penalties were applied as the tone is neutral/positive and content is not outdated or critical. Overall, this is a Tertiary fit: while TDD may support business agility indirectly, the content itself is technical and project-level, with only surface linkage to the business agility category.",
    "level": "Tertiary"
  },
  "Forecasting": {
    "resourceId": "Test Driven Development",
    "category": "Forecasting",
    "calculated_at": "2025-05-06T11:53:07",
    "ai_confidence": 13.824,
    "ai_mentions": 0.5,
    "ai_alignment": 1.8,
    "ai_depth": 2.4,
    "ai_intent": 2.0,
    "ai_audience": 3.2,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is exclusively focused on the practice of Test Driven Development (TDD) and its impact on software design, code quality, maintainability, and alignment with Agile principles. There are no explicit mentions of forecasting methodologies, empirical data usage for prediction, team velocity, or the use of Agile forecasting tools such as burn-down charts. The closest alignment is indirect: TDD could support predictability and sustainability in delivery by reducing defects, but the piece does not discuss forecasting as a process or goal, nor does it relate to risk management through empirical forecasting. Audience alignment is marginal, as the content is most relevant for practitioners interested in Agile methodology, but not specifically for those interested in forecasting. Signal-to-noise ratio is low for the 'Forecasting' category because nearly all the information is on TDDâ€™s role in quality and Agile adherence, not forecasting. Scoring reflects these factors, resulting in a low confidence and a tertiary association.",
    "level": "Ignored"
  },
  "Deployment Frequency": {
    "resourceId": "Test Driven Development",
    "category": "Deployment Frequency",
    "calculated_at": "2025-05-06T11:53:39",
    "ai_confidence": 14.13,
    "ai_mentions": 0.35,
    "ai_alignment": 1.45,
    "ai_depth": 1.2,
    "ai_intent": 1.65,
    "ai_audience": 4.4,
    "ai_signal": 2.78,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content addresses Test Driven Development (TDD) and its role in enhancing software quality, maintainability, and adaptability. \n\n- **Direct Mentions (0.35/10):** There are no explicit mentions of 'Deployment Frequency' or closely related terminology. The content does not use phrases such as 'deployment', 'release intervals', or 'CI/CD'. Minor overlap exists in the general concern for continuous improvement, but this is indirect.\n\n- **Conceptual Alignment (1.45/10):** While TDD is related to Agile and supports practices that could theoretically facilitate more frequent deployments, this link is very tenuous in the content. The primary themes are code quality, refactoring safety, and maintainability, not optimization of deployment intervals.\n\n- **Depth of Discussion (1.20/10):** There is no substantive discussion of deployment frequency or related strategies (automation, CI/CD). The focus remains on TDD practices, benefits, and cultural impact, not release cadence.\n\n- **Intent / Purpose Fit (1.65/10):** The content aims to promote TDD for code quality and sustainable development. These concepts are adjacent to themes in Deployment Frequency, but only in a broad Agile/DevOps senseâ€”not as a focused intent or benefit.\n\n- **Audience Alignment (4.40/10):** The audienceâ€”technical practitioners, Agile teamsâ€”is close to the Deployment Frequency category. However, this is only partial alignment, since those seeking deployment optimization advice would not find relevant content here.\n\n- **Signal-to-Noise Ratio (2.78/10):** The content is focused, but all on TDD. Its relevance to Deployment Frequency is minimal and only arises indirectly through discussions of team agility and confidence in change. \n\n- **Penalty Adjustments:** No penalties applied. The content is not outdated, nor does it undermine the category. Tone is sincere and constructive.\n\n**Level: Tertiary** â€” The topic is only distantly, indirectly related to Deployment Frequency by broader association within Agile; the content itself does not address deployment cadence, strategies, or metrics at any level of depth.\n\nTherefore, the final confidence score is appropriately very low, reflecting the tenuous and mostly indirect overlap.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "resourceId": "Test Driven Development",
    "category": "Working Agreements",
    "calculated_at": "2025-05-06T11:53:08",
    "ai_confidence": 22.85,
    "ai_mentions": 0.2,
    "ai_alignment": 1.35,
    "ai_depth": 1.15,
    "ai_intent": 2.05,
    "ai_audience": 6.1,
    "ai_signal": 8.25,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content discusses Test Driven Development (TDD), focusing on its process, benefits, and alignment with Agile principles. There is no explicit mention of 'Working Agreements,' nor does the content delve into norms, team charters, or shared principles for collaboration. \n\n- **Mentions (0.20):** The term 'working agreements' does not appear, and related terms are absent. TDD, testing, and quality are the main focal points.\n\n- **Conceptual Alignment (1.35):** While TDD supports qualities like accountability and collaboration, the main idea is the technical practice itself, not team-shared norms or agreements. There is a tangential reference to fostering a culture of reliability, but not via explicit agreements.\n\n- **Depth (1.15):** The discussion is thorough regarding TDD's method and outcomes but does not address any aspect of working agreement creation, maintenance, or examples.\n\n- **Intent (2.05):** The piece aims to inform about TDD's benefits in development teams. There is a very weak secondary connection to the category since it mentions collaboration and team culture, but it is not the main purpose.\n\n- **Audience (6.10):** The likely audience (developers, technical teams) does overlap with audiences interested in working agreements, hence a medium-high score here.\n\n- **Signal (8.25):** The content is highly focused and free of filler, even though the topic is not about working agreements. \n\n- **Penalties:** No penalties applied as the content is current, not satirical or critical, and does not promote outdated practices.\n\nOverall, this content is only peripherally related to 'Working Agreements' and does not fit as a primary or even secondary resource for that category.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "resourceId": "Test Driven Development",
    "category": "Entrepreneurship",
    "calculated_at": "2025-05-06T11:53:09",
    "ai_confidence": 13.066,
    "ai_mentions": 0.9,
    "ai_alignment": 1.2,
    "ai_depth": 1.6,
    "ai_intent": 0.8,
    "ai_audience": 3.1,
    "ai_signal": 2.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "Direct Mentions (0.9): The content does not mention 'entrepreneurship' or directly reference entrepreneurial concepts; all terminology is centered on software engineering and testing practices.\nConceptual Alignment (1.2): While TDD can be used by entrepreneurs in tech startups, the article does not address innovation, value-driven decision-making, or risk-taking. Its focus is on process improvement, not new venture creation.\nDepth of Discussion (1.6): The text discusses TDD thoroughly, but only as a technical practiceâ€”it does not relate any of these practices to starting or scaling a business or to entrepreneurial mindsets or strategies.\nIntent/Purpose Fit (0.8): The intent is to inform software practitioners of TDD benefits for quality and reliabilityâ€”there is no focus on entrepreneurship or supporting entrepreneurial objectives.\nAudience Alignment (3.1): The article targets software developers or engineering teams, not entrepreneurs, yet some entrepreneurs in tech may find secondary value, justifying a modest increase here.\nSignal-to-Noise Ratio (2.4): The content is focused and avoids filler, but the informational 'signal' is about software quality, not entrepreneurship. Thus, while the article is on-topic for software engineers, it is off-topic for the category of entrepreneurship.\nNo penalties were required, as the article is not obsolete and does not undermine the categoryâ€”just irrelevant to it. This results in a low confidence score, as the evidence for categorising this under 'Entrepreneurship' is very weak and purely incidental.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "resourceId": "Test Driven Development",
    "category": "Automated Testing",
    "calculated_at": "2025-05-06T11:53:13",
    "ai_confidence": 83.9,
    "ai_mentions": 7.2,
    "ai_alignment": 9.1,
    "ai_depth": 8.7,
    "ai_intent": 8.8,
    "ai_audience": 8.3,
    "ai_signal": 9.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 84.0,
    "reasoning": "The content describes Test Driven Development (TDD) as a process that emphasizes writing automated tests before code, explicitly aligning with the core meaning of the Automated Testing category. \n\n- Mentions (7.2): The content directly references 'automated tests' and 'testing' multiple times but does not excessively repeat the phrase or list specific automated testing tools or frameworks.\n- Alignment (9.1): TDD is inherently a methodology of automated testing. The content closely follows the categoryâ€™s definition, focusing on quality, reliability, Agile alignment, and delivery process.\n- Depth (8.7): The text discusses TDD's underlying philosophy, team impact, benefits such as refactoring safety, and alignment with Agile, but does not go into granular implementation details (e.g., specific tools or practices unique to test automation outside of TDD).\n- Intent (8.8): The purpose is clearly to advocate for and explain the value of automated testing via TDD, consistent with the category's informative and supportive intent.\n- Audience (8.3): The language is technically oriented, suitable for practitioners or technical team leads, matching the categoryâ€™s intended audience.\n- Signal (9.0): The content is focused almost exclusively on TDD and its relation to automated testing, with minimal to no off-topic discussion.\n\nNo penalties were required since the discussion is current, positive, and accurate with no criticism or outdated references. The confidence score reflects a strong primary fit, as TDD is a canonical automated testing practice, even though the article does not cover all automated testing types or tools exhaustively.",
    "level": "Primary",
    "reasoning_summary": "This content is an excellent fit for the Automated Testing category, as it clearly explains Test Driven Development (TDD) and its reliance on writing automated tests before code. The discussion is focused, relevant, and aimed at technical professionals, highlighting TDDâ€™s benefits and alignment with Agile practices. While it doesnâ€™t cover every aspect of automated testing, its intent and depth make it highly suitable for this category."
  },
  "Complexity Thinking": {
    "resourceId": "Test Driven Development",
    "category": "Complexity Thinking",
    "calculated_at": "2025-05-06T11:53:17",
    "ai_confidence": 13.453,
    "ai_mentions": 0.9,
    "ai_alignment": 1.7,
    "ai_depth": 1.2,
    "ai_intent": 1.9,
    "ai_audience": 1.4,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "Direct Mentions (0.9): The content makes no explicit mention of 'Complexity Thinking' or its key frameworks (e.g., Cynefin, emergence, non-linearity, complex adaptive systems). The only indirect link is a vague reference to Agile principles, but Agile's connection to complexity is not made explicit. Conceptual Alignment (1.7): While TDD is adjacent to adaptive, iterative processes in Agile, the content does not discuss the application of complexity science, emergent behaviours, or non-linear system dynamics. There is no reference to uncertainty management, self-organisation, or emergence. Depth of Discussion (1.2): The article discusses TDD thoroughly from a software engineering and quality perspective, but not from a complexity science standpoint. There are no deep dives into systems thinking, adaptive management, or complexity frameworks. Intent / Purpose Fit (1.9): The primary intent is to advocate for TDD as a quality and design tool in software engineering, not to educate or inform about complexity thinking. Audience Alignment (1.4): The likely audience is software engineers and technical teams interested in TDDâ€”not specifically practitioners of organisational complexity or systems management. Signal-to-Noise Ratio (2.3): The content is tightly focused on TDD and its benefits. This is on-topic for TDD, but not relevant for complexity thinking other than minimal, generic references to adaptability or systemic practice. Level: Tertiary. There is little direct or meaningful overlap; TDD may indirectly support complexity-adaptive thinking in how teams evolve software, but none of this is explored or referenced in the text. No penalties were necessary, as the text is neither outdated nor contrary to complexity thinking, though it is not aligned with it either. The final score reflects a very weak, marginal connectionâ€”almost entirely due to tangential ideas of adaptability and system practice but lacking any substantive complexity theory content.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "resourceId": "Test Driven Development",
    "category": "Minimum Viable Product",
    "calculated_at": "2025-05-06T11:53:13",
    "ai_confidence": 22.113,
    "ai_mentions": 0.7,
    "ai_alignment": 2.3,
    "ai_depth": 2.7,
    "ai_intent": 3.8,
    "ai_audience": 7.0,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content strictly focuses on explaining Test Driven Development (TDD) and its benefits for quality, agility, and maintainability. There are no direct mentions of 'Minimum Viable Product,' MVP methodology, or relevant practices; thus, the Direct Mentions score is very low (0.7). Conceptual Alignment is weak (2.3): while both TDD and MVP are related to Agile and iterative software development, the discussion here centers entirely on test development and technical excellence, not on hypothesis testing or validating market assumptions. The Depth score is slightly higher (2.7), recognizing the detailed discussion of TDD, though it is off-category. The Intent/Purpose (3.8) is toward technical practitioners aiming for high-quality code, not MVP experimentation or learning. The Audience (7.0) is partially aligned, as MVP content can target similar technical audiences, but this content is more developer-centric. The Signal (7.2) is reasonably high for TDD as a topic, but in the context of MVP it signals little relevancy, with no off-topic filler. No penalties are applied as the content is up to date and not critical or satirical. This evaluation yields a low confidence, strictly at a tertiary level: while TDD may be a useful practice when building an MVP, the content does not touch on MVP concepts, experiments, or Lean Startup principles.",
    "level": "Ignored"
  },
  "Windows": {
    "resourceId": "Test Driven Development",
    "category": "Windows",
    "calculated_at": "2025-05-06T11:53:46",
    "ai_confidence": 6.852,
    "ai_mentions": 0.2,
    "ai_alignment": 0.3,
    "ai_depth": 0.3,
    "ai_intent": 0.2,
    "ai_audience": 6.5,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content, focused on Test Driven Development (TDD), does not mention Windows explicitly or implicitly (Mentions: 0.2). Conceptually, it discusses a methodology relevant to software engineering in general, not to the Windows operating system, its configuration, or management (Alignment: 0.3). The discussion is moderately thorough in describing TDD, but has zero depth regarding Windows-specific practices, tools, or environments (Depth: 0.3). The primary intent is to explain and advocate for TDD as a general development practice, not oriented towards Windows or even operating systems specifically (Intent: 0.2). The likely audience includes developers and teams interested in software quality, which could include Windows users, but this connection is incidental and not targeted (Audience: 6.5). The signal-to-noise ratio is relatively high for the content's own theme, but almost entirely irrelevant for the Windows category, though the content is generally on-topic for software development (Signal: 7.0). No penalties were warranted, as the tone is neutral and content is not outdated or actively contrary, but the complete lack of category-relevant material places this as Tertiaryâ€”the lowest possible level. The confidence score is extremely low and reflects the virtually non-existent match between topic and category.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "resourceId": "Test Driven Development",
    "category": "Hybrid Agile",
    "calculated_at": "2025-05-06T11:53:18",
    "ai_confidence": 7.78,
    "ai_mentions": 0.3,
    "ai_alignment": 0.1,
    "ai_depth": 0.1,
    "ai_intent": 0.5,
    "ai_audience": 2.1,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content is an explanatory piece on Test Driven Development (TDD), discussing its process, benefits, and alignment with Agile principles. \n\n- Direct Mentions (0.3): There are no explicit or even implicit mentions of 'Hybrid Agile,' and none of the terms directly related to the categoryâ€”such as hybrid models, integrating traditional with agile, or challenges thereofâ€”are present. A negligible score is provided solely due to the brief note that TDD aligns with Agile.\n\n- Conceptual Alignment (0.1): While the content touches on Agile ideas by referencing Agile principles, it does not discuss Hybrid Agile, its challenges, or any intersection with traditional project management. The main concepts are about TDD's benefits, not hybrid frameworks or dysfunctions associated with hybridization.\n\n- Depth (0.1): The discussion is focused fully on TDD, its processes, and outcomes; there is no depth relating to the merging of traditional and agile practices, failed hybrid cases, or analysis of such dysfunctions. \n\n- Intent/Purpose Fit (0.5): The primary intent is to inform about TDD and its alignment with Agile values, not to examine or critique Hybrid Agile, its pitfalls, or challenges. The connection (TDD supports Agile) is surface-level and not directed towards the category's specific purpose.\n\n- Audience Alignment (2.1): The content targets practitioners (developers, teams) interested in improving quality using TDD and Agile thinking. It is not aimed at strategists, executives, or those seeking to understand or critique organizational-level frameworks like Hybrid Agile; only a minor fraction overlaps.\n\n- Signal-to-Noise (2.2): The content is focused and relevant to TDD and its relation to Agile, but nearly all of it is off-topic for the Hybrid Agile category. Only a passing mention to Agile exists.\n\n- Level: Tertiary. The connection to the category is highly tangential, at best, through a shared mention of Agile principles, with no actual engagement with Hybrid Agile concepts, challenges, or critiques.\n\n- Penalties: No adjustments for outdated practices or tone required, as the tone is neutral/informative and up-to-date.\n\nThe overall confidence is extremely low, as the content does not fit the definition, intent, or core themes of the Hybrid Agile category.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "resourceId": "Test Driven Development",
    "category": "Lean Thinking",
    "calculated_at": "2025-05-06T11:53:19",
    "ai_confidence": 33.35,
    "ai_mentions": 0.35,
    "ai_alignment": 3.8,
    "ai_depth": 3.65,
    "ai_intent": 3.95,
    "ai_audience": 7.25,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content is centered entirely on Test Driven Development (TDD), without any direct mention of 'Lean Thinking' or explicit reference to Lean principles, terms, or tools (e.g., Value Stream Mapping, 5S, Kanban, Muda, etc.). There is mild thematic overlapâ€”for example, both TDD and Lean value continuous improvement and reducing waste (here, in the form of defects or rework). The content refers to 'delivering value,' 'continuous improvement,' and a culture of qualityâ€”terms adjacent to Lean philosophyâ€”but these are generic Agile/quality concepts and not distinctly Lean. The discussion is reasonably deep on TDD itself, but does not connect this practice to Lean Thinkingâ€™s specific concepts (such as value streams, flow, or waste identification) nor does it use Lean vocabulary. There is no signal of irrelevance or fillerâ€”the audience (developers, teams focused on quality/agility) has some overlap with Lean practitioners in software, but the purpose and substance are about TDD, not Lean. No penalties are necessary because the content is current, respectful, and factually accurate. Overall, the confidence is low; while there are some conceptual parallels (continuous improvement, value focus), the lack of Lean-specific framing, terminology, or tools makes this a weak tertiary fit.",
    "level": "Ignored"
  },
  "Product Discovery": {
    "resourceId": "Test Driven Development",
    "category": "Product Discovery",
    "calculated_at": "2025-05-06T11:53:51",
    "ai_confidence": 17.69,
    "ai_mentions": 0.2,
    "ai_alignment": 2.4,
    "ai_depth": 1.8,
    "ai_intent": 2.3,
    "ai_audience": 6.8,
    "ai_signal": 6.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "Direct Mentions (0.20): The content does not mention 'Product Discovery' or any synonymous phrases; its terminology centers on Test Driven Development (TDD), technical quality, and software design. \n\nConceptual Alignment (2.40): The main conceptual focus is software engineering practice (TDD), not methodologies for discovering customer needs or defining product features. Some minor overlap exists insofar as 'requirements defined in the tests' or 'delivering value' are mentioned, but these are not explored from a discovery/validation or user research perspective. \n\nDepth of Discussion (1.80): The discussion is deep in the context of TDD, but does not engage in any detailed discussion of product discovery practices, approaches to user research, feedback mechanisms, or validation frameworks. No discovery concepts (MVP, prototyping, customer interviews) are discussed. \n\nIntent/Purpose Fit (2.30): The content's clear intent is to explain the value of TDD for quality and maintainability, not for exploring or defining customer needs. Its focus is tangential to product discovery at best.\n\nAudience Alignment (6.80): The primary audience appears to be software developers and teams interested in best practices. This overlaps partially with the 'Product Discovery' audience, as cross-functional team members are often involved, but the content is much more technical in nature.\n\nSignal-to-Noise Ratio (6.10): Nearly all of the content is on-topic (for TDD), with little extraneous material, but the focus is not on the discovery phase, resulting in a relatively low relevance signal for this category.\n\nPenalties: No penalty adjustments were necessary: the information is current and there is no contradiction or undermining of product discovery principles.\n\nLevel: Tertiary. The overlap with 'Product Discovery' is incidental and extremely limited; any connection is indirect and background at best.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "resourceId": "Test Driven Development",
    "category": "Azure Boards",
    "calculated_at": "2025-05-06T11:53:18",
    "ai_confidence": 8.45,
    "ai_mentions": 0.1,
    "ai_alignment": 0.7,
    "ai_depth": 0.8,
    "ai_intent": 1.2,
    "ai_audience": 3.9,
    "ai_signal": 3.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), an Agile development practice centered around writing tests before production code. There are no direct mentions of Azure Boards or any features, tools, or integrations associated with it (mentions: 0.10). Conceptually, while TDD aligns with Agile principles (stated in the text), there is no material connection established to Agile project management tooling or the specifics of Azure Boards (alignment: 0.70; edge given because Agile is referenced, but not the implementation in any tool). Depth is minimal regarding Azure Boardsâ€”none of the content addresses sprints, work items, planning, or reporting (depth: 0.80). The intent is aligned to discussing an Agile practice, not project management tooling or collaboration platforms like Azure Boards (intent: 1.20). The audience is technical and Agile-oriented, loosely connected to the type of practitioner who might use Azure Boards, but not specifically targeting Azure Boards users or admins (audience: 3.90). Signal-to-noise is low from an Azure Boards perspective, as the content is fully focused on TDD methodology with no tangential Azure Boards relevance (signal: 3.00). No penalties were applied as the content is not outdated or critical and maintains a professional tone. Overall, the evidence places this content as only very weakly related (tertiary level), with the minor connection being the shared Agile philosophy but lacking any substantive discussion on Azure Boards functionality or usage.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "resourceId": "Test Driven Development",
    "category": "Value Delivery",
    "calculated_at": "2025-05-06T11:53:09",
    "ai_confidence": 68.45,
    "ai_mentions": 3.7,
    "ai_alignment": 7.9,
    "ai_depth": 7.5,
    "ai_intent": 7.0,
    "ai_audience": 7.8,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 68.0,
    "reasoning": "Direct Mentions: 'Value' is explicitly mentioned twiceâ€”in 'deliver value predictably and sustainably' and 'better outcomes for stakeholders and customers.' However, the main focus is TDD, not 'Value Delivery' per se (3.7).\n\nConceptual Alignment: The description links TDD to predictable, sustainable value delivery and aligns it with Agile principles and customer outcomes. It touches on customer satisfaction and business agility but is primarily about TDD as a technical practice, making the alignment decent but not perfect (7.9).\n\nDepth of Discussion: TDD is discussed beyond surface level, e.g., its impact on quality, maintainability, technical excellence, and stakeholder trust. However, it doesn't systematically break down value delivery practices, metrics, or explicit business value strategies (7.5).\n\nIntent / Purpose Fit: The purpose is educational about TDD, emphasizing quality and how TDD supports better outcomes for customers, but the intent is not strictly about value delivery strategies or methodologies (7.0).\n\nAudience Alignment: The language and concepts are suited for both technical practitioners and process-improving teams in Agile contexts, generally matching the Value Delivery audience, albeit with a technical slant (7.8).\n\nSignal-to-Noise Ratio: The content is focused and relevantâ€”minimal fillerâ€”but a portion is foundational on TDD itself rather than on value delivery mechanisms directly (7.2).\n\nNo penalty is applied: The content is up-to-date, constructive, and does not contradict value delivery philosophies. Overall, the piece is strongly relevant as a secondary resource for Value Delivery, especially in showing how TDD indirectly supports customer value, agility, and satisfaction, but does not centrally address strategies or methodologies for value delivery itself.",
    "level": "Secondary"
  },
  "Sociotechnical Systems": {
    "resourceId": "Test Driven Development",
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-05-06T11:53:23",
    "ai_confidence": 58.963,
    "ai_mentions": 1.9,
    "ai_alignment": 6.8,
    "ai_depth": 6.2,
    "ai_intent": 7.1,
    "ai_audience": 7.7,
    "ai_signal": 8.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 59.0,
    "reasoning": "The content focuses primarily on explaining Test Driven Development (TDD) as a technical practice and its benefits, such as improved code quality, defect reduction, and support for continuous improvement. There are elements that nod towards sociotechnical themes; for instance, it mentions fostering a 'culture of quality and accountability', enabling teams to 'deliver value predictably and sustainably', and cultivating 'continuous improvement and adaptability within teams.' It also touches briefly on how TDD supports agile collaboration and aligns with organisational outcomes. However, there is little direct mention of 'Sociotechnical Systems' as a framework or discipline, and the main thrust is on TDD's technical and quality culture aspects rather than a deep exploration of the interplay between organisational structures and technology. The discussion only somewhat aligns with sociotechnical themes, lacking deeper analysis of, for example, how TDD interacts with different organisational structures, cultural factors, or the theoretical frameworks mentioned in the category definition. No penalties were applied, as the content is current, relevant, and does not contradict the category's framing. Audience alignment is moderately strong, as it likely targets practitioners who would benefit from sociotechnical perspectives but is not directly aimed at strategists or those studying sociotechnical systems explicitly. The signal-to-noise ratio is high, with little filler or off-topic material. Therefore, the content is best classified as 'Secondary'â€”it is somewhat relevant to Sociotechnical Systems, primarily addressing related cultural and team aspects, but not a primary or focused discussion on the category itself.",
    "level": "Tertiary"
  },
  "Agile Planning Tools": {
    "resourceId": "Test Driven Development",
    "category": "Agile Planning Tools",
    "calculated_at": "2025-05-06T11:53:29",
    "ai_confidence": 18.322,
    "ai_mentions": 0.4,
    "ai_alignment": 2.0,
    "ai_depth": 2.4,
    "ai_intent": 2.1,
    "ai_audience": 5.5,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), a software engineering practice centered around writing tests before code. While TDD aligns with general Agile values of quality and adaptability, it does not directly address Agile planning tools or methods. \n\n- Direct Mentions: (0.4) There are no explicit mentions of 'Agile Planning Tools' or specific tools like Jira, Trello, etc. The closest reference is a general nod to Agile principles.\n- Conceptual Alignment: (2.0) TDD is Agile-compatible but the main content does not discuss tools or planning methods; thus, alignment is weak.\n- Depth of Discussion: (2.4) The article discusses TDD with moderate depth, but this depth is not about Agile planning or the core category meaning.\n- Intent / Purpose Fit: (2.1) The primary intent is to inform about TDD best practices, not about Agile planning or tools.\n- Audience Alignment: (5.5) The technical nature does match Agile practitioners, but skews toward engineers versus planners or Scrum Masters.\n- Signal-to-Noise Ratio: (4.7) The content is focused and relevant, but its relevance is to TDD, not the planning tools categoryâ€”so the 'signal' for this category is limited.\n\nNo penalties were necessary, as the content is not outdated, nor does it contradict the framing. Overall, TDD is tertiary to Agile Planning Tools: related only as a supporting practice that shares Agile values but does not directly address planning tools' selection, use, or benefits.",
    "level": "Ignored"
  },
  "Company as a Product": {
    "resourceId": "Test Driven Development",
    "category": "Company as a Product",
    "calculated_at": "2025-05-06T11:53:43",
    "ai_confidence": 23.066,
    "ai_mentions": 0.25,
    "ai_alignment": 2.25,
    "ai_depth": 2.65,
    "ai_intent": 3.6,
    "ai_audience": 4.9,
    "ai_signal": 3.85,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses primarily on Test Driven Development (TDD) as a software engineering practice to improve code quality, predictability, and team culture within software projects. \n\n- Mentions (0.250): There is no direct or explicit mention of 'Company as a Product' or its synonymous concepts. The closest relevant phrase is 'culture of reliability and trust across the organisation,' but this is only tangentially related.\n\n- Alignment (2.250): While the text references some values commonly found in Company as a Product discourseâ€”such as continuous improvement, adaptability, and customer valueâ€”it does so exclusively through the lens of TDD, not at an organisational or company design level. The alignment is therefore weak.\n\n- Depth (2.650): The content explores TDD in moderate detail, but there is no exploration of company-wide strategy, aligning organisational design with customer outcomes, or CaaP frameworks. It does not cover cross-functional organisational agility or strategies for integrating customer insights at a company scale.\n\n- Intent (3.600): The main intent is to inform about TDD and promote its benefits for software teams. Any connection to CaaP is highly tangential; there is acknowledgement of organisational culture, but not in a way specific to treating the entire company as a product.\n\n- Audience (4.900): The content is targeted at practitionersâ€”likely software developers or team leadersâ€”rather than executives or organisational strategists interested in macro-level company design. However, the mention of broader team and company benefits slightly increases the relevance for a cross-functional audience.\n\n- Signal (3.850): The signal-to-noise ratio is fair; the content is on-topic for TDD, but with minimal to no direct relevance to Company as a Product. Any overlap is incidental. \n\nPenalty criteria were reviewed and none were applied. There is no contradiction, satire, or outdated content. \n\nOverall, the content is classified at the 'Tertiary' level, as its relationship to CaaP is indirect, limited to generic mentions of improvement, adaptability, and value deliveryâ€”traits that may be present in CaaP organisations, but are not discussed at a strategic, company-wide, or product-as-organisation level.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "Test Driven Development",
    "category": "Definition of Done",
    "calculated_at": "2025-05-06T11:53:13",
    "ai_confidence": 17.14,
    "ai_mentions": 0.4,
    "ai_alignment": 1.5,
    "ai_depth": 1.6,
    "ai_intent": 1.8,
    "ai_audience": 5.2,
    "ai_signal": 5.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content exclusively discusses Test Driven Development (TDD), its process, benefits, and relationship with Agile principles. There is no explicit mentionâ€”or even implied referenceâ€”of 'Definition of Done' (DoD) or its specific criteria, nor does the content delve into how TDD relates to or might be used as a criterion within DoD practices. \n\n- Direct Mentions: Scored 0.4 as there is no mention of the Definition of Done.\n- Conceptual Alignment: Scored 1.5 because, while TDD is sometimes referenced as a practice that can help validate aspects of Done, the content here does not align with or discuss DoD itselfâ€”instead, it exclusively focuses on how TDD benefits teams and code quality.\n- Depth: Scored 1.6 given the thorough exploration of TDD, but not DoD. There's minimal depth regarding the classification topic itself.\n- Intent: Scored 1.8 as the pieceâ€™s intent is informative and aligned to Agile practitioners, but not focused on DoD at all.\n- Audience: Scored 5.2 since the audience (Agile and engineering practitioners) slightly overlaps with DoD discussions, but this is coincidental rather than intentional.\n- Signal-to-Noise Ratio: Scored 5.6 as the piece is focused and clear about TDD, but nearly all of its signal is about its own topic, not Definition of Done.\n\nNo penalties were applied, as the information is neither outdated nor contradicts the DoD framing; it is simply not relevant to it. The tertiary level and confidence score reflect the minimal overlap and lack of direct relevance to the specified category.",
    "level": "Ignored"
  },
  "Personal": {
    "resourceId": "Test Driven Development",
    "category": "Personal",
    "calculated_at": "2025-05-06T11:53:12",
    "ai_confidence": 32.78,
    "ai_mentions": 0.7,
    "ai_alignment": 3.9,
    "ai_depth": 3.8,
    "ai_intent": 2.7,
    "ai_audience": 5.4,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content provides a high-level explanation of Test Driven Development (TDD) and its benefits, including alignment with Agile principles and its impact on team culture and code quality. However, it is purely descriptive and theoretical, lacking any personal anecdotes, reflections, or subjective insights characteristic of the 'Personal' category. \n\n- Mentions (0.7): No direct mention of personal experience or pronouns (e.g., 'I', 'my'), and no reference to 'Personal' as a concept. All references are to general practices and teams.\n- Conceptual Alignment (3.9): While TDD overlaps with Agile and the content addresses Agile-related outcomes, it does so in a generalized manner rather than through personal perspective or lived experience, partially aligning at best.\n- Depth (3.8): The discussion unpacks TDD's principles, benefits, and relation to Agile, but remains objectively descriptive; it does not delve into the author's specific experiences or reflections.\n- Intent (2.7): The purpose appears mainly informative and somewhat advocacy-focused, rather than personal or reflective. There is no intent to share a unique perspective; instead, it seeks to educate about TDD.\n- Audience (5.4): The content suits professionals interested in Agile/DevOps and those considering TDD, somewhat overlapping with the 'Personal' category's audience but focused more on practitioners in general.\n- Signal (7.7): The piece is concise, focused on TDD, and avoids off-topic content, so it is clear and relevant. \n\nNo penalty deductions were triggered as the content is neither outdated, nor satirical/critical, nor contradictory. Overall, the content only has a tertiary fit with the 'Personal' category: it may serve as context material for a personal reflection but lacks actual personal content.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "resourceId": "Test Driven Development",
    "category": "Modern Source Control",
    "calculated_at": "2025-05-06T11:53:19",
    "ai_confidence": 13.25,
    "ai_mentions": 0.25,
    "ai_alignment": 1.0,
    "ai_depth": 1.5,
    "ai_intent": 1.75,
    "ai_audience": 6.0,
    "ai_signal": 5.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content is entirely focused on Test Driven Development (TDD), an important software engineering practice, but it never directly mentions or references any aspect of source control systems, such as Git, branching, merging, code reviews, or related methodologies. \n\nMentions (0.25): There is no explicit or implicit reference to source control; the only possible overlap is that TDD is often used alongside modern source control practices, but this is not discussed.\n\nConceptual Alignment (1.0): TDD and source control are both best practices in modern development, but TDD itself does not inherently require or promote modern source control practices; they are adjacent but not overlapping concepts here.\n\nDepth of Discussion (1.5): The content deeply explores TDD and its benefits but provides no depth regarding source control concepts, strategies, or tools.\n\nIntent/Purpose Fit (1.75): The aim is to promote TDD for quality and engineering excellence; while those using source control might practice TDD, the contentâ€™s guidance and advocacy are not relevant to the use of source control tools or practices.\n\nAudience Alignment (6.0): The target audience (developers/teams interested in modern engineering practices) would likely overlap with the people interested in modern source control, but the content remains firmly in the testing/design domain with no apparent focus on version control practitioners per se.\n\nSignal-to-Noise (5.0): The content is on-topic for TDD but is almost entirely irrelevant to modern source control; most of its 'signal' is for a different category. \n\nNo penalties for outdatedness or tone are justified. As a result, this resource is at best tangentially related (tertiary) to 'Modern Source Control.'",
    "level": "Ignored"
  },
  "Acceptance Test Driven Development": {
    "resourceId": "Test Driven Development",
    "category": "Acceptance Test Driven Development",
    "calculated_at": "2025-05-06T11:53:13",
    "ai_confidence": 18.275,
    "ai_mentions": 0.8,
    "ai_alignment": 1.2,
    "ai_depth": 1.1,
    "ai_intent": 2.4,
    "ai_audience": 2.3,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD), explicitly naming it several times and never referencing Acceptance Test Driven Development (ATDD) directly. The conceptual alignment is very weak: while both TDD and ATDD are test-first approaches, ATDD uniquely involves collaboration among stakeholders, developers, and testers around acceptance criteriaâ€”none of which are mentioned here. The depth is minimal for ATDD as a category; there's no discussion of acceptance criteria, stakeholder involvement, or ATDD-specific practices/tools. The intent is to advocate for TDD, not ATDD, so fit here is quite tangential. The audience (practitioners interested in automated testing and Agile teams) slightly overlaps with ATDD's target audience, but the signal is low because all detailed discussion is off-category. No penalties are warranted as the tone is positive, and the content is not outdated. Thus, this is a tertiary level fitâ€”there may be some vague overlap for someone interested in test-first development, but there's no specific utility for those seeking info on ATDD.",
    "level": "Ignored"
  },
  "Working Software": {
    "resourceId": "Test Driven Development",
    "category": "Working Software",
    "calculated_at": "2025-05-06T11:53:25",
    "ai_confidence": 47.12,
    "ai_mentions": 2.2,
    "ai_alignment": 5.5,
    "ai_depth": 4.8,
    "ai_intent": 5.7,
    "ai_audience": 7.3,
    "ai_signal": 8.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content on Test Driven Development (TDD) is focused on describing the practice of writing tests before implementation to guide software development and improve code quality. \n\nMentions (2.2): 'Working Software' is not directly mentioned; references are generally to 'software' in the context of design and quality, not specifically to working software as an artifact within Agile delivery.\n\nConceptual Alignment (5.5): The content loosely aligns with the categoryâ€™s core meaning: TDD supports the production of functional, reliable software, which is essential to working software. However, the central topic is the methodology (TDD), not the artifact (increment of working software) itself. There are no explicit links made to Scrum increments or working software deliverables, though the connection is implicit through the focus on quality and value delivery.\n\nDepth (4.8): The discussion explores TDDâ€™s impact on code quality, maintainability, reliability, and organizational trust, but only indirectly relates these to working software; it does not substantively discuss the delivery or definition of working software as an artifact.\n\nIntent (5.7): The primary intent is to advocate for TDD as a technique for ensuring better software quality. This is tangentially relevant to the output of working software but does not center on it as the main objective.\n\nAudience (7.3): The content targets practitioners and development teams (the right audience for 'Working Software'), though it could also appeal to those interested in process improvement.\n\nSignal (8.1): The content is focused on TDD without significant tangents or filler, remaining relevant to practical software development, though not to the explicit artifact definition.\n\nLevel: Tertiary, as the content provides context and supporting practices that influence working software, but does not address its definition or function directly. No penalties are applied since the content is current, respectful, and not contradictory.",
    "level": "Tertiary"
  },
  "Organisational Culture": {
    "resourceId": "Test Driven Development",
    "category": "Organisational Culture",
    "calculated_at": "2025-05-06T11:53:17",
    "ai_confidence": 56.176,
    "ai_mentions": 2.7,
    "ai_alignment": 6.8,
    "ai_depth": 6.7,
    "ai_intent": 6.4,
    "ai_audience": 7.1,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 56.0,
    "reasoning": "The provided content is primarily an overview of Test Driven Development (TDD) as a software development practice, with a main focus on its technical benefits and its effects on software quality, accountability, and continuous improvement. In terms of direct mentions, the phrase 'culture' appears twice ('culture of quality and accountability' and 'contributes to a culture of reliability and trust'), but organisational culture is not a primary theme, so the mentions score is low (2.7). Conceptual alignment is moderate (6.8) because the content sometimes links TDD to broader team mindsets and organisational values (e.g., fostering continuous improvement, reliability, adaptability), which overlap with the ideas in the category definition. Depth of discussion about organisational culture is slightly lower than alignment (6.7), since the deeper analysis still centers on technical and team process outcomes more than full cultural transformation. The intent and purpose fit is just above moderate (6.4), as the content's main purpose is to explain TDD, touching on some cultural aspects but not focusing on culture as the core subject. The audience match is fairly strong (7.1), as the language would resonate with practitioners, technical leaders, and those interested in the adoption of Agile/DevOps practices, though cultural leaders/executives would find the focus only tangentially related. Signal-to-noise ratio is moderately high (7.3), since most of the discussion is substantive, with minimal unrelated filler. No penalty points are deducted, since the content is timely, positive, and not misleading. The overall level is 'Secondary'â€”organisational culture is a meaningful sub-theme, but not the main topic. The confidence score (56.176) reflects this evidence and is appropriately moderate.",
    "level": "Tertiary"
  },
  "Kanban": {
    "resourceId": "Test Driven Development",
    "category": "Kanban",
    "calculated_at": "2025-05-06T11:53:14",
    "ai_confidence": 3.92,
    "ai_mentions": 0.2,
    "ai_alignment": 1.2,
    "ai_depth": 1.1,
    "ai_intent": 0.6,
    "ai_audience": 1.2,
    "ai_signal": 0.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 4.0,
    "reasoning": "The content focuses exclusively on Test Driven Development (TDD) â€” a practice centered around writing tests before code. There is no direct reference to Kanban, nor does it discuss Kanban principles such as visualization of workflow, limiting WIP, managing flow, or Kanban-specific metrics. Conceptually, the only faint connection is the shared value of continuous improvement and technical excellence, both of which are also present in Kanban but are agile-wide concepts rather than Kanban-specific aspects. The discussion depth remains within TDD practice and philosophy, never touching Kanbanâ€™s distinct elements (e.g., boards, flow management, WIP limits). The intent is to inform about TDD rather than Kanban, meaning its primary audience is practitioners interested in increasing code quality through testing, not necessarily Kanban practitioners. There is minimal relevance noise, as the piece is focused, but that focus is entirely on TDD and not Kanban. Because all dimension scores are extremely low and negligible links to Kanban exist, the overall confidence remains right at the bottom of the scale for Kanban categorization, and the level is clearly 'Tertiary.' No penalty adjustments were applied since the content is not outdated nor overtly critical of Kanban.",
    "level": "Ignored"
  },
  "Lead Time": {
    "resourceId": "Test Driven Development",
    "category": "Lead Time",
    "calculated_at": "2025-05-06T11:53:13",
    "ai_confidence": 9.849,
    "ai_mentions": 0.2,
    "ai_alignment": 0.6,
    "ai_depth": 0.6,
    "ai_intent": 0.7,
    "ai_audience": 3.0,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content primarily discusses Test Driven Development (TDD) with a focus on code quality, test coverage, accountability, and maintainability in software design and development. There are no explicit or implicit mentions of Lead Time, Cycle Time, or related observability metrics. The content does not discuss process efficiency, duration from work initiation to delivery, or strategies for optimizing flow efficiency or responsiveness. Its main intent is to advocate for TDD as a driver for quality and stakeholder value, not to measure or manage Lead Time. The audience alignment is slightly higher (3.0) since technical practitioners interested in TDD may also deal with process metrics, but the signal is low (1.1) due to complete lack of relevance to Lead Time. No penalties were applied as the content is neither outdated nor opposed in tone, just off-topic for the Lead Time category. The category level is 'Tertiary', as Lead Time is not a focus, subtopic, or explicit consideration in the content.",
    "level": "Ignored"
  },
  "Enterprise Agility": {
    "resourceId": "Test Driven Development",
    "category": "Enterprise Agility",
    "calculated_at": "2025-05-06T11:53:20",
    "ai_confidence": 23.316,
    "ai_mentions": 1.6,
    "ai_alignment": 2.8,
    "ai_depth": 2.7,
    "ai_intent": 2.1,
    "ai_audience": 5.0,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses almost exclusively on Test Driven Development (TDD), which is a team-level software development practice. While the description mentions some benefits that extend 'across the organisation' (such as fostering a culture of quality, trust, and adaptability), these are framed in a general, somewhat aspirational way, rather than discussing how TDD is implemented at enterprise scale, or how it intersects with frameworks, structures, or leadership that enable enterprise agility. The content does discuss adaptability, continuous improvement, collaboration, and responsiveness to change, which are also concepts in enterprise agility, but these points are very indirectly linked to the wider context of transforming an entire organisation. \n\nDirect Mentions (1.6): The term â€˜Enterprise Agilityâ€™ is not named, nor are frameworks, KPIs, or organisational topics distinctive of the category; â€˜Agile principlesâ€™ are mentioned generically. \n\nConceptual Alignment (2.8): Core ideas, such as adaptability and continuous improvement, are discussed, but strictly from a team perspective. There is only a fleeting suggestion that these might have organisational benefitsâ€”no discussion of scaling, cross-team work, leadership, or enterprise models.\n\nDepth (2.7): The exploration is deep regarding TDD itself, but not at all for the enterprise-level agility focus. No advanced or structural enterprise topics are developed.\n\nIntent / Purpose (2.1): The main purpose is to inform about TDD and why it is valuable for teams and code quality, not to explore enterprise agility or its enablers.\n\nAudience (5.0): The audience is most likely team-level practitioners: developers and perhaps team leads, but not executives or enterprise strategists. Since some reference is made to organisational culture and outcomes, itâ€™s rated midscale but certainly not at the level the enterprise agility category targets.\n\nSignal (7.1): The discussion is highly focused on its narrow topic, with most content on TDD. It is concise, with little off-topic material, though the focus is only cursorily relevant to enterprise agility.\n\nNo penalties are applied because the content is current, does not contradict the category, and maintains a neutral-informative tone. \n\nOverall, the confidence is low, and classification as 'Enterprise Agility' would only make sense in a tertiary/edge case where the context strictly required mapping any agility-related practice to the broadest level.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "resourceId": "Test Driven Development",
    "category": "Agnostic Agile",
    "calculated_at": "2025-05-06T11:53:15",
    "ai_confidence": 32.175,
    "ai_mentions": 0.3,
    "ai_alignment": 3.2,
    "ai_depth": 2.4,
    "ai_intent": 3.7,
    "ai_audience": 4.5,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "This content is a clear, focused overview of Test Driven Development (TDD) as a practice for improving code quality and fostering agile values like adaptability, collaboration, and technical excellence. However, it does not directly mention 'Agnostic Agile' at any point, nor does it discuss context-driven agility, ethical considerations, tailoring frameworks, or any of the core principles or distinguishing characteristics of the Agnostic Agile movement. \n\nScoring breakdown:\n- Direct Mentions (0.3): There are no direct references or subtle allusions to Agnostic Agile, and the only indirect tie is a generic mention of 'Agile principles.'\n- Conceptual Alignment (3.2): While TDD can fit within an Agnostic Agile context (since it is adopted selectively based on context), this content doesn't address context sensitivity or critical evaluation of methods. It simply says TDD 'aligns well with Agile principles,' which is a very broad alignment but does not address anything Agnostic or context-driven.\n- Depth of Discussion (2.4): The discussion is reasonably deep about TDD itself, but entirely omits any specific exploration of how TDD would be adopted or adapted based on context, how it fits within a spectrum of methodologies, or any philosophical considerations. There's no discussion of value delivery over framework fidelity.\n- Intent / Purpose Fit (3.7): The content's primary intent is to inform about TDD, not specifically about selecting, combining, or ethically applying practices based on context or Agnostic Agile philosophies. There's no indication the purpose is within Agnostic Agile, but it's also not at odds.\n- Audience Alignment (4.5): The probable audience (developers, practitioners interested in quality and agile practices) could overlap with Agnostic Agile, but it's not specifically targeted. It's generic for agile practitioners or developers interested in TDD.\n- Signal-to-Noise Ratio (7.3): The content is tightly focused on TDD, with a good signal level for information about TDD. However, that's not highly relevant to the Agnostic Agile category, so the effective signal for this classification is lower than for TDD itself.\n\nNo penalties are applied: The content is current, neutral in tone, and does not undermine or satirize the category. \n\nOverall, the content is peripheral (tertiary) to Agnostic Agile: TDD may be something Agnostic Agile practitioners choose to use, but the article does not address ANY of the core philosophical, ethical, or context-driven aspects central to Agnostic Agile proper. All primary and secondary Agnostic Agile themes are missing.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "resourceId": "Test Driven Development",
    "category": "Sensemaking",
    "calculated_at": "2025-05-06T11:53:22",
    "ai_confidence": 22.24,
    "ai_mentions": 0.4,
    "ai_alignment": 2.3,
    "ai_depth": 1.9,
    "ai_intent": 2.2,
    "ai_audience": 2.8,
    "ai_signal": 2.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content is focused on Test Driven Development (TDD) as a software engineering methodology. It describes writing automated tests before coding, emphasizing benefits like code quality, maintainability, and alignment with Agile principles. However, there are no explicit or implicit mentions of 'sensemaking', nor are its frameworks, principles, or typical terminology present. While the discussion of fostering adaptability and collaboration loosely touches on themes relevant to sensemaking, these ideas are not contextualized as organizational approaches to interpreting complexity or making decisions. They remain tied specifically to development practices, making conceptual alignment weak. The depth is also shallow with respect to sensemaking, as there is no substantial examination of interpreting complex environments, decision-making under uncertainty, or collective understanding. The intent is to inform about TDD, not to explore sensemaking theory or practice. The audience is technical and mainly software development focused, not strategists or leaders working in organizational sensemaking contexts. Signal-to-noise is middling because nearly all content is off-topic for sensemaking, though it is focused on its own subject. No penalties were necessary as the content is current and not critical in tone. Thus, overall, TDD is at best peripherally related to sensemaking, landing at the low end as tertiary relevance.",
    "level": "Ignored"
  },
  "Artificial Intelligence": {
    "resourceId": "Test Driven Development",
    "category": "Artificial Intelligence",
    "calculated_at": "2025-05-06T11:53:13",
    "ai_confidence": 3.368,
    "ai_mentions": 0.5,
    "ai_alignment": 1.2,
    "ai_depth": 1.0,
    "ai_intent": 1.3,
    "ai_audience": 5.8,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is an overview of Test Driven Development (TDD), focusing exclusively on the practice of writing automated tests before code and its impact on software quality and development culture. \n\n1. Direct Mentions (0.5): There is no explicit mention of Artificial Intelligence (AI) anywhere in the content. The only indirect possible connection is the mention of 'automated tests', but these references are indisputably to traditional testing and not AI-powered automation.\n\n2. Conceptual Alignment (1.2): The main themes revolve around traditional software practices and quality assurance, not AI, nor the application of AI to Agile or DevOps. While TDD is related to software development, it lacks any discussion of AI integration, use cases, or enhancements. The closest link is its mention within Agile principles, but this is generic and non-AI-specific.\n\n3. Depth of Discussion (1.0): The article explores TDD in depth but not AI, nor does it discuss any intersection between AI and the described methodologies. There is no substantive coverage of AI topics.\n\n4. Intent / Purpose Fit (1.3): The purpose is to inform or advocate for TDD as a quality practice but not in the context relevant to the Artificial Intelligence category as described. There's no educational or analytical intention about AI's role in this area.\n\n5. Audience Alignment (5.8): The audience (software professionals, developers, those interested in Agile practices) partially overlaps with the target group for the 'Artificial Intelligence' category, but that's incidental. It is not aimed at an audience seeking AI-specific content.\n\n6. Signal-to-Noise Ratio (6.2): The content is highly focused on TDD, with little to no irrelevant material. However, because the required focus is on AI in Agile/DevOps, the entire topic is essentially outside the intended scope â€“ thus the low score despite high internal focus.\n\nThere are no elements of outdated content or contradiction, so no penalties were applied. Overall, the confidence score correctly reflects that this is only tangentially, if at all, related to the AI categoryâ€”it does not provide AI value or insight as per the classification definition. Level is 'Tertiary' as there is no direct or even secondary connection to the category.",
    "level": "Ignored"
  },
  "Liberating Structures": {
    "resourceId": "Test Driven Development",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-06T11:53:18",
    "ai_confidence": 2.89,
    "ai_mentions": 0.0,
    "ai_alignment": 1.15,
    "ai_depth": 2.12,
    "ai_intent": 2.05,
    "ai_audience": 4.12,
    "ai_signal": 2.19,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 3.0,
    "reasoning": "The content is exclusively focused on Test Driven Development (TDD), describing its process, benefits, and ties to Agile principles. Nowhere does it mention Liberating Structures, nor does it refer to any facilitation methods related to that toolkit. \n\n- Mentions (0.00): Liberating Structures is not mentioned directly or indirectly.\n- Alignment (1.15): There is minimal conceptual overlap; both TDD and Liberating Structures aim at improving collaboration and outcomes, but the content is about test-first coding, not facilitation techniques or structuring team interactions.\n- Depth (2.12): The discussion on TDD is substantial, but none of the depth is related to Liberating Structures or its methods, resulting in a low score here.\n- Intent (2.05): The main purpose is explaining and advocating for TDD as a quality practice, not facilitation or engagement structures. Intent only marginally aligns to the broader theme of team improvement.\n- Audience (4.12): The content primarily targets developers, teams, and those interested in process quality. While some overlap exists with the audience for Liberating Structures (Agile/Scrum teams), it is not directly aligned.\n- Signal (2.19): The content is focused and relevant to TDD but contains little to no signal about Liberating Structures. Since it remains free of tangents, it is minimally penalized here.\n\nNo penalties were warranted (not outdated, no contradiction, no criticism). The final confidence score lands low, as all evidence points to this content being unrelated to Liberating Structures except in the broadest sense of contributing to team practices.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "Test Driven Development",
    "category": "Increment",
    "calculated_at": "2025-05-06T11:53:22",
    "ai_confidence": 25.675,
    "ai_mentions": 0.5,
    "ai_alignment": 2.4,
    "ai_depth": 3.2,
    "ai_intent": 2.9,
    "ai_audience": 6.0,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 26.0,
    "reasoning": "The content primarily focuses on Test Driven Development (TDD) as a practice to improve software quality by writing tests first, with themes centered on technical excellence, maintainability, and collaboration. \n\n1. Direct Mentions (0.500): The term 'Increment' is not mentioned at all. There are no explicit references to working software increments or tangible outputs of iterative cycles; the only possible tangential connection is the phrase 'deliver value predictably and sustainably,' which is not specific to increments per Scrum definition.\n\n2. Conceptual Alignment (2.400): TDD is somewhat aligned with the Agile principle of iterative delivery, but the narrative here stresses design and quality rather than producing demonstrable increments of working software at each iteration. The content aligns better with Agile technical practices than with the specific definition of Increment as an artifact.\n\n3. Depth of Discussion (3.200): The discussion of TDD is deepâ€”exploring its benefits, impact on culture, and technical outcomesâ€”but it does not delve into how TDD results in usable working software increments per iteration. The relationship of TDD to the actual Increment artifact is implied (via value delivery and maintainability), but not explored directly.\n\n4. Intent / Purpose Fit (2.900): The main purpose is instructive about TDD, not about Increment. While it discusses ways to ensure quality and value, it is not explicitly connected to the delivery of usable output or how TDD affects the formation or assessment of Increments.\n\n5. Audience Alignment (6.000): The intended audience (software developers, Agile teams) overlaps with that of Increment, but is more focused on practitioners interested in software development and quality, not necessarily on Increment ownership, assessment, or management.\n\n6. Signal-to-Noise Ratio (6.700): The content is fairly focused with minimal off-topic discussion, but given the lack of direct relevance to Increments, a significant part of the text is 'noise' for the Increment category, as it serves better under TDD or technical practices. \n\nNo penalty deductions were necessary: the tone is not outdated, satirical, or critical. Overall, TDD is a supporting practice that may enhance Increments' quality but is not itself about Increments. Thus, this content only tangentially fits under the category and is best classified as 'Tertiary' relevance with a low confidence score proportional to this weak alignment.",
    "level": "Ignored"
  },
  "Mentoring": {
    "resourceId": "Test Driven Development",
    "category": "Mentoring",
    "calculated_at": "2025-05-06T11:53:27",
    "ai_confidence": 22.755,
    "ai_mentions": 0.8,
    "ai_alignment": 2.7,
    "ai_depth": 2.9,
    "ai_intent": 1.9,
    "ai_audience": 5.7,
    "ai_signal": 3.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content focuses almost entirely on Test Driven Development (TDD) as a software engineering practice, describing its process, benefits to quality, and alignment with Agile principles. \n\n- Mentions (0.8): The category 'mentoring' or any of its synonyms are never explicitly referenced. There are no direct mentions of mentoring, coaching, or guidance.\n- Alignment (2.7): While TDD is relevant within Agile environments and can be a subject of mentoring, the discussion does not cover mentoring, coaching, or guidance. The closest conceptual bridge is the fostering of a culture of quality and continuous improvement, but these are not discussed in a mentoring contextâ€”rather, as systemic or technical team benefits.\n- Depth (2.9): The discussion provides moderate depth about TDD, but no depth about mentoring practices. There is no exploration of mentoring roles, techniques, or personal/professional growth topics relevant to the mentoring category.\n- Intent (1.9): The main intent is informative about TDD and its relation to Agile, not to provide guidance, development, or support specifically for mentoring or leadership development.\n- Audience (5.7): The content targets technical practitioners (developers, Agile teams), somewhat overlapping with a mentoring audience if the mentoring were about technical practices, which it is not here. Hence, a middling score.\n- Signal (3.1): The content is focused on TDD and Agile, which are not off-topic for the broader domain, but little of the content is tightly relevant to mentoringâ€”the core focus required by the classification definition.\n\nNo penalties applied: The content is current, not satirical or contradictory to the mentoring frame, merely unrelated.\n\nLevel: Tertiary, as the fit to 'Mentoring' is incidental and only via very broad Agile associationâ€”not direct or substantial. The final confidence score (22.755) is low, reflecting the minimal overlap between the content and the mentoring category as strictly defined.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "resourceId": "Test Driven Development",
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-05-06T11:53:23",
    "ai_confidence": 15.103,
    "ai_mentions": 0.0,
    "ai_alignment": 1.3,
    "ai_depth": 1.7,
    "ai_intent": 2.1,
    "ai_audience": 4.2,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content exclusively discusses Test Driven Development (TDD) as a methodology for improving software quality through preemptive automated testing. There are zero explicit mentions or references to customer feedback loops, their mechanisms, or the integration of customer input into product development. For 'Direct Mentions' (0.0), there is no mention of the category or any of its synonyms. 'Conceptual Alignment' (1.3) reflects tangential alignment: TDD fosters improvement and quality, concepts shared with the customer feedback loop domain, but all improvement is internally focused, via tests, not user/customer feedback. The 'Depth of Discussion' (1.7) is slightly higher than conceptual alignment because the text deeply explores TDD, but never the process of gathering or utilizing customer feedback. 'Intent/Purpose Fit' (2.1) reflects the marginal relevanceâ€”the aim here is quality, but not by means of feedback loops per se. 'Audience Alignment' (4.2): The target audience (software developers, possibly Agile practitioners) overlaps somewhat with the feedback loop audience, but the topic doesn't address their concerns regarding customer insight. 'Signal-to-Noise Ratio' (3.3): Nearly all the content focuses on TDD, not on customer feedback, thus it is weakly relevant. No penalties were assessed, as the content is neither outdated nor contradictory. Overall, this content barely touches any aspects of the 'Customer Feedback Loops' category and merits a low 'Tertiary' level classification.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "resourceId": "Test Driven Development",
    "category": "Strategic Goals",
    "calculated_at": "2025-05-06T11:53:17",
    "ai_confidence": 43.217,
    "ai_mentions": 1.7,
    "ai_alignment": 4.6,
    "ai_depth": 4.2,
    "ai_intent": 5.1,
    "ai_audience": 5.9,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "The content primarily discusses Test Driven Development (TDD) as a development methodology aimed at improving software quality through the use of automated tests. \n\n- Mentions: There are no direct mentions of 'strategic goals' or explicit references to long-term business objectives. However, there are scattered references to long-term benefits, adaptability, and alignment with agile principles, warranting a low score (1.7).\n- Alignment: Some conceptual alignment exists: the content notes TDD's contribution to adaptability, continuous improvement, and fostering a quality culture, which can indirectly tie to strategic goals, especially in agile organisations. Still, the focus remains on software engineering practices rather than high-level strategic objectives, resulting in a modest score (4.6).\n- Depth: The explanation of TDD is substantial and covers systemic impacts like maintainability, reliability, and a culture of improvement, but does not delve into frameworks, measurement, or the formal articulation of strategic goals. Depth score is therefore moderate (4.2).\n- Intent: The main intent is to inform about TDD and its benefits for teams and organisations; though this is adjacent to strategic impact, it is not purpose-built for the strategic goals category (score: 5.1).\n- Audience: The content is accessible to both practitioners and those interested in agile or organisational improvement, but it is not specifically aimed at executives or strategist decision-makers focused on setting strategic goals, leading to a middling audience fit score (5.9).\n- Signal: The discussion is focused on TDD, with some relevant references to long-term improvements and agile alignment, but the majority is on process and culture rather than strategy (score: 6.2).\n\nNo penalties were applied: there is no outdated or contradictory material present. The confidence score reflects the peripheral relationship to 'Strategic Goals', placing this as a tertiary fitâ€”it touches on cultural and continuous improvement aspects that matter for strategy, but never addresses goals explicitly or at the organisational strategy level.",
    "level": "Tertiary"
  },
  "Market Share": {
    "resourceId": "Test Driven Development",
    "category": "Market Share",
    "calculated_at": "2025-05-06T11:53:28",
    "ai_confidence": 1.235,
    "ai_mentions": 0.3,
    "ai_alignment": 0.8,
    "ai_depth": 0.7,
    "ai_intent": 0.4,
    "ai_audience": 1.2,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 1.0,
    "reasoning": "The content is entirely focused on explaining the principles and benefits of Test Driven Development (TDD) within software engineering. There is not a single explicit mention of 'market share', nor are there any references to competitive positioning, strategies for increasing a product's presence, or analysis of market expansionâ€”all of which are critical elements under the 'Market Share' category. The main themes revolve around software quality, maintainability, accountability, and alignment with agile practices. \n\nDirect Mentions (0.3): 'Market share' and related terminology are not referenced at all; this low score reflects only the most abstract possibility that improved quality could theoretically impact competitiveness (but this is not discussed).\n\nConceptual Alignment (0.8): The content does not discuss market share concepts, metrics, strategies, or competitive advantage. While quality improvement may support growth, the content is wholly situated in technical and process improvement, not market positioning.\n\nDepth of Discussion (0.7): The depth is highâ€”but entirely about TDD and code quality, not market share strategies or competitive advantages.\n\nIntent/Purpose Fit (0.4): The primary purpose is education on TDD for quality improvement, not advancing market share objectives.\n\nAudience Alignment (1.2): The target audience appears to be software practitioners or managers interested in development methodologies, not strategists, marketers, or executives concerned with market share expansion.\n\nSignal-to-Noise Ratio (1.1): The content is internally focused and high in signal for TDD topics, but essentially all noise regarding the 'Market Share' category as defined.\n\nNo penalties applied: The content is not outdated, nor does it contradict or critique market share conceptsâ€”it simply is irrelevant to them.\n\nOverall, the tertiary level reflects that if at all present, the relevance to 'Market Share' is only at a very indirect or background level, not in substance or focus.",
    "level": "Ignored"
  },
  "System Configuration": {
    "resourceId": "Test Driven Development",
    "category": "System Configuration",
    "calculated_at": "2025-05-06T11:53:18",
    "ai_confidence": 7.287,
    "ai_mentions": 0.2,
    "ai_alignment": 0.4,
    "ai_depth": 0.5,
    "ai_intent": 0.6,
    "ai_audience": 2.2,
    "ai_signal": 0.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content focuses extensively on Test Driven Development (TDD), a methodology for software development that emphasizes the importance of automated tests written prior to the implementation of code. TDD is positioned in the text as a practice that encourages higher code quality, adaptability, and technical excellence. However, the content does not directly reference system configuration, nor does it engage with any of the core areas the System Configuration category seeks to cover (such as configuration management tools, system optimization, integration of hardware/software, automation for system setup, or security considerations related to configuration). Each of the key topics mentioned in the system configuration definition (e.g., configuration automation, performance optimization, ongoing maintenance of configurations) is absent or only very indirectly touched upon. The only possible tangential relevance is the notion of automated testing contributing to software reliability, but this is about code correctness and technical debt preventionâ€”not about configuring systems, integrating components, or maintaining environments.\n\nScoring details: \n- Direct Mentions: 0.2/10, as there is not a single mention of the term 'system configuration' or any direct synonym; TDD is about workflow and code, not configuration.\n- Conceptual Alignment: 0.4/10, since the contentâ€™s core ideas (software design, maintainability, test coverage) are only distantly and abstractly related to the goals of system configuration.\n- Depth of Discussion: 0.5/10, as the text does not go into configuring systems, tools for configuration, automation of system environments, or best practices for setup/maintenance. Its entirety is about TDD processes.\n- Intent/Purpose Fit: 0.6/10, the intent is to educate about the benefits of TDD for developers, not about configuring systems or infrastructure; any overlap is purely incidental.\n- Audience Alignment: 2.2/10, as the intended audience is technical (developers), but not specifically those concerned with system configuration; some overlap may exist if the audience handles both development and operational concerns.\n- Signal-to-Noise: 0.1/10, as the entire content is off-topic with respect to system configuration. \n\nNo penalties applied, as the content is not outdated, nor does it criticize or contradict the category framing, it simply does not relate.\n\nTertiary level: The content is three or more degrees removed from the System Configuration category, being a broad software engineering practice rather than anything to do with system configuration tools, methods, or maintenance.",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "resourceId": "Test Driven Development",
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-05-06T11:53:17",
    "ai_confidence": 14.29,
    "ai_mentions": 0.35,
    "ai_alignment": 1.55,
    "ai_depth": 2.1,
    "ai_intent": 1.3,
    "ai_audience": 4.1,
    "ai_signal": 4.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content exclusively discusses Test Driven Development (TDD), focusing on writing tests before code to drive software quality. There are no direct or explicit mentions of Hypothesis Driven Development, experimentation, or validated learning associated with the target category, resulting in a near-minimum score for Direct Mentions (0.35). Conceptual Alignment is low (1.55): while both TDD and Hypothesis Driven Development (HDD) use the language of 'tests' and 'validation,' TDD is about code correctness/requirements, not hypothesis formulation or experimentation for product decisions. Depth of Discussion on HDD is minimal (2.10), as all examples pertain solely to software code/quality, not user-feature hypotheses or empirical product experiments. Intent (1.30) is not alignedâ€”the content's purpose is to inform about TDD, not hypothesis-driven practices. Audience Alignment (4.10) is higher, as both TDD and HDD generally target product development practitioners, which is the closest overlap in this content. Signal-to-Noise (4.60) is modest: almost all of the content is on-topic for TDD, but off-topic with respect to HDD. No penalty deductions apply, as the tone is neither outdated nor critical. Overall, the confidence score is very low (14.29), justifiably placing this as 'Tertiary' relevance: there are only passing conceptual parallels and no substantial grounding in Hypothesis Driven Development as defined.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "resourceId": "Test Driven Development",
    "category": "Product Strategy",
    "calculated_at": "2025-05-06T11:53:22",
    "ai_confidence": 13.725,
    "ai_mentions": 0.15,
    "ai_alignment": 2.375,
    "ai_depth": 2.1,
    "ai_intent": 1.85,
    "ai_audience": 5.15,
    "ai_signal": 2.65,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "This content focuses almost entirely on Test Driven Development (TDD) as a software development and technical quality assurance practice. There are no direct mentions of product strategy, nor does the discussion align conceptually with product vision, roadmapping, competitive analysis, or other key product strategy topics. While the content touches slightly on high-level outcomes such as 'delivering value' and 'outcomes for stakeholders and customers,' these are broad benefits relating to software craftsmanship and team practices, not to the frameworks or methodologies involved in defining product vision or market positioning. The depth is moderate within TDD and software development best practices, not strategy. The intent is to evangelize technical process improvement, not to inform or educate on product strategy at any level. The audience is primarily developers, possibly technical leads, with no direct overlap with product strategists or executives. The signal-to-noise ratio for product strategy is low since nearly the entire piece is about technical (not strategic) concerns. No penalty points were needed as the tone is neutral and current. The weak conceptual and direct connection results in a very low tertiary confidence for the 'Product Strategy' category.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "resourceId": "Test Driven Development",
    "category": "Continuous Delivery",
    "calculated_at": "2025-05-06T11:53:15",
    "ai_confidence": 27.39,
    "ai_mentions": 0.1,
    "ai_alignment": 3.9,
    "ai_depth": 3.6,
    "ai_intent": 3.7,
    "ai_audience": 7.3,
    "ai_signal": 7.63,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "Direct Mentions (0.10): The term 'Continuous Delivery' does not appear explicitly or implicitly. The entire content focuses on Test Driven Development (TDD) without naming CD or its main practices.\nConceptual Alignment (3.90): There is some conceptual overlap, as TDD can be a foundation for automation and reliable releases (principles underlying Continuous Delivery), but the content stops at discussing TDDâ€™s culture, discipline, and overall benefits without explicitly tying it to release velocity, deployment, or delivery pipelines.\nDepth of Discussion (3.60): The discussion is thorough regarding TDDâ€”its process, benefits, and alignment with Agile and quality-centric thinkingâ€”but does not engage with the deeper mechanics of Continuous Delivery or delivery pipelines.\nIntent / Purpose Fit (3.70): The main intent is to promote TDD as a path to better design and quality. While these are also relevant to CD, the content does not frame TDD within the context of deployment frequency, automating releases, or delivering at any time, which are central to CDâ€™s intent.\nAudience Alignment (7.30): The discussion targets practitioners interested in quality, automation, and discipline in software engineering, which overlaps with the Continuous Delivery audience, but the subject remains TDD-centric (not delivery-centric).\nSignal-to-Noise Ratio (7.63): The content is focused and well-articulated for its topic (TDD), though only tangentially related to Continuous Delivery. Thereâ€™s no digression, but the majority of the substance is not about CD itself.\nNo penalties applied: The content is current, not outdated, and does not contradict or satirize the category. Final confidence reflects that while there is some background relationship (TDD is often practiced inside CD environments), the material neither discusses, defines, nor explores Continuous Delivery as its main subject. Thus, it is appropriately rated as tertiary.",
    "level": "Ignored"
  },
  "Competence": {
    "resourceId": "Test Driven Development",
    "category": "Competence",
    "calculated_at": "2025-05-06T11:53:20",
    "ai_confidence": 68.45,
    "ai_mentions": 3.8,
    "ai_alignment": 7.6,
    "ai_depth": 7.2,
    "ai_intent": 7.3,
    "ai_audience": 8.2,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 68.0,
    "reasoning": "The content focuses on Test Driven Development (TDD) and its role in software design, automated testing, and overall code quality. It frequently references practices (automated testing, quality, accountability, adaptability) that overlap with core elements of competence, such as continuous improvement and technical excellence. However, the term 'competence' itself is never explicitly mentioned, nor are skill development, mastery, or deliberate practice directly addressedâ€”justifications for a moderate score on Direct Mentions (3.8) and not the highest possible on Depth (7.2). The Alignment, Depth, and Intent scores are strong because the benefits describedâ€”reduced defects, fostering a culture of quality, continuous improvement, and maintainabilityâ€”are tightly linked with organizational competence and professionalism. Audience Alignment is high, as content is clearly aimed at practitioners and teams working with Agile/DevOps concepts. The Signal-to-Noise is also strong: the text is focused, with little irrelevant material. No penalties are needed as the tone is positive, not outdated, and closely aligns with the modern competence-driven framing in Agile environments. Final Level: Secondary, since competence is an important underpinning theme but not the sole, explicit focus.",
    "level": "Secondary"
  },
  "Scrum": {
    "resourceId": "Test Driven Development",
    "category": "Scrum",
    "calculated_at": "2025-05-06T11:53:42",
    "ai_confidence": 29.553,
    "ai_mentions": 0.2,
    "ai_alignment": 4.9,
    "ai_depth": 3.85,
    "ai_intent": 3.6,
    "ai_audience": 6.2,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 30.0,
    "reasoning": "The content explicitly discusses Test Driven Development (TDD) by name and never directly mentions Scrum, the Scrum framework, or its roles, events, or artifacts. Thus, the Direct Mentions score is extremely low at 0.2. For Conceptual Alignment, TDD aligns partially with Agile principlesâ€”which are a part of Scrumâ€”but the main focus is on TDD practices, not Scrum processes, earning a moderate score of 4.9. Depth of Discussion is limited, as there is no exploration of Scrum roles, ceremonies, or artifacts, but there is a deep dive into TDD itself, leading to a below-average 3.85 for Scrum relevance. The Intent score (3.6) reflects that the content is tangentially relevant due to references to Agile principles and continuous improvement but is focused specifically on test automation, not Scrum methodology. Audience Alignment is higher (6.2) because both TDD and Scrum often target software development teams; however, specificity towards Scrum practitioners is lacking. Signal-to-Noise Ratio is reasonable (6.6), as the content is focused on TDD and does not contain filler, although its relevance to Scrum is tangential. No penalties for outdatedness or misalignment are applied; no contradictions or obsolete practices are present. Overall, the content is Tertiaryâ€”it may interest Scrum practitioners as a related good practice but is not centrally about Scrum.",
    "level": "Ignored"
  },
  "Current Value": {
    "resourceId": "Test Driven Development",
    "category": "Current Value",
    "calculated_at": "2025-05-06T11:53:49",
    "ai_confidence": 16.848,
    "ai_mentions": 0.7,
    "ai_alignment": 1.2,
    "ai_depth": 1.5,
    "ai_intent": 2.1,
    "ai_audience": 5.2,
    "ai_signal": 5.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content is a focused discussion on Test Driven Development (TDD) as a software engineering practice. It highlights its process (writing tests before code) and emphasizes benefits such as quality, accountability, maintainability, and stakeholder trust. However, it does not directly mention 'Current Value,' nor does it discuss or reference Evidence-Based Management. There is no mention of explicit indicators, metrics, or methods for measuring real-time value delivered to customers as defined in the classification. The discussion around 'delivering value' is present but abstract and not aligned to 'Current Value' in its technical EBM senseâ€”the value concept is implied in the context of general software development quality, not in the EBM metric sense. The depth of discussion regarding 'Current Value' is minimal and not aligned; however, the target audience (software and Agile practitioners, possibly managers) is at least somewhat compatible with the category, and the content is focused with little off-topic text. No penalties were applied, as the text is neither outdated nor contrary in tone. Overall, this rates as a Tertiary level fit, as 'Current Value' is not directly or even substantially addressed except perhaps in an extremely tangential sense relating to overall software quality or stakeholder outcomes.",
    "level": "Ignored"
  },
  "Trend Analysis": {
    "resourceId": "Test Driven Development",
    "category": "Trend Analysis",
    "calculated_at": "2025-05-06T11:53:15",
    "ai_confidence": 36.609,
    "ai_mentions": 1.1,
    "ai_alignment": 3.0,
    "ai_depth": 3.2,
    "ai_intent": 4.5,
    "ai_audience": 6.5,
    "ai_signal": 8.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content focuses on explaining what Test Driven Development (TDD) is and why it is beneficial for software quality, maintainability, and alignment with Agile principles. However, it does not discuss actual trends, emerging patterns, or shifts in TDD practice across Agile, DevOps, or business agility landscapes. There are almost no direct mentions of 'trends,' 'trend analysis,' or inference about pattern shiftsâ€”scoring a very low 1.1 for Direct Mentions, acknowledging a nod to 'long-term benefits' and 'continuous improvement.' Conceptual Alignment is also low (3.0) because the content aligns with core values of Agile but not with Trend Analysis as a discipline. Depth (3.2) reflects some exploration of impacts and methodology but nothing trend-specific. Intent (4.5) recognizes informative purpose and some relevance to those interested in Agile improvement, but this is not the intent of Trend Analysis. Audience (6.5) is higher because practitioners, teams, and organizations interested in Agile or DevOps would likely be reading, though the focus is TDD technique. Signal (8.2) is strong because the content is focused and relevant to TDD and Agile development, though not to the Trend Analysis category. No penalties apply as the content is current, accurate, and respectful. This is a 'Tertiary' level fit: TDD itself might be the subject of a trend analysis, but the article does not conduct such analysis, nor does it discuss trend monitoring techniques or cases.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "resourceId": "Test Driven Development",
    "category": "Organisational Change",
    "calculated_at": "2025-05-06T11:53:52",
    "ai_confidence": 20.717,
    "ai_mentions": 0.9,
    "ai_alignment": 2.4,
    "ai_depth": 2.5,
    "ai_intent": 1.7,
    "ai_audience": 2.2,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "Direct Mentions (0.9): 'Organisational change' or related frameworks (e.g., Agile transformation, ADKAR) are never explicitly mentioned. Indirect concepts of improvement and culture appear, but references are sparse and implicit.\n\nConceptual Alignment (2.4): The discussion centers on Test Driven Development (TDD), which, while nominally aligned with aspects of agility and continuous improvement, is primarily a technical practice. The only connection to organisational change is general references to adaptability, team culture, and Agile principles. There is no substantive treatment of organisational change processes, models, or leadership roles in transformation.\n\nDepth of Discussion (2.5): The piece does delve into TDD benefits, discussing culture, adaptability, and team practices, but these are discussed strictly within a software development and quality assurance context. It never expands into the depth required for organisational change topics (frameworks, resistance, transformation strategies, etc.).\n\nIntent / Purpose Fit (1.7): The purpose is clearly to inform about TDD as a development methodology, not to address organisational transformation strategies, leadership for change, or broad-scale agile or lean integration. Any overlap with organisational change is coincidental rather than intentional. \n\nAudience Alignment (2.2): The content primarily targets software developers and teams focused on technical excellence. There is limited resonance with executives, strategists, or change management professionalsâ€”the primary audience for 'Organisational Change.'\n\nSignal-to-Noise Ratio (2.8): Most of the content is relevant to TDD and its related culture, with only slivers that might tangentially interest an organisational change practitioner (e.g., references to culture, sustainability, predictability). However, these are side benefits, not the core message.\n\nNo penalties applied, as the discussion is not outdated, nor criticalâ€”merely off-scope relative to the strict definition of the category. \n\nOverall, this content is only superficially connected to 'Organisational Change' at a tertiary level, with the main focus on a technical software quality practice.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "resourceId": "Test Driven Development",
    "category": "Organisational Psychology",
    "calculated_at": "2025-05-06T11:53:57",
    "ai_confidence": 17.073,
    "ai_mentions": 0.3,
    "ai_alignment": 1.05,
    "ai_depth": 1.6,
    "ai_intent": 0.95,
    "ai_audience": 2.0,
    "ai_signal": 1.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content primarily discusses the software engineering practice of Test Driven Development (TDD). There is minimal direct reference to psychology or the psychological aspects listed under 'Organisational Psychology.' For 'Direct Mentions' (0.3), there are virtually no mentions of organisational psychology concepts or terminology (e.g., leadership, motivation, team dynamics). For 'Conceptual Alignment' (1.05), the focus is almost entirely on technical practices, with very slight alignment in references to topics like 'culture of quality' and 'accountability,' which may tangentially relate to organisational attitudes but do not engage psychological theory or research. For 'Depth of Discussion' (1.6), any discussion that might align more closely with organisational psychology is fleeting or surface level, such as the reference to 'mindset of continuous improvement' or 'culture of reliability.' No in-depth analysis, models, or psychological perspectives are provided. For 'Intent/Purpose Fit' (0.95), the intent is to explain TDDâ€™s benefits for code and development processes, not to discuss how psychological principles drive organisational outcomes. For 'Audience Alignment' (2.0), the content is aimed at technical practitioners, not those with a focus on organisational behaviour or psychology, though some language about 'culture' mildly overlaps. 'Signal-to-Noise Ratio' (1.2) reflects that over 90% of the content is outside the category definition, with only isolated references to peripheral themes like 'culture' or 'collaboration.' No penalties were applied, as the content is current and not satirical or critical of the category. In sum, while there are minor mentions of culture or team, the article does not meaningfully engage with the concepts, theories, or audiences relevant to Organisational Psychology, and thus lands in the 'Tertiary' level with low confidence.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "resourceId": "Test Driven Development",
    "category": "Cross Functional Teams",
    "calculated_at": "2025-05-06T11:53:14",
    "ai_confidence": 17.841,
    "ai_mentions": 0.8,
    "ai_alignment": 2.1,
    "ai_depth": 2.38,
    "ai_intent": 2.62,
    "ai_audience": 5.11,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "Direct Mentions: The content does not directly reference cross-functional teams at all (score: 0.8). The only connection is an indirect reference to 'teams' engaging in TDD and fostering collaboration, but no mention of team structure or diverse skills. Conceptual Alignment: The main topic is TDD, a development and testing practice. Although TDD can exist in cross-functional teams, the content does not establish this link. Alignment with cross-functional concepts is minimal (score: 2.1) due to surface-level mention of collaboration and quality culture. Depth of Discussion: The content deeply explores TDD, not cross-functional teams (score: 2.38). There is no substantive discussion on team composition, structure, or typical cross-functional team challenges or benefits. Intent / Purpose Fit: The intent is to inform about TDD, not about cross-functional teams. Agile is referenced, but only in the context of TDDâ€™s alignment with some Agile principles (score: 2.62). Audience Alignment: The audience is likely Agile practitioners, software developers, or those interested in quality practices, which can overlap with readers interested in cross-functional teams, thus a moderate score (5.11). Signal-to-Noise Ratio: Content stays focused on TDD and its benefits, with minimal unrelated content, but since little of it is on cross-functional teams, relevance to this category is low (6.2). No penalties were applied, as the content is current, neutral in tone, and not misleading. Level: Tertiaryâ€”cross-functional teams are at best an implied background to the team's practice, not discussed or analyzed. The very low overall confidence (17.841) reflects the almost complete absence of direct relevance from the content to the 'Cross Functional Teams' category.",
    "level": "Ignored"
  }
}