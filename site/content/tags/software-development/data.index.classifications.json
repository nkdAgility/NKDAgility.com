{
  "Tool": {
    "category": "Tool",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 10.0,
    "ai_alignment": 40.0,
    "ai_depth": 20.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses software development methodologies and practices but does not explicitly mention any specific tools or their functionalities. While it aligns conceptually with Agile, Lean, and DevOps principles, it lacks a focus on tools that facilitate these methodologies. The depth of discussion is more about the overall approach rather than specific tools, leading to a low confidence score.",
    "level": "Ignored"
  },
  "Accountability": {
    "category": "Accountability",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on software development methodologies and practices without explicitly discussing accountability as a foundational mechanism. While it mentions Agile and DevOps, it does not delve into the structural accountabilities or role-specific responsibilities that are central to the category of accountability. The discussion lacks depth regarding how accountability influences performance or aligns with organisational design patterns.",
    "level": "Ignored"
  },
  "Framework": {
    "category": "Framework",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses software development methodologies, including Agile, Lean, and DevOps, but does not focus specifically on frameworks or their implementation. While it touches on principles relevant to frameworks, it lacks a detailed exploration of specific frameworks or their adaptability in various contexts, which is essential for a higher confidence score in the Framework category.",
    "level": "Ignored"
  },
  "Values": {
    "category": "Value",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 50,
    "final_score": 32.0,
    "reasoning": "The content discusses software development methodologies and their impact on collaboration and efficiency, but it primarily focuses on techniques rather than the underlying values that guide these practices. While there are mentions of Agile and Lean, the discussion lacks a deep exploration of the core values that influence team dynamics and organisational behaviour.",
    "level": "Ignored"
  },
  "Tenet": {
    "category": "Tenet",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses various methodologies like Agile, Lean, and DevOps, which are relevant to the category of Tenet. However, it lacks explicit mentions of specific tenets or actionable guiding rules that shape decision-making. While it touches on concepts like continuous improvement and adaptability, these are presented in a general context rather than as prescriptive tenets. The depth of discussion is moderate, providing a broad overview of software development practices without delving into specific tenets.",
    "level": "Ignored"
  },
  "Method": {
    "category": "Method",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 42.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 30.0,
    "non_ai_confidence": 30,
    "final_score": 42.0,
    "reasoning": "The content discusses various methodologies and techniques in software development, touching on Agile, Lean, and DevOps. However, it lacks a focused discussion on specific methods or structured procedures, which are essential for the 'Method' category. While it mentions iterative development and practices that enhance collaboration and efficiency, it does not delve into the step-by-step processes or specific methods like Scrum or Kanban, which would be necessary for a higher confidence score.",
    "level": "Tertiary"
  },
  "Strategy": {
    "category": "Strategy",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 67.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 50.0,
    "non_ai_confidence": 0,
    "final_score": 67.0,
    "reasoning": "The content discusses software development methodologies and their integration with organisational goals, which aligns with strategic objectives. However, it primarily focuses on operational practices rather than high-level strategic discussions, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Practice": {
    "category": "Practice",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 62.0,
    "ai_mentions": 15.0,
    "ai_alignment": 35.0,
    "ai_depth": 12.0,
    "non_ai_confidence": 30,
    "final_score": 62.0,
    "reasoning": "The content discusses various techniques and methodologies related to software development, which aligns with the category of Practice. However, it lacks direct mentions of specific practices like Pair Programming or TDD, and the depth of discussion on actionable techniques is limited. The focus is more on overarching concepts rather than specific, repeatable actions that enhance team performance.",
    "level": "Secondary"
  },
  "Philosophy": {
    "category": "Philosophy",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses methodologies like Agile, Lean, and DevOps, but primarily focuses on the techniques and practices of software development rather than the philosophical underpinnings of these methodologies. While there are mentions of concepts like continuous improvement and evidence-based management, the discussion lacks a deep exploration of the foundational beliefs that shape these practices. The emphasis is more on the 'how' rather than the 'why' behind the methodologies, which is crucial for a strong alignment with the Philosophy category.",
    "level": "Ignored"
  },
  "Observability": {
    "category": "Observability",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 5.0,
    "ai_depth": 2.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content primarily focuses on software development methodologies and practices, with no explicit mention of observability or its key components such as metrics, logs, or traces. While it discusses Agile and DevOps principles, it does not delve into how observability enhances these practices or the impact of observability on team performance. Therefore, the content does not align with the core themes of observability.",
    "level": "Ignored"
  },
  "Capability": {
    "category": "Capability",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 72.0,
    "ai_mentions": 15,
    "ai_alignment": 32,
    "ai_depth": 25,
    "non_ai_confidence": 0,
    "final_score": 72.0,
    "reasoning": "The content discusses the integration of Agile, Lean, and DevOps methodologies, which aligns with the core themes of capability development. It highlights the importance of a systematic approach to software development that fosters collaboration, efficiency, and adaptability, all of which are essential characteristics of enduring capabilities. The depth of discussion on continuous improvement and the cultivation of an innovative environment further supports the alignment with the Capability category. However, the primary focus on techniques and methodologies slightly detracts from a pure capability discussion, hence the score is not higher.",
    "level": "Secondary"
  },
  "Model": {
    "category": "Model",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 25.0,
    "ai_depth": 40.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content discusses software development methodologies and practices, which are relevant to the broader context of models in Agile, Lean, and DevOps. However, it does not explicitly focus on specific conceptual models or frameworks, such as the Cynefin Framework or Lean Startup principles. While it touches on themes of iterative development and evidence-based management, these are not explored in depth as models. Therefore, the confidence score reflects a moderate alignment with the category, primarily due to the lack of direct mention and specific focus on models.",
    "level": "Ignored"
  },
  "Principle": {
    "category": "Principle",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 67.0,
    "ai_mentions": 12,
    "ai_alignment": 30,
    "ai_depth": 25,
    "non_ai_confidence": 30,
    "final_score": 67.0,
    "reasoning": "The content discusses various methodologies like Agile, Lean, and DevOps, which are rooted in principles that guide decision-making and team behaviour. It mentions continuous improvement and adaptability, aligning with the core themes of the category. However, the focus is more on techniques and methodologies rather than explicitly discussing the principles themselves, leading to a moderate confidence score.",
    "level": "Secondary"
  },
  "Artifact": {
    "category": "Artifact",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 12.0,
    "ai_mentions": 10.0,
    "ai_alignment": 10.0,
    "ai_depth": 15.0,
    "non_ai_confidence": 0,
    "final_score": 12.0,
    "reasoning": "The content discusses software development methodologies and practices but does not explicitly mention artifacts or their specific roles in Agile, Scrum, or Lean. While it touches on concepts like iterative development and evidence-based management, it lacks a focused exploration of artifacts as formal representations of work, which is essential for a higher confidence score in this category.",
    "level": "Ignored"
  },
  "Discipline": {
    "category": "Discipline",
    "calculated_at": "2025-04-10T13:21:00",
    "ai_confidence": 32.0,
    "ai_mentions": 15.0,
    "ai_alignment": 40.0,
    "ai_depth": 25.0,
    "non_ai_confidence": 0,
    "final_score": 32.0,
    "reasoning": "The content primarily discusses software development methodologies and practices, which are related to discipline in terms of structured approaches and systematic processes. However, the term 'discipline' is not explicitly mentioned, and while there is some alignment with the core themes of discipline through the emphasis on systematic approaches and continuous improvement, the depth of discussion specifically on discipline is limited. Therefore, the confidence score reflects a moderate connection to the category.",
    "level": "Ignored"
  },
  "Scrum Values": {
    "resourceId": "Software Development",
    "category": "Scrum Values",
    "calculated_at": "2025-05-06T11:50:15",
    "ai_confidence": 13.26,
    "ai_mentions": 0.8,
    "ai_alignment": 1.2,
    "ai_depth": 0.9,
    "ai_intent": 1.4,
    "ai_audience": 2.2,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The content focuses broadly on software development methodologies, including references to Agile, Lean, and DevOps, but makes no direct mention of Scrum Values (commitment, courage, focus, openness, respect) or themes unique to them. \n\nMentions (0.8): There are no explicit or even implicit references to Scrum Values by name or clear synonym, resulting in a very low score here. \n\nAlignment (1.2): While 'collaboration', 'continuous improvement', and 'cross-functional collaboration' are discussed, these are generic Agile concepts and do not specifically align with the Scrum Values as defined in the classification. \n\nDepth (0.9): The discussion remains at the surface level regarding values or principles, with no deep exploration of any of the five Scrum Values. The emphasis is on methodologies and practices, not core values. \n\nIntent (1.4): The primary purpose is to provide an overview of software development practices, not to inform, discuss, or develop understanding around Scrum Values.\n\nAudience (2.2): The target audience is practitioners and organisations interested in software engineering at large, not specifically Scrum teams or those focused on the Scrum Values. The score is slightly higher as some mentions (collaboration, continuous improvement) could be of tangential interest to Scrum practitioners.\n\nSignal (1.1): There is some overlap with Scrum-adjacent topics (e.g., iterative development, collaboration), but this does not amount to clear or sustained focus on the Scrum Values. The majority of the content is off-topic concerning the classification.\n\nLevel: Tertiary—at best, the relationship to Scrum Values is distant, implied only through generic references to collaboration and improvement; there is no direct or meaningful exploration as required by the definition.\n\nNo penalties were applied, as there are no outdated or contradictory statements, nor does the tone undermine the category framing.",
    "level": "Ignored"
  },
  "Metrics and Learning": {
    "resourceId": "Software Development",
    "category": "Metrics and Learning",
    "calculated_at": "2025-05-06T11:50:13",
    "ai_confidence": 60.57,
    "ai_mentions": 3.2,
    "ai_alignment": 6.3,
    "ai_depth": 6.1,
    "ai_intent": 7.1,
    "ai_audience": 8.0,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content primarily describes general techniques and methodologies in software development, with references to Agile, Lean, and DevOps, which conceptually align with the 'Metrics and Learning' category. However, it stops short of directly and explicitly discussing metrics collection, analysis, or concrete feedback mechanisms. While the text touches on continuous improvement, responsiveness to change, evidence-based management, and iterative development—each thematically related—it does not delve into specifics of metrics usage, data analysis techniques, or detailed feedback loops. There is a high alignment for practitioners and teams seeking to improve processes, but the audience is generic to software engineering and not solely focused on metrics-focused communities. Signal-to-noise ratio is fairly strong as most content is relevant to improvement and learning, but much of it is broad rather than category-specific. No penalties were needed: the content is contemporary, not satirical or critical, and does not reference obsolete practices. The 'Secondary' level classification is justified because, although connected to the topic, metrics and learning are not the explicit focus—rather, they're woven in as part of the general narrative about effective software development.",
    "level": "Secondary"
  },
  "Value Stream Management": {
    "resourceId": "Software Development",
    "category": "Value Stream Management",
    "calculated_at": "2025-05-06T11:50:13",
    "ai_confidence": 29.296,
    "ai_mentions": 0.7,
    "ai_alignment": 3.3,
    "ai_depth": 2.9,
    "ai_intent": 4.4,
    "ai_audience": 4.2,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content addresses broad software development methodologies, emphasising practices like Agile, Lean, and DevOps, continuous improvement, and the delivery of value. However, it does not explicitly mention 'Value Stream Management' itself, nor its specific tools, techniques, or principles such as value stream mapping, metrics, or the direct organisational alignment and waste elimination focus core to VSM. Some terms (e.g., efficiency, value delivery, continuous improvement) are conceptually adjacent to VSM but remain high-level and not specifically targeted; depth of discussion on value flow or value stream optimization is absent. The intent and purpose are more about holistic software practices rather than the strategic management of value streams. The audience is similarly broad, targeting software professionals, not exclusively those concerned with VSM. The signal is moderately focused, but still covers a wide technology/management scope, with only a minor tangential overlap to VSM. No deductions are taken for outdated or critical tone, as the content is positive and current.",
    "level": "Ignored"
  },
  "Lean Principles": {
    "resourceId": "Software Development",
    "category": "Lean Principles",
    "calculated_at": "2025-05-06T11:50:12",
    "ai_confidence": 54.058,
    "ai_mentions": 2.267,
    "ai_alignment": 5.963,
    "ai_depth": 5.727,
    "ai_intent": 6.194,
    "ai_audience": 7.113,
    "ai_signal": 6.779,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content provides a broad overview of Software Development and mentions Lean as one of several methodologies (along with Agile and DevOps), but Lean Principles are not the main or central focus. \n\n- **Direct Mentions (2.267/10):** The only explicit mention of Lean is its inclusion in the list of methodologies that can inform software development; there are no direct definitions or detailed discussions of Lean itself or its principles.\n\n- **Conceptual Alignment (5.963/10):** There are general alignments – such as references to continuous improvement, iterative development, waste reduction (implicitly, via mentions of efficiency and adaptability), and value delivery – but these are not explored from a uniquely Lean perspective. Rather, they are shared among Agile, DevOps, and Lean cultures. The discussion of 'systematic approach' and 'value delivery' partially overlaps with Lean, but context remains generic.\n\n- **Depth of Discussion (5.727/10):** The treatment of Lean is surface-level and not the focus. The description explores continuous improvement and holistic viewpoints, but without delving into Lean-specific practices (e.g., Muda, Value Stream Mapping, 5S) or case examples. The integration of Lean is described as a possible component but is not examined in depth.\n\n- **Intent / Purpose Fit (6.194/10):** The content is informative and supportive, aiming to highlight software development best practices. However, its goal is not to teach or advocate Lean Principles specifically, nor is it targeted at those seeking Lean-focused guidance. Fit is only partial.\n\n- **Audience Alignment (7.113/10):** The article is aimed broadly at software development practitioners and possibly cross-functional teams, which does overlap with the Lean audience, but it does not specifically seek to address Lean practitioners or strategists.\n\n- **Signal-to-Noise Ratio (6.779/10):** Content is focused and relevant to software development practices and methodologies, but only a small fraction pertains to Lean. The share of content dedicated to Lean-related practices is minor compared to broader themes.\n\n- **Level:** Classified as 'Tertiary' because Lean is referenced, but not foundational to the piece – it's one consideration among many.\n\n- **No penalties** were applied as the content is contemporary, neutral in tone, and does not reference outdated or obsolete practices. The final confidence score (54.058) reflects that the content is Lean-adjacent but absolutely not a Lean Principles resource; it’s unlikely to fulfil a Pure Lean Principles search.",
    "level": "Tertiary"
  },
  "Market Adaptability": {
    "resourceId": "Software Development",
    "category": "Market Adaptability",
    "calculated_at": "2025-05-06T11:50:18",
    "ai_confidence": 77.329,
    "ai_mentions": 5.8,
    "ai_alignment": 8.3,
    "ai_depth": 7.9,
    "ai_intent": 7.7,
    "ai_audience": 8.1,
    "ai_signal": 8.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 77.0,
    "reasoning": "The content offers a strong overview of Software Development, explicitly referencing Agile, Lean, and DevOps methodologies and mentioning adaptability, responsiveness to change, and competitiveness. However, 'Market Adaptability' is not directly named and the main focus is broader than solely market adaptability—it's more about the holistic value and process of software engineering. \n\nScore breakdown—\n\n- Mentions (5.8): Agile, DevOps, Lean, adaptability and responsiveness are referenced but not with high frequency or exclusively in the context of market shifts;\n- Alignment (8.3): The ideas closely match market adaptability (e.g., continuous improvement, adapting to feedback, responsiveness to change), but the framing is general software development, not specifically organizational market adaptability;\n- Depth (7.9): The discussion is moderately detailed regarding processes and adaptability, but examples or case studies specific to market shifts are absent;\n- Intent (7.7): The purpose is informative and relevant, showing how practices enhance adaptability, but the main goal is not solely about market adaptability;\n- Audience (8.1): Aimed at practitioners and strategists in tech, similar to the intended category audience;\n- Signal-to-Noise (8.0): The proportion of relevant content is high, but there is some general, non-market-specific discussion included.\n\nNo penalty is applied: the material is current and supportive, not satirical or outdated. The overall confidence is moderate-positive (77.329), reflecting significant but not exclusive alignment with the 'Market Adaptability' category, making it a secondary-level fit.",
    "level": "Secondary"
  },
  "Evidence Based Management": {
    "resourceId": "Software Development",
    "category": "Evidence Based Management",
    "calculated_at": "2025-05-06T11:50:22",
    "ai_confidence": 58.429,
    "ai_mentions": 2.3,
    "ai_alignment": 6.2,
    "ai_depth": 6.1,
    "ai_intent": 6.8,
    "ai_audience": 7.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 58.0,
    "reasoning": "The content broadly covers techniques and methodologies for software engineering, with a primary emphasis on general high-quality practices, iterative development, and frameworks like Agile, Lean, and DevOps. There is only one indirect and surface-level mention of 'evidence-based management principles,' and this is not further explained or substantiated. As a result, the 'Direct Mentions' score is low (2.3), and 'Conceptual Alignment' is moderate (6.2) since the content hints at data-informed practices without specifically tying back to core EBM concepts (such as Current Value, Time to Market, Outcome Management, etc.). The 'Depth of Discussion' score (6.1) reflects that the main body is about software delivery best practices and process improvement, not the direct application of EBM or its key topics—the EBM mention is more aspirational than operationalized. 'Intent' is moderately positive (6.8) because while the content is informative and relevant to organisational improvement, EBM is not the focal point or clear purpose. The 'Audience Alignment' (7.2) is relatively high, as the content would appeal to the practitioner and organizational leader community. 'Signal-to-Noise' (7.1) is also fair; almost all of the writing is generally informative for software improvement, but actual EBM content is sparse. No penalties applied as the content is contemporary, positive, and not contradictory. The confidence score (58.429) accurately reflects a secondary association: Evidence-Based Management is referenced as an underpinning principle, but not explained, not structured around the key topics, and not prominent in depth or purpose.",
    "level": "Tertiary"
  },
  "One Engineering System": {
    "resourceId": "Software Development",
    "category": "One Engineering System",
    "calculated_at": "2025-05-06T11:50:12",
    "ai_confidence": 21.985,
    "ai_mentions": 0.8,
    "ai_alignment": 2.4,
    "ai_depth": 2.2,
    "ai_intent": 2.0,
    "ai_audience": 6.1,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 22.0,
    "reasoning": "The content does not directly mention One Engineering System (1ES); the term and its principles are absent. While it covers high-level topics such as standardisation, best practices, and integration, these ideas are in the context of general software development methodologies like Agile, Lean, and DevOps—not 1ES specifically. There is no discussion of a unified or comprehensive framework as described in the 1ES category definition. The depth of discussion remains general, focusing on classic software engineering techniques and benefits, without applying or referencing 1ES principles or implementations. The intent is broad—providing an overview of software development best practices, not informative or supportive of 1ES specifically. The audience is slightly aligned as both are technical practitioners, but this is incidental. Relative to the core category, the signal-to-noise ratio is low; while relevant to software engineering, the entire content lacks specificity to 1ES. No penalty deductions are needed as the content is current and neutral in tone. Overall, the content only tangentially relates to the 1ES category, warranting a tertiary classification with a low confidence score.",
    "level": "Ignored"
  },
  "Self Organisation": {
    "resourceId": "Software Development",
    "category": "Self Organisation",
    "calculated_at": "2025-05-06T11:50:15",
    "ai_confidence": 37.04,
    "ai_mentions": 1.2,
    "ai_alignment": 4.5,
    "ai_depth": 3.9,
    "ai_intent": 4.6,
    "ai_audience": 6.3,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content primarily addresses general software development, covering methods like Agile, Lean, and DevOps with a broad emphasis on team collaboration and practices. \n\n1. Mentions: The term 'self-organisation' is never directly stated, nor are closely related concepts like team autonomy or self-management explicitly identified. The only tangential reference is to 'Agile,' which often incorporates self-organisation, but this is not spelled out, justifying a low mentions score of 1.2.\n\n2. Alignment: There is some conceptual overlap where team collaboration, adaptability, and iterative feedback are discussed, echoing some underlying principles of self-organisation. However, the focus is much broader—software engineering as a whole—so the alignment is partial but in no way core (4.5).\n\n3. Depth: While the content explores software development practices in some depth, it does not explore self-organisation as a focused topic. It mentions cross-functional collaboration and adaptability, which are related but discussed at a surface level compared to true exploration of self-organisation (3.9).\n\n4. Intent: The primary aim is to inform about software development approaches, not self-organisation specifically. Any relevance to the category is therefore incidental, not intentional, but it's not wholly misaligned (4.6).\n\n5. Audience: The content appears directed at practitioners or decision-makers interested in improving software development outcomes, which overlaps with the self-organisation audience but is broader, so the audience fit is moderate (6.3).\n\n6. Signal: Most of the content is on-topic for general software development, but only a small subset even tangentially relates to self-organisation. Thus, the signal-to-noise ratio for this category is moderate (6.2).\n\nNo out-of-date references or contradictory tone were detected, so no penalties were applied. Overall, since the content does not focus on or directly discuss self-organisation but lightly touches on some broadly related themes, the appropriate categorisation is 'Tertiary.' The computed confidence score (37.04) reflects the peripheral and incidental match rather than any primary or intended focus on self-organisation.",
    "level": "Ignored"
  },
  "Remote Working": {
    "resourceId": "Software Development",
    "category": "Remote Working",
    "calculated_at": "2025-05-06T11:50:14",
    "ai_confidence": 6.23,
    "ai_mentions": 0.3,
    "ai_alignment": 0.8,
    "ai_depth": 0.5,
    "ai_intent": 0.9,
    "ai_audience": 2.0,
    "ai_signal": 1.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content is a general overview of software development practices and methodologies, referencing Agile, Lean, and DevOps as broad approaches. It does not directly or explicitly mention anything about remote work, distributed teams, or the unique challenges or tools associated with remote Agile work. No key topics related to Remote Working are discussed—there are no discussions of distributed collaboration, remote ceremonies, tools, or team culture in a virtual environment. \n\n- **Direct Mentions (0.3):** The content neither states nor implies Remote Working. Terms like 'remote', 'distributed', or any remote-specific topics are absent, hence the very low score.\n- **Conceptual Alignment (0.8):** While Agile is mentioned as a methodology that supports collaboration and adaptability, these are discussed in a generic team context, not specified for remote settings, resulting in a near-minimal score.\n- **Depth of Discussion (0.5):** All content remains high-level on methodologies and quality, with no depth into Remote Working-oriented practices or problems.\n- **Intent / Purpose Fit (0.9):** The content is designed to inform about software engineering quality and methodologies broadly, not specifically to address the unique intent of remote work challenges or best practices.\n- **Audience Alignment (2.0):** The audience appears to be practitioners, managers, or leaders in software development, which modestly overlaps with the Remote Working category target, but the scope is far broader and not specifically those dealing with remote Agile challenges.\n- **Signal-to-Noise Ratio (1.1):** The majority of content is off-topic for Remote Working, with only the very broadest thematic overlap (mention of Agile teams), so the relevance is minimal.\n\nNo penalty was needed, as the tone and information are neutral and current. The final confidence score (6.230) reflects a negligible fit: the content is generally in the field of software team practices but not conceptually, intentionally, or practically related to Remote Working in Agile contexts. Thus, this would be a tertiary-level connection at best.",
    "level": "Ignored"
  },
  "Product Management": {
    "resourceId": "Software Development",
    "category": "Product Management",
    "calculated_at": "2025-05-06T11:50:13",
    "ai_confidence": 39.712,
    "ai_mentions": 1.2,
    "ai_alignment": 4.6,
    "ai_depth": 4.4,
    "ai_intent": 4.9,
    "ai_audience": 5.0,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content is centrally about software development methodologies and practices, such as Agile, Lean, DevOps, automation, testing, and continuous improvement. While these frameworks and principles are relevant in a product management context, the core emphasis of the content is on engineering practices rather than the strategic alignment, decision-making frameworks, or cross-functional leadership that define Product Management as per the provided classification. \n\n1. Mentions (1.2): The term 'Product Management' is not directly mentioned; at most, there are oblique references to 'business objectives,' 'customer needs,' and 'evidence-based management,' but these are generic and not anchored explicitly to product management. \n2. Alignment (4.6): Some alignment exists – elements like iterative development, feedback adaptation, and strategic goal alignment touch on PM-relevant themes. However, the core focus and examples are from a software engineering context, not PM's strategic role. \n3. Depth (4.4): Concepts are discussed at a process level with a moderate exploration of their impact, but depth around PM theory, frameworks (like KPIs, stakeholder management, prioritization, etc.), or strategic execution is lacking.\n4. Intent (4.9): The intent is to inform about software development, not to provide knowledge primarily for product managers or their strategic decision-making.\n5. Audience (5.0): The audience appears to be practitioners of software engineering and teams involved in technical solution delivery; it is not targeted specifically at product managers or executives focused on product strategy.\n6. Signal (5.3): Most of the content is focused and relevant to software development, with limited tangential or off-topic discussion; however, relevance to product management is moderate at best.\n\nNo penalties were applied as the content does not contradict the PM framing nor reference outdated practices. The overall result places this content at 'Tertiary' relevance: it is indirectly related to Product Management via shared themes (agile, evidence-based management) but falls well short of the category's required strategic, decision-oriented focus.",
    "level": "Ignored"
  },
  "Platform Engineering": {
    "resourceId": "Software Development",
    "category": "Platform Engineering",
    "calculated_at": "2025-05-06T11:50:13",
    "ai_confidence": 20.85,
    "ai_mentions": 0.55,
    "ai_alignment": 2.7,
    "ai_depth": 2.95,
    "ai_intent": 2.1,
    "ai_audience": 7.0,
    "ai_signal": 4.65,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content is a broad overview of general software development practices and methodologies. \n\n- Mentions: Platform engineering is not referenced anywhere in the content, and there are no direct discussions of Internal Developer Platforms (IDPs), so the score is very low (0.550), only acknowledging extremely indirect thematic overlap.\n- Alignment: The main themes (quality, Agile, Lean, DevOps, collaboration, continuous improvement) do not align specifically with Platform Engineering, though DevOps and automation are adjacent concepts. Very limited conceptual overlap (2.700) comes from the discussion of automation and DevOps, but it is not linked to internal platforms or their principles.\n- Depth: There is some discussion of automation and the software lifecycle, but not from a Platform Engineering lens nor in substantial detail relevant to IDPs or related constructs—depth score is low (2.950).\n- Intent: The main purpose is to inform about software engineering at large, not platform engineering, so the intent fit is low (2.100), as Platform Engineering is not the core or even a substantial subtopic.\n- Audience: The audience (software engineers, technical teams) could overlap with those interested in Platform Engineering, so this score is higher (7.000), reflecting likely technical readers but not a specific targeting of platform engineers.\n- Signal-to-Noise: While the content is very focused on software development, most of the material is off-topic for Platform Engineering, except for passing mentions of automation and DevOps (4.650).\n\nNo penalties are applied. The content is well-written and current. \n\nIn summary, this resource provides only tertiary relevance to Platform Engineering, mentioning adjacent concepts without directly or substantially addressing the core category. Most readers interested in Platform Engineering would not find focused value for their needs.",
    "level": "Ignored"
  },
  "Agile Product Management": {
    "resourceId": "Software Development",
    "category": "Agile Product Management",
    "calculated_at": "2025-05-06T11:50:16",
    "ai_confidence": 47.93,
    "ai_mentions": 2.4,
    "ai_alignment": 5.6,
    "ai_depth": 5.3,
    "ai_intent": 4.7,
    "ai_audience": 6.2,
    "ai_signal": 5.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 48.0,
    "reasoning": "The content primarily discusses general software development methodologies and practices, describing the integration of Agile, Lean, and DevOps for high-quality engineering and continuous improvement. While it references topics like iterative development and evidence-based management that overlap with Agile Product Management, it does not explicitly mention core themes such as the role of Product Owner, techniques for backlog prioritization, or direct connections to Agile Product Management processes. There is a general alignment in terms of valuing customer feedback, adaptability, and value delivery—concepts that are related to but not exclusive to Agile Product Management. The depth score reflects some meaningful discussion of principles relevant to product value maximization, but the focus remains on team practices, automation, and holistic software lifecycles, rather than on managing product strategy or stakeholder collaboration as defined. The intended audience appears to be technical leaders or practitioners in software engineering more broadly, not specifically product managers or those concerned directly with product management in Agile contexts. Most of the content is relevant for modern development—but only a modest fraction is tightly relevant to Agile Product Management itself. No penalties were required as the tone is current and neutral. The confidence score is moderate, reflecting tertiary relevance: the content relates adjacently to the category but does not directly or deeply address its key concepts.",
    "level": "Tertiary"
  },
  "Social Technologies": {
    "resourceId": "Software Development",
    "category": "Social Technologies",
    "calculated_at": "2025-05-06T11:50:14",
    "ai_confidence": 73.838,
    "ai_mentions": 3.1,
    "ai_alignment": 8.8,
    "ai_depth": 8.4,
    "ai_intent": 6.7,
    "ai_audience": 7.9,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 74.0,
    "reasoning": "The content explicitly references methodologies like Agile, Lean, and DevOps, which are key frameworks within the category of Social Technologies, but it frames them as part of broader 'Software Development' rather than focusing solely on social frameworks and collaborative techniques. While it discusses collaboration, iterative approaches, and continuous improvement (all aligning strongly with Social Technologies), these themes are nested within the overall context of software engineering practices, which also include technical elements (automation, testing, integration) not strictly related to social methodologies. \n\nDirect Mentions (3.1): The term 'Social Technologies' is not directly mentioned, but its relevant frameworks (Agile, Lean, DevOps) are named, giving some explicit coverage but not frequent or focal. \n\nConceptual Alignment (8.8): The content’s main ideas (collaboration, adaptability, continuous improvement, responsiveness to change, informed decision-making) are well-aligned with Social Technologies, even though it's in the wider lens of software engineering.\n\nDepth of Discussion (8.4): There is robust explanation of how these methodologies enhance collaboration, value delivery, and iterative work. However, the exploration is one layer removed from direct social framework analysis.\n\nIntent/Purpose Fit (6.7): The main purpose is to outline techniques for achieving quality software; social methodologies are included but are not the exclusive focus, so intent is somewhat aligned but not primary.\n\nAudience Alignment (7.9): The audience (software professionals/managers interested in high-quality delivery) largely overlaps with those interested in Social Technologies, but it also includes more technical stakeholders.\n\nSignal-to-Noise Ratio (7.2): The content is mostly focused, but incorporates technical and process aspects not strictly about the social frameworks themselves, lowering the signal slightly.\n\nNo penalties for outdated content or negative/irrelevant tone. The final confidence score sits at 73.838, reflecting strong secondary alignment — Social Technologies are an important theme, but not the exclusive lens.",
    "level": "Secondary"
  },
  "Shift-Left Strategy": {
    "resourceId": "Software Development",
    "category": "Shift-Left Strategy",
    "calculated_at": "2025-05-06T11:50:17",
    "ai_confidence": 32.291,
    "ai_mentions": 0.6,
    "ai_alignment": 2.4,
    "ai_depth": 3.0,
    "ai_intent": 4.7,
    "ai_audience": 7.0,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content provides a broad overview of software development methodologies and principles, highlighting Agile, Lean, and DevOps, as well as general themes like automation, testing, and cross-functional collaboration. However, there are no direct mentions of 'Shift-Left Strategy,' nor does the content specifically discuss integrating testing, security, or compliance earlier in the lifecycle. The conceptual alignment is weak; while faster feedback and early testing are alluded to, they are not framed as 'shift-left.' The depth is shallow concerning the category, as any overlap is incidental rather than focused. The intent is to inform about general software development, not Shift-Left, making the purpose only tangentially related. The audience (technical practitioners/managers) partially aligns, as they could benefit from Shift-Left discussions, but the focus remains generic. Signal-to-noise is reasonably high since most information is relevant to software development, but little is specific to Shift-Left. No penalties were necessary, as the information is up-to-date and neutral in tone. Overall, this content only aligns as 'Tertiary' due to general, background relevance.",
    "level": "Ignored"
  },
  "Test Automation": {
    "resourceId": "Software Development",
    "category": "Test Automation",
    "calculated_at": "2025-05-06T11:50:21",
    "ai_confidence": 31.85,
    "ai_mentions": 1.2,
    "ai_alignment": 3.8,
    "ai_depth": 3.4,
    "ai_intent": 3.9,
    "ai_audience": 7.2,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content is an overview of software development practices, referencing high-level concepts such as Agile, Lean, DevOps, and continuous improvement. While 'automation' and 'testing' are mentioned briefly in one sentence ('The emphasis on automation, testing, and integration within Software Development practices reduces the risk of defects and accelerates delivery cycles...'), these references are cursory. \n\n1. Direct Mentions (1.2): The phrase 'automation, testing, and integration' appears once, with no further elaboration or naming of test automation tools, frameworks, or practices. The category 'Test Automation' itself is never explicitly named.\n2. Conceptual Alignment (3.8): There is some conceptual alignment in terms of mentioning automation and testing as important facets of software development, but the main ideas are much broader and not focused on Test Automation specifically.\n3. Depth of Discussion (3.4): The discussion of automating testing processes is very superficial and lacks any detailed explanation, examples, frameworks, or best practices. No exploration of types of automated tests, tools, or metrics is included.\n4. Intent / Purpose Fit (3.9): The purpose of this content is to outline core aspects of software development as a whole; Test Automation is only tangentially addressed as a small component.\n5. Audience Alignment (7.2): The audience includes technical professionals who might overlap with the Test Automation category, but the content targets a broader set of software engineers and leaders.\n6. Signal-to-Noise Ratio (4.0): The majority of the content is relevant to software engineering in general, not specifically to Test Automation. Only a minor portion is on-topic.\n\nNo penalties were applied, as the content is current and not characterized by criticism or outdated practices. Given the brief and indirect mention of automation/testing, the content fits Test Automation only in a tertiary, incidental way.",
    "level": "Ignored"
  },
  "Cell Structure Design": {
    "resourceId": "Software Development",
    "category": "Cell Structure Design",
    "calculated_at": "2025-05-06T11:50:25",
    "ai_confidence": 18.6,
    "ai_mentions": 0.9,
    "ai_alignment": 2.2,
    "ai_depth": 2.0,
    "ai_intent": 2.3,
    "ai_audience": 6.2,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content 'Software Development' provides a generic overview of modern software engineering methodologies and practices such as Agile, Lean, and DevOps. There are no direct or indirect mentions of Cell Structure Design, the Beta Codex, or any specific organisational model in line with the category definition. \n\n- Mentions (0.9): No direct or indirect reference is made to Cell Structure Design or its terminology (e.g., cells, Beta Codex), justifying a near-zero score.\n\n- Alignment (2.2): While the content discusses decentralised approaches such as Agile and team autonomy, these are generic and not expressly related to Cell Structure Design principles. The primary focus remains on software engineering processes, not organisational structure transformation according to the Beta Codex.\n\n- Depth (2.0): The depth of discussion centers on mainstream software development practices, with no substantive exploration of network-based structures, value-stream cells, or the theoretical underpinnings of Cell Structure Design. Thus, its exploration of the relevant category is minimal.\n\n- Intent (2.3): The main intent is to inform about techniques and advantages of software development methodologies, not to advocate or educate about Cell Structure Design. Any overlap is incidental and indirect (e.g., ‘cross-functional collaboration’) rather than targeted.\n\n- Audience (6.2): The target audience (software engineers, managers, delivery teams) shares some overlap with those interested in progressive organisational models, but the technical orientation is more generic and not tailored for organisational design practitioners or strategists.\n\n- Signal-to-Noise (6.3): The content is well-structured and focused within its scope (software engineering), but only a small, indirect portion could be interpreted as tangentially relevant (e.g., mentions of responsiveness, adaptability, collaboration).\n\n- Penalties: No penalties were applied, as the content is not outdated and does not contradict the category—it's simply not relevant.\n\nOverall, the content is at the tertiary level regarding relevance: there is almost no explicit or implicit alignment to Cell Structure Design. The minimal confidence score appropriately reflects this, and calibration safeguards were observed (non-identical, nuanced scores; confidence score is proportionate to the evidence).",
    "level": "Ignored"
  },
  "Customer Satisfaction": {
    "resourceId": "Software Development",
    "category": "Customer Satisfaction",
    "calculated_at": "2025-05-06T11:50:17",
    "ai_confidence": 60.927,
    "ai_mentions": 2.1,
    "ai_alignment": 6.2,
    "ai_depth": 6.3,
    "ai_intent": 6.6,
    "ai_audience": 6.0,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content provides a broad overview of software development practices, mentioning methodologies like Agile, Lean, and DevOps. Customer satisfaction is referenced explicitly only once: 'allowing for frequent releases that enhance customer satisfaction.' While the content recognizes that engineering practices have a positive impact on customer satisfaction and expectations, this is not the main focus—rather, customer satisfaction is framed as a secondary benefit of good software engineering. \n\nFor Direct Mentions, the low score (2.1) reflects that customer satisfaction is named just once, with little elaboration. Conceptual Alignment and Depth (6.2 and 6.3) are moderate, as the content touches on aligning software with user needs and business objectives, as well as feedback loops and continuous improvement—key adjacent principles. Yet, the primary theme remains software engineering, not customer satisfaction principles or metrics. The Intent score (6.6) reflects that the content is somewhat supportive of customer satisfaction as an outcome but not as the central purpose. Audience Alignment (6.0) is targeted at practitioners interested in methodologies relevant to Agile and DevOps contexts, overlapping somewhat with the classification audience but not concentrated on customer satisfaction roles. Signal-to-Noise (6.2) is slightly above average since most of the content is contextually relevant, though much is general and not specific to customer experience. \n\nNo penalties were applied: the content is current, neutral, and does not undermine the category frame. Overall, the topic fits as 'Secondary' for Customer Satisfaction because it includes it as one of several objectives, primarily focusing on engineering quality and methodologies rather than sustained or strategic discussion of customer satisfaction itself.",
    "level": "Secondary"
  },
  "Change Management": {
    "resourceId": "Software Development",
    "category": "Change Management",
    "calculated_at": "2025-05-06T11:50:21",
    "ai_confidence": 53.12,
    "ai_mentions": 1.4,
    "ai_alignment": 6.3,
    "ai_depth": 5.8,
    "ai_intent": 6.7,
    "ai_audience": 7.1,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content primarily focuses on software development methodologies and broad engineering practices. There are references to Agile, Lean, and DevOps, but these are framed as part of general software engineering rather than specific, strategic discussions of Change Management. \n\n- 'Direct Mentions' is low (1.4) as 'Change Management' is not mentioned outright, nor are its core concepts referenced explicitly; adaptation and responsiveness to change are discussed only as properties of good software development.\n- 'Conceptual Alignment' is moderate (6.3) because while adaptability, continuous improvement, and responsiveness to change are referenced, the primary theme remains engineering rather than the management of change processes themselves. \n- 'Depth of Discussion' is moderate (5.8) since the content explores the importance of adaptability and continuous improvement, but does not address principles, stakeholder engagement, or leadership roles in change. There is no discussion of change management strategies, frameworks, or resistance to change.\n- 'Intent/Purpose Fit' is a bit above neutral (6.7) since the article offers concepts tangential to change management (like fostering a culture of improvement), but its purpose is to inform about general software development approaches.\n- 'Audience Alignment' is higher (7.1) because readers interested in DevOps and Agile (the intended primary audience for change management) may also find this content relevant, though it is not targeted to change management professionals or strategists specifically.\n- 'Signal-to-Noise Ratio' is also higher (7.2) as the description is dense and focused on relevant topics (Agile, adaptability, continuous improvement), but lacks specific focus on the core issues of change management.\n\nThere are no outdated or contradictory statements requiring penalties. The level is set as 'Tertiary' because the content supports or relates to Change Management only indirectly, not as a primary or secondary focus.",
    "level": "Tertiary"
  },
  "Agile Frameworks": {
    "resourceId": "Software Development",
    "category": "Agile Frameworks",
    "calculated_at": "2025-05-06T11:50:16",
    "ai_confidence": 41.799,
    "ai_mentions": 2.6,
    "ai_alignment": 4.9,
    "ai_depth": 4.7,
    "ai_intent": 4.5,
    "ai_audience": 6.8,
    "ai_signal": 5.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "The content is about Software Development in general, referencing various methodologies, including Agile, Lean, and DevOps, but does not directly focus on Agile frameworks. \n\nMentions: Agile is named once directly as a methodology integrated with others (Lean, DevOps) but not explored as a primary category. The specific frameworks (e.g., Scrum, Kanban) are not mentioned at all, so the score is low (2.6).\n\nAlignment: While some values align with Agile principles (collaboration, adaptability, continuous improvement), the discussion is conceptual about software development as a whole, not Agile frameworks specifically, reducing alignment (4.9).\n\nDepth: The discussion is broad and high-level, with iterative development, automation, testing, integration, and evidence-based management briefly mentioned, none of which are uniquely attributed to Agile frameworks or analyzed in depth (4.7).\n\nIntent: The main goal is to inform about software development methodologies, not specifically to compare or explore Agile frameworks or their principles (4.5).\n\nAudience: The content is aimed at practitioners or decision-makers in software engineering, overlapping with the Agile Frameworks audience, but is much broader (6.8).\n\nSignal-to-Noise Ratio: While the content is focused and coherent, only a minority is relevant to Agile frameworks specifically; much is general software engineering practice (5.3).\n\nNo penalties applied since there's no outdated content, nor is there a dismissive or inappropriate tone. The overall confidence is low (41.799), and fit is judged as Tertiary: Agile is a small, noncentral element in the content.",
    "level": "Tertiary"
  },
  "Empirical Process Control": {
    "resourceId": "Software Development",
    "category": "Empirical Process Control",
    "calculated_at": "2025-05-06T11:50:20",
    "ai_confidence": 44.82,
    "ai_mentions": 0.6,
    "ai_alignment": 5.9,
    "ai_depth": 5.7,
    "ai_intent": 6.2,
    "ai_audience": 7.1,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 45.0,
    "reasoning": "This content broadly discusses software development methodologies, touching on Agile, Lean, and DevOps, and references principles like adaptability, feedback, and evidence-based management. However, it does not directly mention 'Empirical Process Control' or use core terminology such as transparency, inspection, or adaptation in the explicit language of the category. The alignment is moderate because there is some conceptual overlap — iterative development, evidence-based management, and responsiveness to feedback are present in the Agile/Empirical Process Control tradition. The depth of discussion is somewhat superficial from an empirical process control perspective; while iterative approaches and adaptability are invoked, the detailed mechanisms (such as inspection, transparency, or adaptation cycles) and named practices (Scrum, feedback loops, etc.) are not explicitly explored. The intent is to inform about software development generally, not specifically about empirical process control, so the purpose fit is partial but not primary. The audience is generally practitioners or those interested in industry best practices, which intersects but is broader than the target audience for empirical process control. The signal-to-noise ratio remains decent, as little content is off-topic, but the majority focuses on a wider scope than just empirical process control. Overall, the content belongs at a Tertiary level: it provides background context and related principles, but empirical process control is neither a focal topic nor deeply discussed.",
    "level": "Tertiary"
  },
  "Flow Efficiency": {
    "resourceId": "Software Development",
    "category": "Flow Efficiency",
    "calculated_at": "2025-05-06T11:50:24",
    "ai_confidence": 27.97,
    "ai_mentions": 1.3,
    "ai_alignment": 3.7,
    "ai_depth": 2.8,
    "ai_intent": 4.0,
    "ai_audience": 6.1,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content titled 'Software Development' provides a broad overview of methodologies and techniques for quality software engineering, referencing Agile, Lean, and DevOps as part of its practices. However, it does not directly mention 'Flow Efficiency' or its hallmark concepts. Key terms such as cycle time, lead time, bottlenecks, or WIP limits are absent. There is some conceptual alignment in references to 'efficiency,' 'continuous improvement,' and 'delivery cycles,' which are tangentially related to flow efficiency principles. Nevertheless, these are presented at a high level and lack the specific focus or depth expected for Flow Efficiency classification. The intended audience is broad (general software practitioners or leaders), and the discussion is only marginally relevant to the topic, primarily by virtue of referencing adjacent methodologies. No explicit out-of-date practices or tone contradictions are present, so no penalties are applied. Given the lack of explicit or in-depth flow efficiency discussion, this resource should be considered as only tangentially (tertiary) relevant. The confidence score appropriately reflects these factors.",
    "level": "Ignored"
  },
  "Agile Philosophy": {
    "resourceId": "Software Development",
    "category": "Agile Philosophy",
    "calculated_at": "2025-05-06T11:50:28",
    "ai_confidence": 53.75,
    "ai_mentions": 2.6,
    "ai_alignment": 5.7,
    "ai_depth": 5.3,
    "ai_intent": 5.6,
    "ai_audience": 5.8,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The provided content primarily discusses software development as a broad discipline, referencing techniques, methodologies, and overall practices such as Agile, Lean, and DevOps. There are only indirect references to Agile Philosophy: the text mentions adaptability, continuous improvement, customer satisfaction, and cross-functional collaboration. However, it does not explicitly reference the Agile Manifesto, Agile values/principles, or the distinct mindset that defines Agile Philosophy. Thus, Direct Mentions (2.6) are low—the word 'Agile' appears once, and not in a philosophical sense. Conceptual Alignment (5.7) is moderate; while terms like 'continuous improvement' and 'responsiveness to change' are present, they are framed within general software development, not specifically Agile Philosophy. Depth of Discussion (5.3) reflects superficial engagement—the content does not deeply explore Agile as philosophy, instead offering broad summaries of development approaches. Intent (5.6) is somewhat aligned: the purpose is broadly informative and improvement-focused, which overlaps with Agile’s intents, but does not prioritize philosophy. Audience Alignment (5.8) is aimed at practitioners or organizational leaders interested in good software development—which overlaps with, but is not specific to, Agile Philosophy’s audience. Signal-to-Noise (5.1) is middling; while the content is focused, much of it details general software practices rather than Agile philosophy specifically. No penalty was applied as the content is current, neutral, and not satirical. The overall confidence score (53.75) accurately reflects that the content is only tangentially related to Agile Philosophy, making its fit tertiary rather than primary or secondary.",
    "level": "Tertiary"
  },
  "Test Driven Development": {
    "resourceId": "Software Development",
    "category": "Test Driven Development",
    "calculated_at": "2025-05-06T11:50:18",
    "ai_confidence": 14.992,
    "ai_mentions": 0.2,
    "ai_alignment": 1.8,
    "ai_depth": 1.6,
    "ai_intent": 2.5,
    "ai_audience": 5.1,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content is a high-level overview of software development methodologies and practices. It does not mention Test Driven Development (TDD) at all—either directly or indirectly. The closest concept is the general mention of 'automation, testing, and integration', but these are broad and not specific to TDD or any of its principles (such as Red-Green-Refactor, writing tests first, or TDD’s unique cycles and patterns). \n\nFor 'Direct Mentions': Score is very low (0.2) as there are zero explicit TDD references, and even synonymous phrases do not occur. \n\nFor 'Conceptual Alignment': The core ideas discuss quality, automation, and testing as part of the bigger software development landscape but do not align specifically with TDD principles, thus the low score (1.8).\n\n'In Depth of Discussion': The content doesn’t cover any core concepts, cycles, or challenges of TDD, so the discussion depth is minimal (1.6).\n\n'Intent / Purpose Fit': The main intent is to provide an overview of software development, not to inform or explore TDD specifically (2.5).\n\n'Audience Alignment' is somewhat decent (5.1) since it targets technical practitioners, but the audience is not uniquely that of TDD practitioners—it's broader.\n\n'Signal-to-Noise Ratio' registers some relevance (4.2) because the content is focused and non-tangential about software development in general, but very little of that focus is about TDD.\n\nNo penalties were applied because the content was not outdated and did not display a negative tone relative to TDD.\n\nThis results in a Tertiary level classification: TDD is not discussed as a topic here, and the fit is very weak.",
    "level": "Ignored"
  },
  "Transparency": {
    "resourceId": "Software Development",
    "category": "Transparency",
    "calculated_at": "2025-05-06T11:50:22",
    "ai_confidence": 22.583,
    "ai_mentions": 0.5,
    "ai_alignment": 2.6,
    "ai_depth": 2.3,
    "ai_intent": 1.7,
    "ai_audience": 8.9,
    "ai_signal": 8.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content titled 'Software Development' provides a high-level overview of methodologies and practices such as Agile, Lean, and DevOps, with a strong emphasis on quality, collaboration, adaptability, and continuous improvement. However, direct references or explicit mentions of 'transparency'—as defined in the classification criteria—are nearly absent (mentions: 0.5). There are some aligned concepts (e.g., 'knowledge sharing', 'cross-functional collaboration', 'feedback'), but no substantive focus on transparency, openness, visibility, or the tools and techniques integral to it in Agile teams (alignment: 2.6). The discussion of these relevant ideas is shallow and brief rather than explored in depth (depth: 2.3). The primary intent is to describe broad best practices in software engineering, not transparency itself (intent: 1.7). The audience is appropriate for the category, as it generally targets practitioners and those interested in professional software delivery (audience: 8.9), and the bulk of content is relevant to software development overall (signal: 8.6). No penalties were applied, as the content is current and neutral in tone. As such, transparency is only implied tangentially, making it tertiary in relation to this content. The final confidence score reflects these factors—transparency is only lightly touched upon and not a principal or even secondary topic.",
    "level": "Ignored"
  },
  "Continuous Improvement": {
    "resourceId": "Software Development",
    "category": "Continuous Improvement",
    "calculated_at": "2025-05-06T11:50:21",
    "ai_confidence": 68.075,
    "ai_mentions": 3.6,
    "ai_alignment": 7.8,
    "ai_depth": 6.9,
    "ai_intent": 6.6,
    "ai_audience": 7.4,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 68.0,
    "reasoning": "The content is broadly focused on software development techniques and methodologies. While it references Continuous Improvement explicitly ('fostering a culture of continuous improvement'), the mention is not front-and-center, and most of the discussion is more general about Agile, Lean, DevOps, automation, and software quality. On 'Direct Mentions' (3.6), CI is specifically referenced but not repeatedly or with in-depth elaboration. 'Conceptual Alignment' is reasonably solid (7.8) due to themes like iterative development, responsiveness to change, and evidence-based management, but the primary framing is not about Continuous Improvement itself. The 'Depth of Discussion' (6.9) acknowledges that core ideas like feedback loops and adaptation are present but embedded within a broader discussion; the article doesn't substantially drill down into CI frameworks, tools, or dedicated processes. 'Intent/Purpose Fit' (6.6) recognizes that the content supports CI, but CI is not its main target—it's more about general good practice and methodology. For 'Audience Alignment' (7.4), the discussion is relevant for practitioners (developers, managers) aligned with CI's typical audience, although it's not tailored towards CI professionals exclusively. The 'Signal-to-Noise Ratio' (7.7) is fairly high, as the content stays relevant without digressing, but much is general to software engineering and not specific to CI. No penalties apply: the content is current, not satirical or critical, and does not reference obsolete practices. In summary, the piece fits CI at a secondary level: it supports and aligns with several CI principles but does not center its depth or focus on the subject, so the confidence score (68.075) reflects solid but indirect relevance.",
    "level": "Secondary"
  },
  "Common Goals": {
    "resourceId": "Software Development",
    "category": "Common Goals",
    "calculated_at": "2025-05-06T11:50:18",
    "ai_confidence": 51.663,
    "ai_mentions": 2.7,
    "ai_alignment": 5.85,
    "ai_depth": 5.9,
    "ai_intent": 5.25,
    "ai_audience": 6.25,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 52.0,
    "reasoning": "The content broadly discusses software development methodologies and practices, mentioning Agile, Lean, and DevOps. However, it does not explicitly or frequently reference 'Common Goals' as defined in the classification. Direct mentions of goals appear only in a general sense (e.g., 'align with their strategic goals and customer expectations'), but there is no in-depth discussion of Common Goals as a foundational Agile/DevOps concept, nor is there coverage of key topics such as OKRs, alignment mechanisms, or techniques to operationalize shared goals. The conceptual alignment is moderate because alignment with business objectives and cross-functional collaboration are mentioned, but they remain generic rather than anchored in the specific meaning of Common Goals. The depth and intent scores reflect that while the content informs on practices such as collaboration and adaptability, it does not focus chiefly on goal alignment or the bridging of strategy and execution. The audience is technical professionals or software development teams, matching the likely audience for Common Goals discussions, but the scope is considerably broader. Signal-to-noise is moderate; much content is relevant to software practices but not to the precise domain of Common Goals.\n\nDue to the lack of explicit or in-depth treatment of Common Goals, this content lands at the tertiary (incidental) level of relevance and should not be classified in this category except potentially as a cross-reference in a broader educational context. No penalties were applied, as the content is current and does not contradict the category’s principles.",
    "level": "Tertiary"
  },
  "Team Collaboration": {
    "resourceId": "Software Development",
    "category": "Team Collaboration",
    "calculated_at": "2025-05-06T11:50:22",
    "ai_confidence": 66.88,
    "ai_mentions": 3.5,
    "ai_alignment": 7.8,
    "ai_depth": 7.3,
    "ai_intent": 7.0,
    "ai_audience": 6.6,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content explicitly references the integration of Agile and DevOps practices, which are frameworks where team collaboration is central, mentioning the enhancement of collaboration, efficiency, and adaptability within teams. Direct references to 'cross-functional collaboration' and 'knowledge sharing among team members' further point to the relevance of collaboration in the described approach. However, the main theme is broader—about software development strategies and methodologies—rather than focused explicitly on team collaboration itself. Depth is demonstrated in contextualizing why collaboration matters in software development but does not go into specific techniques, tools, or behavioral practices for team collaboration as the primary subject. The intent and purpose generally support improved team outcomes but remain at a conceptual level, with the description also targeting a general audience interested in software engineering rather than zeroing in on practitioners in team collaboration. The signal-to-noise ratio is moderately high, but extraneous information about software quality, customer satisfaction, and strategic objectives—while important—dilute direct focus on collaboration. Therefore, the fit is secondary; collaboration is an important, referenced sub-theme, but not the central or sole focus.",
    "level": "Secondary"
  },
  "Technical Mastery": {
    "resourceId": "Software Development",
    "category": "Technical Mastery",
    "calculated_at": "2025-05-06T11:50:28",
    "ai_confidence": 71.28,
    "ai_mentions": 3.7,
    "ai_alignment": 8.4,
    "ai_depth": 7.9,
    "ai_intent": 8.0,
    "ai_audience": 7.6,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 71.0,
    "reasoning": "The content describes overarching techniques and methodologies for high-quality software engineering, aligning moderately well with 'Technical Mastery.' Direct mentions (3.7) are modest; while there is reference to 'techniques and methodologies,' there is no explicit use of terms such as software craftsmanship, clean code, or engineering excellence, which are core to the category. Conceptual alignment (8.4) is strong—the content discusses Agile, DevOps, automation, and testing, all relevant subjects, though sometimes more from a process or team outcome perspective rather than technical rigor. Depth (7.9) is solid, as there is thoughtful commentary on continuous improvement, integration, testing, and adaptation, but much is framed in terms of business goals and collaboration rather than drilling deeply into engineering practices. Intent (8.0) is appropriate: the purpose is to inform about high-quality practices, which fits, but some focus drifts towards process efficiency and business value. Audience alignment (7.6) reflects that this is suitable for technical practitioners but also somewhat accessible to non-technical leaders, given the inclusion of business and management concerns. Signal-to-noise (6.9) is weighed down by the inclusion of broader, less technically-focused themes (e.g., sustained competitive advantage, cross-functional collaboration, evidence-based management), which, while relevant, are only tangentially about excellence in software engineering itself. No penalties were applied, as the content is current and does not undermine the framing. This overall score and the 'Secondary' level reflect that while the piece touches on key technical themes, it does not delve deeply or specifically enough into software craftsmanship or engineering practices to serve as a 'Primary' exemplar of Technical Mastery.",
    "level": "Secondary"
  },
  "Agile Strategy": {
    "resourceId": "Software Development",
    "category": "Agile Strategy",
    "calculated_at": "2025-05-06T11:50:16",
    "ai_confidence": 54.622,
    "ai_mentions": 2.8,
    "ai_alignment": 6.4,
    "ai_depth": 5.9,
    "ai_intent": 6.2,
    "ai_audience": 6.0,
    "ai_signal": 6.322,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "Direct Mentions (2.800): The content only briefly mentions 'Agile' alongside Lean and DevOps. There is no explicit or repeated reference to 'Agile Strategy,' nor is there clear focus on the strategic integration of Agile beyond a surface-level mention.\n\nConceptual Alignment (6.400): The content references iterative development, adaptability, continuous improvement, and delivering value—elements that align conceptually with Agile principles. However, these are discussed within a broader 'software development' context, not specifically as an organisational strategy or at scale, as the Agile Strategy category defines.\n\nDepth (5.900): The article explores high-level benefits of iterative and adaptive practices, automation, and collaboration, but does not detail strategic planning, leadership considerations, or organisational vision alignment through Agile strategy. The discussion stays at the 'best practices' level, with little examination of Agile's integration into strategic decision-making or organisational alignment.\n\nIntent/Purpose Fit (6.200): The intent is largely to inform on general software development techniques and methodologies for quality outcomes, but does touch on themes like continuous improvement and strategic goals. Agile Strategy is tangentially relevant, but not the main purpose.\n\nAudience Alignment (6.000): The content seems addressed to practitioners, engineering leads, and perhaps mid-level managers interested in quality, process, or improvement—audiences adjacent to, but not solely focused on, Agile strategists or executives.\n\nSignal-to-Noise Ratio (6.322): The text is generally focused and relevant but covers a mix of methodologies (Agile, Lean, DevOps) and general software engineering themes, with only fragments clearly linked to Agile Strategy as strictly defined.\n\nLevel: Tertiary. Agile is present as one method among several, and no strategic, organisational analysis or detailed alignment with Agile Strategy is provided. The content would not serve as a primary or even secondary resource in the Agile Strategy category.",
    "level": "Tertiary"
  },
  "Behaviour Driven Development": {
    "resourceId": "Software Development",
    "category": "Behaviour Driven Development",
    "calculated_at": "2025-05-06T11:50:18",
    "ai_confidence": 18.133,
    "ai_mentions": 0.7,
    "ai_alignment": 2.4,
    "ai_depth": 2.6,
    "ai_intent": 3.4,
    "ai_audience": 5.0,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The provided content is a broad overview of software development methodologies and best practices, with mentions of Agile, Lean, and DevOps, but does not reference Behaviour Driven Development (BDD) explicitly or implicitly. \n\n- Direct Mentions (0.7): There are zero direct or indirect references to BDD, its tools, or practices.\n- Conceptual Alignment (2.4): The content briefly mentions user needs, business objectives, and collaboration, but these are generic and do not tie to the unique practices of BDD.\n- Depth of Discussion (2.6): The discussion around methodologies is quite general and does not explore principles, frameworks, or specifics of BDD.\n- Intent / Purpose Fit (3.4): The intent is broad and not focused on BDD; while relevant to practitioners, it does not aim to inform or educate specifically about BDD.\n- Audience Alignment (5.0): The content targets a general software development audience, which can include those interested in BDD, but is not tailored to BDD practitioners.\n- Signal-to-Noise Ratio (5.1): While the content is focused, almost none of it is about BDD, so the signal for this specific category is low.\n\nNo penalties were applied, as the content is neither outdated nor contradictory, but simply off-topic for BDD. The 'Tertiary' level reflects that while there is a distant conceptual relationship (in the sense that BDD is a software methodology), the text is two or more steps removed from the core category.\n\nThe low overall confidence score is appropriate: the content barely aligns with the core classification for Behaviour Driven Development and is almost exclusively general in its coverage.",
    "level": "Ignored"
  },
  "Scrum Team": {
    "resourceId": "Software Development",
    "category": "Scrum Team",
    "calculated_at": "2025-05-06T11:50:18",
    "ai_confidence": 16.867,
    "ai_mentions": 0.5,
    "ai_alignment": 2.1,
    "ai_depth": 2.5,
    "ai_intent": 1.8,
    "ai_audience": 5.3,
    "ai_signal": 6.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content is a general, high-level overview of software development methodologies and practices and does not make any direct or explicit mention of the Scrum Team or its specific accountability as defined in the Scrum Guide. \n\n- Mentions (0.5): There are no direct references to the term 'Scrum Team' or its subcomponents (Scrum Master, Product Owner, Developers), only a passing mention of 'Agile' among other methodologies. \n- Alignment (2.1): Conceptually, the content discusses cross-functional teams, iterative delivery, and collaboration, which tangentially relate to some Scrum Team characteristics, but it remains too general and not tailored to the Scrum accountability or structure. \n- Depth (2.5): There is minimal exploration of topics specifically related to Scrum Teams; the discussion is broad and focused on general software practices rather than Scrum Team purpose or responsibilities. \n- Intent (1.8): The main intent is to inform about software development methodologies overall, not about the Scrum Team as an accountability. Any connection is indirect. \n- Audience (5.3): The audience includes practitioners who might be interested in Scrum, but also anyone in software development, making it only somewhat aligned. \n- Signal (6.2): The content is focused and coherent for software development in general, with little irrelevant filler; however, most of the content is off-topic for the Scrum Team category specifically.\n\nNo penalties were applied, as the content is current, not satirical, and does not contradict the category's framing. The content’s relation to the Scrum Team category is minimal and indirect, thus 'Tertiary' level is appropriate, with the confidence score reflecting the very weak fit.",
    "level": "Ignored"
  },
  "Daily Scrum": {
    "resourceId": "Software Development",
    "category": "Daily Scrum",
    "calculated_at": "2025-05-06T11:50:18",
    "ai_confidence": 8.88,
    "ai_mentions": 0.2,
    "ai_alignment": 1.1,
    "ai_depth": 0.8,
    "ai_intent": 1.0,
    "ai_audience": 3.4,
    "ai_signal": 3.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content never explicitly mentions 'Daily Scrum' or any of its unique characteristics—there is a single, vague reference to 'Agile' as a practice among others. \n\nDirect Mentions (0.2): The term 'Daily Scrum' is not present, nor is there any direct or implied reference to this specific Scrum event; 'Agile' is mentioned, but not expanded upon in a way that links to Scrum events.\n\nConceptual Alignment (1.1): The high-level theme is software development practices and methodologies, with Agile as only a minor part. There is no conceptual alignment with Daily Scrum’s purpose, structure, or practices.\n\nDepth of Discussion (0.8): No meaningful detail is provided about Scrum, let alone the Daily Scrum. The content remains at the level of broad, general statements about software engineering.\n\nIntent / Purpose (1.0): The primary intent is to broadly inform about methodologies and techniques in software engineering, not to support or explain the Daily Scrum.\n\nAudience (3.4): The general target audience—software professionals—would likely overlap with the target audience for Daily Scrum content, but the topic is too broad and not directly relevant.\n\nSignal (3.8): The content is focused on software practices and methodology, so the signal-to-noise ratio is high for its own domain, but almost entirely irrelevant to the Daily Scrum category.\n\nNo dimensions were penalized; the tone, relevance, and timeliness are neutral and up to date. This content fundamentally fails to meet the strict definition of the Daily Scrum category, so is rated as tertiary—only in the most indirect sense does it relate.",
    "level": "Ignored"
  },
  "Product Backlog": {
    "resourceId": "Software Development",
    "category": "Product Backlog",
    "calculated_at": "2025-05-06T11:50:19",
    "ai_confidence": 16.583,
    "ai_mentions": 0.5,
    "ai_alignment": 2.4,
    "ai_depth": 2.1,
    "ai_intent": 2.9,
    "ai_audience": 3.0,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content is a broad overview of software development practices and methodologies, including Agile, Lean, and DevOps. However, it never explicitly mentions the Product Backlog, nor does it discuss its purpose, techniques, or best practices for backlog management. In terms of alignment, the content references iterative development and adaptation to change—concepts found in Agile (where a backlog is used)—but the link to the Product Backlog is weak and indirect. The depth score is low because there is no substantial exploration of backlog topics; the coverage stays high-level and general. The intent is to inform about general software development, not specifically backlog management. The audience aligns somewhat, as practitioners of software development would overlap with those interested in backlog practices, but the focus is not direct. The signal-to-noise ratio reflects that almost all the content pertains to general software engineering, with minimal relevance to the Product Backlog. No penalties were applied since the content is neither outdated nor critical of the category—it's simply irrelevant. The tertiary level reflects that Product Backlog might be contextually implied through the reference to Agile but is not directly or substantially addressed.",
    "level": "Ignored"
  },
  "Release Management": {
    "resourceId": "Software Development",
    "category": "Release Management",
    "calculated_at": "2025-05-06T11:50:20",
    "ai_confidence": 31.43,
    "ai_mentions": 0.7,
    "ai_alignment": 3.9,
    "ai_depth": 4.1,
    "ai_intent": 3.2,
    "ai_audience": 7.2,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "The content provides a general overview of software development methodologies and best practices, with mentions of Agile, Lean, DevOps, and high-level lifecycle management. However, 'Release Management' is not directly named, nor are its core subtopics (such as release scheduling, version control, risk management in releases, or CI/CD) explicitly discussed; instead, there are tangential references to iterative development and frequent releases, but these are not explored in the context of formal release management practices. \n\n- **Mentions (0.7):** No explicit use of the term 'Release Management' or direct synonyms. Only a general statement about 'frequent releases'.\n- **Alignment (3.9):** The content’s themes (automation, integration, iteration) are adjacent to release management but cover a much broader range, lacking targeted alignment with release planning or tooling.\n- **Depth (4.1):** Some modest depth is shown in mentioning practices like automation and integration that overlap with release processes, but there is no deep dive into controlling or planning releases specifically.\n- **Intent (3.2):** The content’s primary intent is to illuminate high-level software engineering methodologies, not to inform, support, or discuss release management specifically. Release management is at best a secondary or implied topic.\n- **Audience (7.2):** The discussion targets a technical and practitioner audience similar to that of release management, though not exclusively so.\n- **Signal (7.7):** The content is focused and relevant to software engineering, but very little of it is directly about release management—most is peripheral.\n\nNo penalties are justified: The content does not reference obsolete practices, nor does it contradict or satirize release management. Overall, the confidence score is low, indicating only tertiary relevance; release management is an adjacent or possible sub-topic but not a primary or even secondary theme.",
    "level": "Ignored"
  },
  "Engineering Practices": {
    "resourceId": "Software Development",
    "category": "Engineering Practices",
    "calculated_at": "2025-05-06T11:50:18",
    "ai_confidence": 67.2,
    "ai_mentions": 3.3,
    "ai_alignment": 6.2,
    "ai_depth": 6.5,
    "ai_intent": 6.1,
    "ai_audience": 7.4,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 67.0,
    "reasoning": "The content provides a broad overview of software development methodologies and the pursuit of high-quality software but does not directly or frequently mention 'Engineering Practices' or explicitly discuss specific practices such as clean code, TDD, CI/CD, or refactoring. Direct mentions (3.3): 'Agile', 'automation', and 'testing' are referenced, but key engineering principles and terminologies are only somewhat present and not explained in detail. Conceptual alignment (6.2): There is a moderate match in themes (automation, collaboration, iterative development) but lacking depth on core engineering practices. Depth (6.5): Discussion is at a moderate to general level, referencing systemic approaches like automation, testing, and integration, but not delving substantively into any engineering methodologies. Intent (6.1): Purpose is generally aligned as it seeks to inform about software quality and development practices, but not exclusively focused on engineering practices. Audience (7.4): Target audience appears to be practitioners or teams involved in software engineering, somewhat matching the category, though also accessible to non-technical stakeholders. Signal-to-noise (7.8): Majority of the content is relevant, with minimal off-topic or filler material; however, the coverage is broad and less focused on engineering specifics. No penalties applied as the tone is informative, current, and does not contradict the category. Overall, the piece is secondary (not a primary fit) because it intersects with 'Engineering Practices' but is mainly general, introductory, and lacks specificity.",
    "level": "Secondary"
  },
  "Technical Debt": {
    "resourceId": "Software Development",
    "category": "Technical Debt",
    "calculated_at": "2025-05-06T11:50:19",
    "ai_confidence": 24.87,
    "ai_mentions": 0.6,
    "ai_alignment": 2.9,
    "ai_depth": 2.6,
    "ai_intent": 2.9,
    "ai_audience": 7.8,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses broadly on high-level techniques and methodologies for software engineering, emphasizing practices like Agile, Lean, DevOps, automation, testing, and collaboration for delivering high-quality software. However, the text does not explicitly mention 'Technical Debt' or directly discuss the management, identification, or remediation of suboptimal code or design decisions, which are central to the Technical Debt category. \n\nScore Details:\n- Direct Mentions (0.60): There is no direct mention of technical debt. If present, it is only implied as an indirect benefit of best practices (e.g., automation, testing), warranting a very low score.\n- Conceptual Alignment (2.90): While maintaining software quality can help reduce technical debt, the main themes are general development practices, not specifically technical debt. Alignment is weak, with only a tangential connection.\n- Depth (2.60): The discussion is broad and does not go into depth about technical debt or its remediation, impact, or management. Depth is shallow regarding the category.\n- Intent (2.90): The primary purpose is to inform about general software development methodologies, not technical debt. At most, some practices could incidentally aid technical debt reduction, but this is not a main intent.\n- Audience (7.80): The intended audience includes technical practitioners (engineers, managers), which is compatible with Technical Debt, deserving a relatively high score.\n- Signal-to-Noise Ratio (6.90): The content is relevant to software practitioners, but only a small part is (indirectly) related to technical debt; the majority focuses on broader topics.\n\nNo penalties were applied since the content is not outdated, nor does it contradict the technical debt framing. The overall confidence (24.87) reflects a very weak and indirect alignment, categorizing this as 'Tertiary'.",
    "level": "Ignored"
  },
  "Large Scale Agility": {
    "resourceId": "Software Development",
    "category": "Large Scale Agility",
    "calculated_at": "2025-05-06T11:50:18",
    "ai_confidence": 32.74,
    "ai_mentions": 1.6,
    "ai_alignment": 3.3,
    "ai_depth": 3.8,
    "ai_intent": 2.7,
    "ai_audience": 4.5,
    "ai_signal": 3.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "Direct Mentions (1.6): The content mentions Agile, Lean, and DevOps, but only in the context of general software development—there are no explicit or repeated references to large-scale agility or scaling frameworks (e.g., SAFe, LeSS). Conceptual Alignment (3.3): While some high-level ideas—like collaboration, alignment with business objectives, and continuous improvement—mirror large-scale agile principles, the main thrust focuses on general team- or practice-level maturity and not enterprise-scale transformation. Depth of Discussion (3.8): The content explores best practices and holistic approaches within software development but lacks in-depth discussion specific to scaling agile practices across multiple teams, organizations, or enterprise-wide strategies. Intent/Purpose Fit (2.7): The intent is broad—improving software engineering quality and delivery—not specifically large-scale agility; agile is referenced, but scaling is not the clear focus or purpose. Audience Alignment (4.5): The audience is broadly software development practitioners/organizations, which could include those interested in scale, but there's no direct targeting of executives, transformation leaders, or enterprise-level strategists. Signal-to-Noise (3.4): The content is focused, but its focus is broad and not specific to large-scale agile or scaling practices, so relevance is diluted for this particular category. No penalties were applied, as the content is not outdated, nor does it contradict the spirit of the category.",
    "level": "Ignored"
  },
  "Systems Thinking": {
    "resourceId": "Software Development",
    "category": "Systems Thinking",
    "calculated_at": "2025-05-06T11:50:20",
    "ai_confidence": 43.25,
    "ai_mentions": 1.8,
    "ai_alignment": 5.9,
    "ai_depth": 4.7,
    "ai_intent": 4.4,
    "ai_audience": 6.1,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "The content is broadly about software development methodologies and high-level engineering principles rather than Systems Thinking itself. The category 'Systems Thinking' is never mentioned directly, nor are foundational systems thinking concepts or canonical tools like causal loop diagrams, feedback loops, or system mapping. There are indirect references to systemic or holistic approaches (e.g., 'holistic view of the software lifecycle', 'systematic approach') and mention of interconnections (e.g., collaboration, cross-functional work), but without depth or explicit linkage to Systems Thinking frameworks or principles.\n\nThe alignment is modest because some aspects (iterative feedback, integration, dealing with complexity) echo the mindset encouraged by Systems Thinking, but the explicit focus remains on software engineering, not systems theory or organisational systems dynamics. Depth is limited to applied software practices; it does not analyze or explore complex interdependencies at a systems level, nor does it present case studies or systems mapping exercises. \n\nIntent is off-primary-purpose—the content aims to describe software engineering best practices, only tangentially touching on concepts that overlap with Systems Thinking. The audience skews technical and practitioner-based (software developers, engineering managers), which slightly overlaps with Systems Thinking's target audience in organisations, but the materials are not tailored to systems thinkers.\n\nThe signal-to-noise ratio is fairly high since the content remains focused, but the material itself is not dedicated to Systems Thinking principles. No penalties were applied as the text is up-to-date, professional, and not critical or misaligned in tone, merely tangential. Overall, this resource is classified as 'Tertiary' because any relevance to Systems Thinking is indirect and surface-level at best.",
    "level": "Tertiary"
  },
  "Agile Transformation": {
    "resourceId": "Software Development",
    "category": "Agile Transformation",
    "calculated_at": "2025-05-06T11:50:29",
    "ai_confidence": 37.125,
    "ai_mentions": 2.2,
    "ai_alignment": 3.6,
    "ai_depth": 3.8,
    "ai_intent": 3.2,
    "ai_audience": 4.9,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "This content gives a general overview of software development methodologies and best practices, including mentions of Agile, Lean, and DevOps. However, it treats these as part of a broader set of approaches for software engineering rather than focusing directly on Agile Transformation. \n\n- Direct Mentions (2.2): The word 'Agile' appears once, alongside Lean and DevOps, but there are no explicit references to 'Agile Transformation' or related terminology (frameworks, change management, scaling Agile, etc.).\n- Conceptual Alignment (3.6): There is moderate alignment with the conceptual underpinnings of Agile (iterative development, adaptability, continuous improvement), but these are discussed as general software development practices rather than specific tactics or strategies for organizational transformation.\n- Depth (3.8): The material scratches the surface of aspects relevant to Agile (responsiveness to change, collaboration, value delivery), but does not discuss transformation processes, leadership, change management, or metrics in the depth needed for this category.\n- Intent/Purpose Fit (3.2): The purpose is general information about software development improvement, not about teaching, guiding, or supporting Agile Transformation specifically.\n- Audience Alignment (4.9): While relevant to technical professionals, the audience is broad (anyone interested in software development), not specifically those responsible for or engaged in Agile organizational transformation (e.g., leaders, coaches, change agents).\n- Signal-to-Noise (4.7): Most content is on-topic for software development systems, yet very little directly addresses Agile Transformation.\n\nThere is no penalty applied; the content is current and does not contradict Agile principles, but remains very general. The overall confidence score is low and appropriate as the article is only tangentially related to Agile Transformation. The proper classification level is 'Tertiary' — Agile Transformation is mentioned as one of many approaches but is neither central nor deeply explored.",
    "level": "Ignored"
  },
  "Service Level Expectation": {
    "resourceId": "Software Development",
    "category": "Service Level Expectation",
    "calculated_at": "2025-05-06T11:50:18",
    "ai_confidence": 39.05,
    "ai_mentions": 0.3,
    "ai_alignment": 4.4,
    "ai_depth": 3.9,
    "ai_intent": 3.8,
    "ai_audience": 5.2,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "The content titled 'Software Development' provides a high-level overview of software engineering techniques and methodologies. \n\n1. Direct Mentions (0.300): Nowhere does the content specifically mention 'Service Level Expectation' or any explicit synonyms (such as SLEs, SLAs, or even references to expected service performance metrics). It focuses instead on practices (Agile, Lean, DevOps) and general benefits (efficiency, adaptability), hence the very low score.\n\n2. Conceptual Alignment (4.400): There is moderate conceptual overlap in that maintaining quality, predictability, and meeting customer needs could align with service level expectations in a broad sense. However, the connection is implicit, not explicit—the discussion centers on development approaches rather than establishing or managing expectations around service levels.\n\n3. Depth of Discussion (3.900): The degree of depth related to Service Level Expectation is low. The content provides detail about the software development lifecycle, methodologies, and continuous improvement, but does not actually discuss measurable outcomes, targets, or user-facing expectations that are core to SLE or SLO topics. The relationship is secondary at best.\n\n4. Intent / Purpose Fit (3.800): The focus and intent is to inform readers about software development best practices, not to set, explain, or manage Service Level Expectations. Any alignment with SLEs is more a byproduct (e.g., high-quality, predictable delivery could support good SLEs), but the purpose is not focused on SLE as a business or operational target.\n\n5. Audience Alignment (5.200): The primary audience for this content appears to be practitioners and possibly strategists seeking an overview of software development approaches. This overlaps somewhat with audiences interested in SLE (such as engineering managers), but it's less targeted at those specifically setting or tracking SLEs.\n\n6. Signal-to-Noise Ratio (6.000): The content is well-focused on its main topic, without significant off-topic or filler material. However, relevance to Service Level Expectation is limited; most information centers around processes and quality, not expectations or thresholds for service. \n\nNo penalties were applied since there is no evidence of outdated information or contradicting/critical tone.\n\nOverall, the confidence is appropriately low, placing this as a Tertiary association because the piece is not fundamentally about Service Level Expectations, and any links are indirect or thematic.",
    "level": "Ignored"
  },
  "Team Performance": {
    "resourceId": "Software Development",
    "category": "Team Performance",
    "calculated_at": "2025-05-06T11:50:19",
    "ai_confidence": 62.233,
    "ai_mentions": 3.6,
    "ai_alignment": 7.6,
    "ai_depth": 6.7,
    "ai_intent": 7.0,
    "ai_audience": 7.8,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 62.0,
    "reasoning": "The content introduces software development methodologies and their role in enabling effective, high-quality delivery by teams. It references teams multiple times (e.g., 'collaboration within teams', 'cross-functional collaboration'), and discusses system-level approaches like Agile, Lean, and DevOps that are highly relevant to team performance. However, there are no direct mentions or focus on team performance as an evaluative concept—terms like delivery metrics, systemic throughput, or team delivery outcomes are absent. The alignment is reasonably strong but not primary; the thrust is on software engineering as a practice, with team effectiveness implicitly supported. The depth reaches a moderate level by discussing iterative development, feedback responsiveness, automation, and systemic improvement principles, but does not provide explicit analysis of how performance is measured or managed at the team level. The intent is mostly informative with some supporting elements pertaining to performance at the system/team layer, but is not solely dedicated to team performance. The target audience is broad, covering both practitioners and leaders with an interest in software development methodology, which moderately overlaps with team performance audiences. The signal-to-noise ratio is good; while most content is relevant to systemic team practice, some of it is more general (e.g., 'sustainable competitive advantage') and less focused on delivery-specific team performance. No penalties were required, as the content is current and supportive in tone. The 'Secondary' level is appropriate: team performance is a relevant but not the dominant theme.",
    "level": "Secondary"
  },
  "Lean Startup": {
    "resourceId": "Software Development",
    "category": "Lean Startup",
    "calculated_at": "2025-05-06T11:50:19",
    "ai_confidence": 13.62,
    "ai_mentions": 1.2,
    "ai_alignment": 2.6,
    "ai_depth": 2.7,
    "ai_intent": 1.8,
    "ai_audience": 2.4,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a broad overview of Software Development techniques and methodologies, referencing approaches like Agile, Lean, and DevOps. However, there are no explicit mentions of 'Lean Startup,' nor discussion of its core concepts such as the Minimum Viable Product (MVP), Build-Measure-Learn loop, validated learning, or specific Lean Startup tools or case studies. While it vaguely touches on iterative development and continuous improvement, these themes are generic to multiple methodologies and are not uniquely tied to Lean Startup. The audience is likely technology practitioners or managers, whereas Lean Startup is specifically targeted at entrepreneurial teams and innovation-driven audiences. The content lacks depth regarding Lean Startup ideas and spends a majority of its text on general software engineering principles. Thus, the connection to the Lean Startup category is extremely tenuous, justifying low scores across all dimensions. No penalties are applied as the content is neither outdated nor contradicts Lean Startup, but it is clearly only tangentially related at best.",
    "level": "Ignored"
  },
  "Cycle Time": {
    "resourceId": "Software Development",
    "category": "Cycle Time",
    "calculated_at": "2025-05-06T11:50:27",
    "ai_confidence": 16.675,
    "ai_mentions": 0.6,
    "ai_alignment": 1.8,
    "ai_depth": 1.5,
    "ai_intent": 2.5,
    "ai_audience": 4.0,
    "ai_signal": 2.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses broadly on software development methodologies, including mentions of Agile, Lean, and DevOps, as well as ideals like efficiency and delivery cycles. However, it never directly references Cycle Time, nor does it define, discuss, or analyze it as a metric. \n\n- **Direct Mentions (0.6):** There are zero explicit mentions of 'Cycle Time.' The closest is a generic reference to 'delivery cycles,' which is not sufficient for this category.\n- **Conceptual Alignment (1.8):** While the content fits the broader context where Cycle Time might be relevant (e.g., Agile, DevOps, and efficiency), it doesn't address the measurement, implications, or practice of Cycle Time itself.\n- **Depth of Discussion (1.5):** There is no depth on Cycle Time—no exploration of what it is, why it matters, how to measure it, or how to improve it. Mention of 'accelerates delivery cycles' is vague and not expanded on in any meaningful way.\n- **Intent / Purpose Fit (2.5):** The purpose is to offer an overview of software development strategies and culture. It is not designed to inform, teach, or explore Cycle Time except as an extremely superficial and incidental tangent.\n- **Audience Alignment (4.0):** The content is suitable for an audience interested in software engineering and methodologies (which does overlap with Cycle Time professionals), but its generality dilutes its direct usefulness to Cycle Time-focused readers.\n- **Signal-to-Noise Ratio (2.3):** The majority of the content is about generic software development best practices, with only broad indirect references to concepts related to Cycle Time. Most of the text is off-topic for a strict Cycle Time category.\n\nNo penalty was applied since the content is not outdated, and the tone is neutral and aligned with modern software practices. The overall classification level is 'Tertiary' because any relevance to Cycle Time is indirect, incidental, and not substantive.",
    "level": "Ignored"
  },
  "DevOps": {
    "resourceId": "Software Development",
    "category": "DevOps",
    "calculated_at": "2025-05-06T11:50:36",
    "ai_confidence": 53.765,
    "ai_mentions": 2.8,
    "ai_alignment": 6.5,
    "ai_depth": 5.6,
    "ai_intent": 7.5,
    "ai_audience": 8.2,
    "ai_signal": 9.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content focuses broadly on software development practices and methodologies. DevOps is explicitly mentioned once among others (such as Agile, Lean), leading to a low 'mentions' score of 2.8. Conceptually, some DevOps-aligned themes are present, such as automation, cross-functional collaboration, and continuous improvement, but these are not explored in a way that centers the DevOps philosophy—the alignment score is thus moderate at 6.5. The depth of discussion about DevOps specifically is lacking (score: 5.6), as the content covers DevOps only as a component of the wider software development landscape and does not delve into cultural or structural DevOps details. The intent is generally relevant (7.5), supporting the DevOps ethos but not focusing on it as the main purpose. The likely audience—practitioners and strategists involved in software delivery—overlaps well with the DevOps audience (8.2). Signal-to-noise is high (9.1) because the content stays on-topic regarding modern software development, even if DevOps is not the sole or primary focus. No penalties have been applied, as the discussion is current and does not openly contradict DevOps principles.\n\nOverall, the resource is best described as 'Secondary' for the 'DevOps' category: it offers supporting discussion and context for DevOps but does not center its philosophy, practices, or transformation journey.",
    "level": "Tertiary"
  },
  "Digital Transformation": {
    "resourceId": "Software Development",
    "category": "Digital Transformation",
    "calculated_at": "2025-05-06T11:50:20",
    "ai_confidence": 44.026,
    "ai_mentions": 1.3,
    "ai_alignment": 4.6,
    "ai_depth": 4.9,
    "ai_intent": 3.5,
    "ai_audience": 5.4,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content focuses on software development practices—Agile, Lean, DevOps, and the value these bring to organisations in terms of quality, collaboration, and adaptability. However, while some concepts (such as enhancing adaptability, fostering innovation, and supporting business objectives) partially align with aspects of digital transformation, the primary discussion is the improvement of software engineering for its own sake, not the broader organisational transformation via strategic digital technology adoption. \n\nDirect Mentions (1.3): The phrase 'digital transformation' is not used, nor are concepts such as 'change management,' 'enterprise strategy,' or named emerging technologies (AI, cloud) explicitly referenced. Software development methods are discussed as ends, not as part of a transformation strategy.\n\nConceptual Alignment (4.6): Some concepts—innovation, cross-functional teams, continuous improvement, and adaptability—relate to digital transformation, but the piece never addresses how technology transforms overall business processes, customer engagement, or organisational culture. The alignment is partial and incidental, not primary.\n\nDepth (4.9): The discussion is substantive in regards to development processes and their value, but provides little exploration of strategic digital transformation themes such as technology-enabled business model changes, change management practices, or measurement of transformation success.\n\nIntent (3.5): The central purpose is to inform about software development methodologies, not the strategic transformation of the business via digital tools. Thus, while relevant for an audience who may also be involved in transformation, the fit is tangential.\n\nAudience (5.4): The likely audience includes technical practitioners and engineering leaders, with some overlap to technical transformation stakeholders, but not directly targeting transformation strategists or executives.\n\nSignal-to-Noise (7.3): The content is focused and on-topic for software development, but only a small fraction is relevant to digital transformation; much of it is noise in this categorical context.\n\nNo penalties were applied because the content is recent, uncritical, and does not undermine the framing.\n\nThe score and 'Tertiary' level reflect that, although aspects of the discussion (collaboration, adaptability, innovation) may support digital transformation, the content is not primarily about the category. It would only be relevant as supplemental background for transformation initiatives—not a main reference.",
    "level": "Tertiary"
  },
  "Technical Leadership": {
    "resourceId": "Software Development",
    "category": "Technical Leadership",
    "calculated_at": "2025-05-06T11:50:30",
    "ai_confidence": 51.04,
    "ai_mentions": 2.2,
    "ai_alignment": 6.7,
    "ai_depth": 6.4,
    "ai_intent": 5.5,
    "ai_audience": 8.1,
    "ai_signal": 7.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 51.0,
    "reasoning": "The content provides a broad overview of software development techniques and methodologies, mentioning Agile, Lean, and DevOps, all of which are highly relevant to technical leadership roles. However, it focuses more on team practices, systemic benefits, and organizational value rather than explicitly discussing leadership, mentoring, or guidance. \n\n1. Mentions (2.2): The term 'technical leadership' is never explicitly referenced, nor are leadership principles directly invoked. The closest connections are the indirect mentions of Agile and DevOps practices, which are often facilitated or guided by technical leadership, but the language remains at the practice/implementation level rather than the leadership level.\n\n2. Alignment (6.7): The content aligns conceptually with core elements of technical leadership, such as fostering collaboration, promoting continuous improvement, and integrating Agile/DevOps. However, it does not go into specifics about leadership responsibilities, servant leadership, or team coaching, thus staying adjacent to rather than within the category.\n\n3. Depth (6.4): The article explores important aspects of effective software development in some detail, like iterative development, automation, and evidence-based management, but does not dive into how leaders specifically facilitate these processes or navigate team dynamics—areas where depth of technical leadership would be demonstrated.\n\n4. Intent (5.5): The central purpose is to inform about quality software engineering practices, not to offer guidance for technical leaders or explicitly support their role. Any benefit to technical leadership is indirect.\n\n5. Audience (8.1): The target audience is technical professionals and possibly aspiring leaders, but not strictly technical leaders. However, the advanced discussion of methodologies, cross-functional collaboration, and alignment with business objectives will resonate with those in or aspiring to leadership positions.\n\n6. Signal-to-Noise Ratio (7.4): Most information is relevant to those practicing and managing technical teams; however, it's generally high-level and diffuse, not tightly focused on technical leadership.\n\nNo penalties are applied as the content does not reference outdated practices or adopt a critical/satirical tone. It also does not contradict or undermine the principles of technical leadership.\n\nOverall, the content sits close to but doesn't fully inhabit the 'Technical Leadership' category, making it a 'Secondary' level fit. The confidence score reflects its relevance without direct focus.",
    "level": "Tertiary"
  },
  "Operational Practices": {
    "resourceId": "Software Development",
    "category": "Operational Practices",
    "calculated_at": "2025-05-06T11:50:19",
    "ai_confidence": 72.615,
    "ai_mentions": 3.7,
    "ai_alignment": 7.9,
    "ai_depth": 7.7,
    "ai_intent": 7.6,
    "ai_audience": 7.4,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 73.0,
    "reasoning": "The content broadly addresses methodologies (Agile, Lean, DevOps) and practices that underpin high-quality and efficient software delivery, with references to automation, testing, integration, iterative development, continuous improvement, and evidence-based management. These are all relevant to Operational Practices as defined. However, the discussion is somewhat general, focusing on high-level benefits and organizational impact rather than providing specifics on process optimization, concrete techniques, or metrics. \n\nFor 'Direct Mentions' (3.7), the category (Operational Practices) is not explicitly named, but related terms and frameworks (Agile, Lean, DevOps, automation, continuous improvement) are referenced multiple times. 'Conceptual Alignment' (7.9) is high because the content's main themes are aligned with improving efficiency and delivery using these methodologies, but it does so at a conceptual rather than practical or technique-based level. 'Depth of Discussion' (7.7) reflects a thorough overview of why certain methodologies matter, but lacks tactical detail on operational optimization. 'Intent/Purpose Fit' (7.6) is strong, with content aimed at improving software effectiveness and efficiency for organizational benefit—matching the objectives of Operational Practices. 'Audience Alignment' (7.4) is strong; the material targets professionals interested in team or organizational improvement, overlapping the expected audience of operational practitioners, though it isn't narrowly focused on operations roles. 'Signal-to-Noise Ratio' (7.2) is good, as the content is focused with minimal filler, though not every section is highly specific to operational practices. No penalties were applied, as the content is current, supportive, and in line with the category's intent. The 'Secondary' level is justified because, while operational improvement is a core thread, the coverage is not as specific or action-driven as 'Primary' would require, but far deeper than 'Tertiary.'",
    "level": "Secondary"
  },
  "Employee Engagement": {
    "resourceId": "Software Development",
    "category": "Employee Engagement",
    "calculated_at": "2025-05-06T11:50:22",
    "ai_confidence": 16.659,
    "ai_mentions": 0.9,
    "ai_alignment": 1.6,
    "ai_depth": 2.2,
    "ai_intent": 2.0,
    "ai_audience": 6.1,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 17.0,
    "reasoning": "The content focuses predominantly on software development methodologies and practices such as Agile, Lean, and DevOps, with its primary intent being the improvement of technical processes and software quality, rather than specifically addressing employee motivation, commitment, or engagement. \n\n- Mentions (0.9): There are no direct references to 'Employee Engagement' or core motivational concepts; the content's terminology does not align directly with the category—occasional use of the words 'collaboration' and 'culture' are tangential rather than central. \n- Alignment (1.6): Conceptual overlap is minimal. While collaboration and a positive environment are briefly acknowledged, they are framed as outcomes of process improvements, rather than as discrete strategies to foster engagement. The content is squarely about software engineering, not psychological or social aspects of work.\n- Depth (2.2): Discussion on people- or engagement-related matters is superficial and indirect—any engagement impact is a byproduct, not an object of discussion. \n- Intent (2.0): The aim is to inform practitioners about modern software development, not to explore or enhance employee engagement. \n- Audience (6.1): The audience comprises software practitioners, many of whom would overlap with those interested in team engagement, but here the content skews technical rather than HR/leadership focused. \n- Signal (7.0): Content is highly focused on the stated topic (software development) but not on the engagement theme; little tangential information, just off-category. \nNo penalties are applied since the content is up-to-date and does not undermine employee engagement. \n\nLevel: Tertiary. Employee engagement is, at best, a peripheral effect, not a primary or secondary theme. Final confidence score is low, reflecting incidental and indirect relevance only.",
    "level": "Ignored"
  },
  "Frequent Releases": {
    "resourceId": "Software Development",
    "category": "Frequent Releases",
    "calculated_at": "2025-05-06T11:50:29",
    "ai_confidence": 56.43,
    "ai_mentions": 4.3,
    "ai_alignment": 6.1,
    "ai_depth": 5.8,
    "ai_intent": 6.6,
    "ai_audience": 6.9,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 56.0,
    "reasoning": "The content is broadly about software development, covering a range of modern practices including Agile, Lean, DevOps, iterative development, automation, testing, integration, and continuous improvement. There is an explicit mention that these methodologies allow 'frequent releases that enhance customer satisfaction,' but that mention is brief and not deeply explored. \n\nDirect Mentions: The phrase 'frequent releases' appears once, wrapped in a broader context. Direct discussion on release frequency or the specific practices enabling frequent releases is minimal, justifying a modest score (4.3).\n\nConceptual Alignment: The piece aligns in its advocacy for Agile, DevOps, automation, and continuous improvement—all of which are foundational to frequent releases. However, the focus is more on the generalities of high-quality software engineering rather than release cadence. Score: 6.1.\n\nDepth: While there is discussion about iterative practices and delivery cycles, there is limited in-depth treatment of release strategies, continuous deployment, or CI/CD pipelines. Frequent releases are referenced as an outcome, but not as a central topic. Score: 5.8.\n\nIntent: The primary intent is to overview high-quality modern software development, with only a minor sub-intent towards frequent releases. The fit is somewhat supportive but not direct. Score: 6.6.\n\nAudience Alignment: The content targets practitioners, strategists, and managerial roles in software engineering, which largely overlaps with the audience interested in frequent releases. Score: 6.9.\n\nSignal-to-Noise: The content is focused, but only a small amount is relevant directly to frequent releases; most is on overall development philosophy. Score: 5.5.\n\nNo penalties are applied as the information is reasonably current, non-contradictory, and aligned in tone.\n\nThe final confidence score reflects that while frequent releases are mentioned and contextually present, they do not represent the primary or even a dominant secondary theme—the discussion is more generalized, making 'Secondary' the appropriate assignment level.",
    "level": "Tertiary"
  },
  "Agile Planning": {
    "resourceId": "Software Development",
    "category": "Agile Planning",
    "calculated_at": "2025-05-06T11:50:36",
    "ai_confidence": 53.637,
    "ai_mentions": 2.0,
    "ai_alignment": 5.5,
    "ai_depth": 5.2,
    "ai_intent": 6.5,
    "ai_audience": 7.0,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 54.0,
    "reasoning": "The content is an overview of modern software development practices and methodologies, briefly highlighting Agile (alongside Lean and DevOps) as part of a broader toolbox for engineering high-quality software. \n\n(1) Direct Mentions (2.0): The mention of 'Agile' is present, but it is neither explicit nor recurring. Agile Planning, itself, is not named or discussed explicitly, so the direct mention score is low.\n\n(2) Conceptual Alignment (5.5): The content generally aligns with Agile philosophy through references to adaptability, iterative development, feedback, collaboration, and continuous improvement. However, these are presented as traits of good software development, not specifically Agile Planning. There is no explicit tying together of Agile Planning principles, backlog management, sprints, or planning rituals.\n\n(3) Depth of Discussion (5.2): The treatment of Agile-related concepts is superficial; the discussion does not move beyond broad themes of iteration and adaptability. Agile Planning mechanisms, such as specific planning frameworks, user stories, sprints, or feedback loops, are not explored.\n\n(4) Intent/Purpose Fit (6.5): The intent is to inform about software development methodologies, including Agile as a component. While somewhat aligned, the purpose is not focused on Agile Planning itself.\n\n(5) Audience Alignment (7.0): The presumed audience (software engineering practitioners and teams interested in methodologies) mostly overlaps with that of Agile Planning; the target is general and includes non-Agile audiences, but Agile Planning practitioners fall within this broader set.\n\n(6) Signal-to-Noise Ratio (7.8): The content is mostly focused and avoids filler, but only a small part applies directly to Agile Planning; the rest applies to adjacent concepts (DevOps, Lean, automation, etc.).\n\nNo penalties are applied because the content is current, not satirical or critical, and does not undermine Agile principles — it simply lacks focus on Agile Planning. The overall confidence reflects that while Agile Planning is tangentially addressed within a much broader context, it is not the focus nor is it discussed in depth.",
    "level": "Tertiary"
  },
  "Agile Values and Principles": {
    "resourceId": "Software Development",
    "category": "Agile Values and Principles",
    "calculated_at": "2025-05-06T11:50:20",
    "ai_confidence": 56.65,
    "ai_mentions": 3.6,
    "ai_alignment": 6.4,
    "ai_depth": 6.1,
    "ai_intent": 5.7,
    "ai_audience": 6.6,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 57.0,
    "reasoning": "The content \"Software Development\" provides a broad overview of software engineering methodologies and practices, citing Agile as one approach among others (Lean, DevOps). Though there are implicit references to themes such as adaptability, customer satisfaction, continuous improvement, and collaboration—all resonant with Agile values—there is no explicit or in-depth discussion of the Agile Manifesto, its core values, or its twelve principles. \n\nMentions (3.6): Agile is referenced by name one time, as are Lean and DevOps, but Agile values or principles are not directly named, yielding a low-to-moderate score.\n\nAlignment (6.4): Many statements (e.g., adaptability, responsiveness to change, continuous improvement, collaboration, customer satisfaction) conceptually align with Agile philosophy, but they also fit other methodologies, making the fit partial rather than strong.\n\nDepth (6.1): The discussion uses Agile themes but does not elaborate on any value or principle specifically. There are no references to the Agile Manifesto or deeper exploration of its meaning or impact within an Agile context.\n\nIntent (5.7): The main intent is to provide a high-level overview of software development practices, not to inform or teach Agile values specifically. Agile is presented as one of several methodologies.\n\nAudience (6.6): The audience includes practitioners, technical professionals, and leaders in software, matching somewhat with the intended audience for Agile principles, though not exclusively.\n\nSignal (6.3): Core ideas such as quality, adaptability, continuous improvement, and responsiveness are relevant, but equal emphasis is placed on other methodologies and generic practices, which introduces some noise.\n\nNo penalties apply, as the content is current and does not criticize or contradict the Agile values framing. Overall, while Agile-aligned concepts are present, their discussion is secondary to the general topic of software engineering methodologies, thus a Secondary level fit is assigned and the confidence expresses a moderate, but not strong, alignment.",
    "level": "Tertiary"
  },
  "Customer Retention": {
    "resourceId": "Software Development",
    "category": "Customer Retention",
    "calculated_at": "2025-05-06T11:50:20",
    "ai_confidence": 41.315,
    "ai_mentions": 1.8,
    "ai_alignment": 4.2,
    "ai_depth": 3.6,
    "ai_intent": 3.9,
    "ai_audience": 6.5,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 41.0,
    "reasoning": "The content primarily discusses general software development practices, methodologies, and values such as Agile, Lean, DevOps, collaboration, automation, and continuous improvement. There are brief indirect references to meeting 'user needs', 'customer satisfaction', and 'customer expectations', which have some conceptual overlap with Customer Retention, but these are not directly explored or positioned as strategies for retaining customers. \n\n1. Mentions (1.8): There are no explicit mentions of 'customer retention'; indirect allusions, such as enhancing customer satisfaction, are occasional but not a focus.\n2. Alignment (4.2): The alignment is partial; user-centric development is supportive of retention, but the content never directly frames the goal as customer retention, nor does it focus on it as a primary theme.\n3. Depth (3.6): The discussion of customer-related outcomes is superficial—depth is focused on engineering excellence, not retention mechanisms.\n4. Intent (3.9): The intent is broad (software engineering excellence), not specifically to inform or support retention strategies, though improved customer satisfaction is a secondary benefit hinted at.\n5. Audience (6.5): The target audience (technical leaders, practitioners) overlaps partially with those interested in retention strategy, but is broader, not tailored.\n6. Signal (5.1): Around half of the text could be relevant in the broader context of retention (customer focus, agility), but most is engineering-centric, not retention-centric.\n\nNo outdated concepts, satirical tone, or contradictions are present; hence, no penalties. The overall confidence is low, and classification as 'Customer Retention' would only be tertiary, given the indirect relevance.",
    "level": "Tertiary"
  },
  "Lean Product Development": {
    "resourceId": "Software Development",
    "category": "Lean Product Development",
    "calculated_at": "2025-05-06T11:50:30",
    "ai_confidence": 43.056,
    "ai_mentions": 1.3,
    "ai_alignment": 4.8,
    "ai_depth": 4.7,
    "ai_intent": 5.3,
    "ai_audience": 7.2,
    "ai_signal": 7.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "Direct Mentions (1.3): The content briefly references 'Lean' alongside 'Agile' and 'DevOps', grouping it as part of software development practices, but there is no explicit, repeated mention of Lean Product Development or its focused principles. \n\nConceptual Alignment (4.8): The overall theme broadly aligns with Lean-related ideas such as efficiency, continuous improvement, collaboration, and delivering value. However, these are discussed in the generic context of software development, not particularly zeroing in on minimising waste or maximising learning, which are decisive for Lean Product Development. \n\nDepth of Discussion (4.7): References to Lean are shallow and rolled into general descriptions of modern software practices. The content does not explore Lean Product Development principles or tools in detail (e.g., no mention of Value Stream Mapping, customer-driven iteration, specific Lean waste categories, or learning cycles) and instead stays high-level and somewhat generic. \n\nIntent/Purpose Fit (5.3): The intent is informative about good practices in software development overall, which includes Lean as one component. However, the central aim is not to educate specifically about Lean Product Development; thus, the fit is only partial.\n\nAudience Alignment (7.2): The material addresses an audience interested in modern software engineering, which would overlap with those interested in Lean Product Development, particularly practitioners and leaders seeking improvement. However, since there's no focused Lean Product Development framing, the fit is only moderate to good.\n\nSignal-to-Noise Ratio (7.7): The content is well-written, tightly scoped, and avoids off-topic tangents. Nevertheless, the amount genuinely focused on Lean Product Development is a minor component versus broader software development methodologies, diluting the signal for the target category. \n\nNo penalties were applied, as the content is current and does not contradict the category. Overall, while Lean-related concepts are referenced, the content primarily addresses software development best practices at large. It treats Lean as a supplementary idea rather than elaborating on Lean Product Development itself, justifying a tertiary confidence level and a modest score.",
    "level": "Tertiary"
  },
  "Value Stream Mapping": {
    "resourceId": "Software Development",
    "category": "Value Stream Mapping",
    "calculated_at": "2025-05-06T11:50:21",
    "ai_confidence": 12.55,
    "ai_mentions": 0.25,
    "ai_alignment": 1.45,
    "ai_depth": 1.3,
    "ai_intent": 1.9,
    "ai_audience": 2.4,
    "ai_signal": 2.05,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 13.0,
    "reasoning": "The provided content discusses broad concepts and methodologies relevant to software development, such as Agile, Lean, and DevOps, as well as continuous improvement and collaboration. However, it does NOT explicitly mention Value Stream Mapping (VSM) in any form. \n\n- Direct Mentions: Scored at 0.25 since neither VSM nor its key synonyms are named. \n- Conceptual Alignment: Scored at 1.45 because the text references Lean and value delivery, which are adjacent concepts, but none of the VSM-specific techniques or analyses are addressed. \n- Depth of Discussion: Scored at 1.30 as there is no in-depth or surface-level exploration of VSM; the approach is high-level and generic.\n- Intent / Purpose Fit: Scored at 1.90 for being educational/informative about broad software practices, but it's not designed to inform on VSM specifically—and only tangentially references related topics.\n- Audience Alignment: Scored at 2.40; while the content does target practitioners in the software domain, it's much broader than the intended all-audience (from analyst to executive) of VSM discussions.\n- Signal-to-Noise: Scored at 2.05 since the content is meaningful and focused on software process improvement, but virtually none of it is relevant to VSM itself.\n\nNo penalties were applied, as the content is recent, neutral, and not misleading with respect to VSM (just unrelated). The overall confidence is proportionally very low, reflecting that a VSM-focused audience would not find substantive or even basic coverage of their target area.",
    "level": "Ignored"
  },
  "Internal Developer Platform": {
    "resourceId": "Software Development",
    "category": "Internal Developer Platform",
    "calculated_at": "2025-05-06T11:50:53",
    "ai_confidence": 11.075,
    "ai_mentions": 0.4,
    "ai_alignment": 1.6,
    "ai_depth": 1.3,
    "ai_intent": 2.1,
    "ai_audience": 2.3,
    "ai_signal": 1.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 11.0,
    "reasoning": "The content is a general overview of software development techniques, methodologies, and outcomes. There are no explicit mentions or references to Internal Developer Platforms (IDPs) or their defining characteristics, failing the 'Direct Mentions' dimension (score: 0.4). While it brings up themes like automation and DevOps, it does so at a high level without connecting to IDP concepts such as controlled environments, platform architecture, or streamlining development via an IDP ('Alignment' score: 1.6). The 'Depth' score (1.3) is low as IDPs are neither discussed directly nor even alluded to in detail; the explanation remains at the generic process/methodology level. The 'Intent' score (2.1) reflects some adjacent relevance for technical audiences, but the purpose is broad and not IDP-specific. 'Audience Alignment' (2.3) gets a slightly higher score since the audience overlaps with those who might be interested in IDPs, but without targeting platform engineers or DevOps practitioners specifically. 'Signal' (1.8) is low since the bulk of the content is general context and does not provide focused, actionable information about IDPs. No outdated or contradictory content is present, so no penalties are applied. With a confidence of 11.075/100, this resource is classified as 'Tertiary'—it is tangential at best and does not substantively address the Internal Developer Platform category.",
    "level": "Ignored"
  },
  "Throughput": {
    "resourceId": "Software Development",
    "category": "Throughput",
    "calculated_at": "2025-05-06T11:51:07",
    "ai_confidence": 7.44,
    "ai_mentions": 0.2,
    "ai_alignment": 0.4,
    "ai_depth": 0.6,
    "ai_intent": 0.3,
    "ai_audience": 2.2,
    "ai_signal": 2.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content provides a broad overview of software development methodologies and their benefits, such as Agile, Lean, and DevOps, and focuses on high-level concepts like quality, adaptability, and delivery. Nowhere does it mention, reference, or even closely approximate throughput as a delivery metric. There is no discussion, implicit or explicit, about measuring the number of work items completed over time, capacity, Cumulative Flow Diagrams, throughput trends, constraints, or forecasting using throughput. The intent is to introduce and advocate software engineering principles and general improvement culture. The target audience seems to be those interested in understanding software development practices at a conceptual or strategic level, not specifically those interested in metrics or throughput analysis. The content is relevant within its own scope but entirely lacks relevance to the 'Throughput' tag as defined. Each score reflects this: very low on direct mentions, alignment, depth, and intent; audience and signal are marginally higher since some practitioners interested in throughput may also engage with this content, and the content is generally focused. No penalties were needed as the tone is appropriate and nothing is obsolete, but it is a clear tertiary fit at best.",
    "level": "Ignored"
  },
  "Install and Configuration": {
    "resourceId": "Software Development",
    "category": "Install and Configuration",
    "calculated_at": "2025-05-06T11:50:21",
    "ai_confidence": 7.97,
    "ai_mentions": 0.1,
    "ai_alignment": 0.25,
    "ai_depth": 0.2,
    "ai_intent": 0.25,
    "ai_audience": 5.0,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 8.0,
    "reasoning": "The content does not directly mention installation or configuration, nor does it address any aspect of setting up tools or software. Its primary focus is on general software development methodologies (Agile, Lean, DevOps) and high-level practices such as iterative delivery, automation, and quality improvement. \n\n- Mentions (0.10): There are no explicit or implicit references to 'Install and Configuration.'\n- Alignment (0.25): The described themes align with software engineering at large, not installation or configuration topics.\n- Depth (0.20): The discussion is broad, with no substantive engagement with install/configuration; only high-level lifecycle, collaboration, and process are discussed.\n- Intent (0.25): The purpose is to inform about software development methodologies, not to provide setup guidance or actionable configuration steps.\n- Audience (5.00): The audience could overlap with technical practitioners, but the framing is broader (not specifically targeting those implementing install/config).\n- Signal (5.50): The content is focused on its main topic, with minimal 'noise', but that topic is orthogonal to install/config.\n\nNo penalty was needed for outdated information or contradictory tone. The overall confidence appropriately reflects the near-absence of category-relevant content, and the tertiary level is assigned because 'Install and Configuration' is only distantly related, if at all, to the content.",
    "level": "Ignored"
  },
  "Asynchronous Development": {
    "resourceId": "Software Development",
    "category": "Asynchronous Development",
    "calculated_at": "2025-05-06T11:50:29",
    "ai_confidence": 10.45,
    "ai_mentions": 0.3,
    "ai_alignment": 0.5,
    "ai_depth": 0.4,
    "ai_intent": 0.6,
    "ai_audience": 3.1,
    "ai_signal": 4.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content is a generalized overview of software development methodologies, techniques, and principles, focusing on broad themes like Agile, Lean, DevOps, automation, cross-functional collaboration, and value delivery. There is no explicit mention or even an implicit reference to asynchronous development or its unique principles, challenges, tools, or benefits. \n\nMentions (0.3): There are no direct mentions of 'asynchronous development' or related concepts; the content is focused entirely on the general field. \n\nConceptual Alignment (0.5): The broad themes of collaboration and modern methodologies are present, but none are specifically described in asynchronous terms, nor is there any discussion of distributed or time-independent collaboration. \n\nDepth (0.4): The discussion goes into reasonable depth about overall software development, but says nothing about asynchronous development, its nuances, or best practices. \n\nIntent (0.6): The intent is to inform and overview core software engineering practices, not specifically address asynchronous workflows, collaboration, or team management. \n\nAudience (3.1): The target audience—software engineers, architects, and technical leaders—is loosely related but is not aligned with the specialist needs of asynchronous development practitioners. However, the audience could reasonably overlap with those interested in asynchronous methods. \n\nSignal (4.8): Nearly all the content is focused on generalized practices in software development, with no off-topic or noise that actively contradicts asynchronous development, but also with minimal relevant signal toward the target category. \n\nNo penalties are applied, as the content is current, neutral, and does not undermine or criticize asynchronous development. The overall confidence score (10.45) rightly reflects a very weak fit, and the content would only tangentially relate to asynchronous development at the most generic software engineering level.",
    "level": "Ignored"
  },
  "Unrealised Value": {
    "resourceId": "Software Development",
    "category": "Unrealised Value",
    "calculated_at": "2025-05-06T11:50:22",
    "ai_confidence": 38.387,
    "ai_mentions": 1.7,
    "ai_alignment": 3.2,
    "ai_depth": 3.1,
    "ai_intent": 4.5,
    "ai_audience": 5.1,
    "ai_signal": 4.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content provides a general overview of software development methodologies and high-level benefits, emphasizing quality, collaboration, continuous improvement, and adaptability. While it references evidence-based management and mentions innovation as a byproduct of effective development practices, it does not explicitly mention or deeply discuss the concept of 'Unrealised Value' as defined. There is no dedicated discussion of identifying, measuring, or capitalizing on untapped opportunities, latent market demand, or specific frameworks for capturing potential value. The alignment is somewhat indirect, as improving software may naturally address unrealised value, but the content does not make this connection explicit or central. The target audience overlaps with strategists or managers interested in evidence-based management, but could include a broader practitioner base as well. The content is focused, with minimal off-topic material, but does not delve into unrealised value indicators, tools, or case studies. Thus, the content’s relevance to 'Unrealised Value' is peripheral and secondary at best, warranting a tertiary categorization and a low-to-moderate confidence score.",
    "level": "Ignored"
  },
  "Organisational Physics": {
    "resourceId": "Software Development",
    "category": "Organisational Physics",
    "calculated_at": "2025-05-06T11:50:22",
    "ai_confidence": 38.775,
    "ai_mentions": 0.1,
    "ai_alignment": 3.7,
    "ai_depth": 3.5,
    "ai_intent": 2.9,
    "ai_audience": 5.1,
    "ai_signal": 4.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 39.0,
    "reasoning": "Direct mentions (0.1): The term 'Organisational Physics' is not mentioned anywhere, nor are any of its canonical frameworks or thinkers. There is a minimal nod to related systemic approaches.\nConceptual Alignment (3.7): The content discusses systemic thinking within software development, such as fostering collaboration, adaptability, and a holistic view of teams and workflows, but these are not explicitly tied to organisational dynamics or systems theory in the manner Organisational Physics requires.\nDepth (3.5): While the content provides some conceptual depth around software engineering methodologies and their impact on organisational adaptability and effectiveness, it stays at the level of summarising software practices rather than analysing the interplay of organisational elements, feedback loops, or emergent behaviour.\nIntent/Purpose Fit (2.9): The description and content are focused on practical software engineering, not on understanding or analysing organisational systems as a whole. While it broadly touches on organisational improvement, the intent is not to engage deeply with Organisational Physics topics.\nAudience (5.1): The primary audience appears to be software practitioners, which only partially overlaps with those interested in Organisational Physics (who are more likely to be strategists, systemic consultants, or organisational leaders). Some alignment exists due to themes related to cross-functional teams and adaptability.\nSignal-to-Noise (4.4): Most of the content is relevant to software development and team dynamics. However, only a minor portion brushes up against the systems-level focus required for Organisational Physics; thus, there is moderate off-topic content relative to the target category.\nNo penalties were applied: The content is current and does not undermine or satirise the category.\nLevel: Tertiary – The relationship to Organisational Physics is indirect, tangential, and not foregrounded. The content would not serve as a core or secondary resource for this category.",
    "level": "Ignored"
  },
  "Leadership": {
    "resourceId": "Software Development",
    "category": "Leadership",
    "calculated_at": "2025-05-06T11:50:25",
    "ai_confidence": 28.237,
    "ai_mentions": 1.21,
    "ai_alignment": 3.89,
    "ai_depth": 3.81,
    "ai_intent": 2.51,
    "ai_audience": 3.02,
    "ai_signal": 3.89,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 28.0,
    "reasoning": "The content predominantly discusses broad software development techniques, methodologies, and their business value. While Agile, Lean, and DevOps are referenced, leadership is not directly named nor is it a recurring explicit theme. \n\n- Mentions (1.210): Leadership is not explicitly named anywhere in the content. At most, organizational and team improvement are discussed in a general context, with no direct reference to leadership roles, ideas, or terminology.\n\n- Conceptual Alignment (3.890): There is some indirect connection to leadership—organizational culture, adaptability, and evidence-based management are mentioned, which are adjacent to but not core leadership concepts per the category definition. The main focus remains on technical and process approaches.\n\n- Depth of Discussion (3.810): Any alignment to leadership is surface-level and not deeply explored. No in-depth consideration of leadership frameworks, leadership’s responsibilities, or the leader's role in transformation or agility.\n\n- Intent / Purpose Fit (2.510): The primary purpose is to explain methodologies and improvement in software development, not leadership practice. The intent does not centrally target leadership as defined for this category.\n\n- Audience Alignment (3.020): The audience seems to be general software professionals or managers interested in best practices for software quality and delivery. There is some overlap with a leadership audience, but it is not a primary match, skewing more practitioner or managerial than leadership-focused.\n\n- Signal-to-Noise Ratio (3.890): The content is mostly focused on high-level software processes and improvement. Virtually all of it is relevant to software development, but almost none is directly relevant to leadership practice or philosophy (per the definition). Therefore, a low signal for the leadership category.\n\nNo penalties applied: The content is current and neutral in tone. \n\nLevel: Tertiary—any relevance to leadership is tangential and only inferable, not central. The confidence score reflects that evidence for classification under 'Leadership' is highly limited.",
    "level": "Ignored"
  },
  "Scrum Master": {
    "resourceId": "Software Development",
    "category": "Scrum Master",
    "calculated_at": "2025-05-06T11:50:27",
    "ai_confidence": 14.37,
    "ai_mentions": 0.0,
    "ai_alignment": 2.2,
    "ai_depth": 2.4,
    "ai_intent": 3.3,
    "ai_audience": 3.7,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "This content on 'Software Development' covers general practices, frameworks, and principles applicable to software engineering. It references agile and related methodologies broadly but does not mention Scrum or the Scrum Master role, let alone discuss the Scrum Master accountability, responsibilities, or systemic impact – yielding a mentions score of 0.0. There is only a loose conceptual alignment (2.2) because processes like continuous improvement and empiricism are referenced, but not tied to Scrum or the Scrum Master specifically. The content's depth on these topics (2.4) remains superficial in regard to the specified category. The intent (3.3) is generally informative to those interested in software development, not Scrum Mastery, and the audience (3.7) is broad—software practitioners, rather than Scrum Masters or teams seeking clarity on that accountability. The signal-to-noise ratio (2.5) is low for this tag since most details are off-topic. No penalties are warranted, as the content isn't outdated or satirical, just irrelevant. Overall, the text provides tertiary, indirect linkage (if any) to the 'Scrum Master' category, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Agile Leadership": {
    "resourceId": "Software Development",
    "category": "Agile Leadership",
    "calculated_at": "2025-05-06T11:50:26",
    "ai_confidence": 36.633,
    "ai_mentions": 1.4,
    "ai_alignment": 3.5,
    "ai_depth": 3.7,
    "ai_intent": 2.8,
    "ai_audience": 4.0,
    "ai_signal": 4.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content mainly discusses general software development methodologies and practices, with some references to Agile as one of several approaches (e.g., 'including Agile, Lean, and DevOps'). However, there is no explicit or frequent mention of Agile Leadership as a unique concept, nor is focus put on the specific role, mindset, or responsibilities of leaders in Agile environments. \n\n1. Direct Mentions: 1.4 – 'Agile' is mentioned once in passing with other methodologies; 'Agile Leadership' is not referenced at all.\n2. Conceptual Alignment: 3.5 – There is some overlap in ideas such as collaboration, adaptability, and continuous improvement, but these are framed at the team or process level rather than from a leadership perspective.\n3. Depth of Discussion: 3.7 – The discussion addresses iterative processes and organizational culture at a surface level but lacks detailed exploration of leadership dynamics, empowerment, or transformational change from a leader's viewpoint.\n4. Intent / Purpose Fit: 2.8 – The purpose is to inform about software development in general, not Agile Leadership. Agile principles are a side reference, not the focus.\n5. Audience Alignment: 4.0 – While software practitioners and some leaders may benefit, the primary audience is broad (developers, engineers), not specifically leaders or executives in Agile contexts.\n6. Signal-to-Noise Ratio: 4.1 – The majority of the content is relevant to software development broadly, not specifically to Agile leadership; tangential relevance only.\n\nNo penalties applied as the content is not outdated, nor does it contradict Agile or Agile Leadership principles. \n\nOverall, the content only very weakly touches on themes of Agile Leadership, if at all. It is best classified as tertiary relevance: the connection is indirect and superficial.",
    "level": "Ignored"
  },
  "Project Management": {
    "resourceId": "Software Development",
    "category": "Project Management",
    "calculated_at": "2025-05-06T11:50:30",
    "ai_confidence": 46.518,
    "ai_mentions": 1.5,
    "ai_alignment": 5.8,
    "ai_depth": 6.2,
    "ai_intent": 5.7,
    "ai_audience": 5.1,
    "ai_signal": 7.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 47.0,
    "reasoning": "The content primarily discusses software development methodologies and practices (Agile, Lean, DevOps), with a focus on process improvement, automation, and software quality. Direct and frequent mentions of 'Project Management' or its key terms (scope, scheduling, risk, etc.) are absent, hence the low 'Direct Mentions' score (1.5). Conceptual alignment is moderate (5.8) because the content references some overlapping themes (collaboration, iterative development, evidence-based management), but these are discussed through a software engineering rather than a project management lens, and concepts like planning, risk, scope, or governance are not explicitly covered. Depth is slightly higher (6.2) as the piece does examine methodologies and lifecycle approaches, but it does so in the context of development, not explicitly project management. Intent (5.7) is neutral: the guidance is for improving software development, not managing projects holistically. The audience could include project managers but is more targeted at software teams and technical leaders (5.1). The signal-to-noise ratio is decent (7.0); the content stays focused, but most material is off-topic for 'Project Management' narrowly defined. No penalties were applied, as the information is current and not critical of project management methodology. The level is 'Secondary' because while there is some overlap in approaches (e.g. Agile), project management is not the content's main focus.",
    "level": "Tertiary"
  },
  "Estimation": {
    "resourceId": "Software Development",
    "category": "Estimation",
    "calculated_at": "2025-05-06T11:50:34",
    "ai_confidence": 7.16,
    "ai_mentions": 0.3,
    "ai_alignment": 0.6,
    "ai_depth": 0.4,
    "ai_intent": 0.5,
    "ai_audience": 1.2,
    "ai_signal": 1.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 7.0,
    "reasoning": "The content titled 'Software Development' provides a generic overview of techniques and methodologies for software engineering but does not directly discuss estimation in the Agile or Scrum context. \n\n- Direct Mentions (0.3): There are no explicit mentions of estimation, Agile estimation techniques, or related terminology. Only general concepts like agility and iterative development are present.\n- Conceptual Alignment (0.6): The content very loosely references themes such as adaptability, handling uncertainty, and informed decision-making, but these are not tied specifically to Agile estimation practices; they could apply broadly to many areas within software development.\n- Depth of Discussion (0.4): Estimation is not explored at all in the content. The exploration is quite superficial with respect to estimation; most content is about methodologies like Agile, Lean, and DevOps, and high-level benefits of software development.\n- Intent / Purpose Fit (0.5): The overall intent is to inform about software development as a field, not specifically to educate about estimation. Estimation is, at best, an implied subtopic under broad areas like planning and uncertainty.\n- Audience Alignment (1.2): The audience appears to be anyone interested in software development rather than practitioners focused on estimation in Agile or Scrum. There is modest alignment due to overlap with professionals who might also care about estimation, but it's not a primary focus.\n- Signal-to-Noise Ratio (1.0): Almost all the content is off-topic with respect to estimation; there is virtually no relevant 'signal' about the Estimation category, and most is tangential or general.\n\nNo penalties applied: The content is contemporary and does not undermine Agile principles. The final confidence score reflects the lack of substance and specificity regarding estimation, making this a clear 'Tertiary' association at best.",
    "level": "Ignored"
  },
  "Open Space Agile": {
    "resourceId": "Software Development",
    "category": "Open Space Agile",
    "calculated_at": "2025-05-06T11:50:22",
    "ai_confidence": 17.573,
    "ai_mentions": 0.3,
    "ai_alignment": 1.1,
    "ai_depth": 1.25,
    "ai_intent": 1.8,
    "ai_audience": 5.3,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content does not explicitly mention Open Space Agile or Open Space Technology at all, earning a near-zero score for Direct Mentions (0.300). Conceptually, while some Agile-adjacent practices are referenced (iterative development, collaboration, adaptability), the main themes are broad and generic, lacking any alignment to the unique principles of Open Space Agile—such as collective co-creation, shared ownership, emergence, or psychological safety as defined by the category. Therefore, Conceptual Alignment scores low (1.100).\n\nDepth of Discussion also warrants a low 1.250: the content makes no attempt to explore Open Space Agile, its case studies, principles, challenges, or relationship to complexity theory; discussion is entirely at the high-level practice and philosophy of general software development. The Intent score (1.800) reflects that while the primary objective is to inform about improving software engineering methods, it is not specifically intended to cover, support, or inform about Open Space Agile.\n\nThe Audience Alignment is slightly higher (5.300), since both software developers (the content's likely audience) and Open Space Agile practitioners often overlap, but the focus here is generic. Signal-to-Noise Ratio (3.500) reflects that much of the content is general and could apply loosely to Agile, but the lack of topic alignment lowers the score substantially.\n\nNo penalties are applied: the content is not outdated, nor does it contradict the Open Space Agile framing. Overall, though 'Agile' is named once, and some related values are implied, there is no substantive connection to Open Space Agile, making this content only tangentially (Tertiary) relevant, with a confidence score of 17.573.",
    "level": "Ignored"
  },
  "Professional Scrum": {
    "resourceId": "Software Development",
    "category": "Professional Scrum",
    "calculated_at": "2025-05-06T11:50:32",
    "ai_confidence": 46.336,
    "ai_mentions": 0.4,
    "ai_alignment": 3.8,
    "ai_depth": 3.2,
    "ai_intent": 3.4,
    "ai_audience": 5.2,
    "ai_signal": 7.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 46.0,
    "reasoning": "The content discusses general best practices in software development, referencing methodologies like Agile, Lean, and DevOps, and includes themes such as collaboration, iterative development, automation, continuous improvement, and evidence-based management. However, there is no direct mention of Scrum or Professional Scrum. Conceptual alignment is limited: while evidence-based management and value delivery are referenced, the content does not explicitly ground these topics in Professional Scrum's unique ethos, values, or role-based accountabilities. Depth of discussion around the philosophy, disciplined application, or distinguishing facets of Professional Scrum is shallow; the discourse remains broad and methodology-agnostic. Intent/purpose is centered on general software quality and sustaining competitive advantage rather than cultivating professionalism as defined in Professional Scrum. The likely audience is broad—spanning all software engineering practitioners—rather than specifically targeting Scrum practitioners or professionals seeking to elevate their Scrum practice. The signal-to-noise ratio is relatively high; the text is focused and avoids fluff but is tangential to the strict definition of Professional Scrum. No penalties are applied, as the content does not reference outdated practices or undermine the category. This content is thus 'Tertiary'—it is peripherally relevant but does not directly or deeply serve the 'Professional Scrum' category.",
    "level": "Tertiary"
  },
  "Product Owner": {
    "resourceId": "Software Development",
    "category": "Product Owner",
    "calculated_at": "2025-05-06T11:50:35",
    "ai_confidence": 18.35,
    "ai_mentions": 0.4,
    "ai_alignment": 1.65,
    "ai_depth": 1.85,
    "ai_intent": 2.05,
    "ai_audience": 2.65,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content provides a broad overview of software development methodologies, focusing on techniques such as Agile, Lean, and DevOps. However, it does not explicitly mention the Product Owner role or its accountability within Scrum or Agile. \n\n- Mentions: The term 'Product Owner' and related responsibilities do not appear in the content, resulting in a very low score for direct references (0.40).\n- Alignment: While there is an indirect reference to delivering value and cross-functional collaboration, this is in the context of general software delivery—not specific to the Product Owner's accountability, scoring low (1.65).\n- Depth: The article lacks any substantive exploration of the Product Owner or its specific duties, frameworks, or challenges; depth is minimal (1.85).\n- Intent/Purpose: The main purpose is to introduce methodologies and practices in software engineering broadly, not to inform about or support the Product Owner accountability (2.05).\n- Audience: The target audience is likely practitioners or managers involved in software development as a whole, not specifically Product Owners (2.65).\n- Signal: The majority of the content is broad and not focused on Product Owner accountability, so the signal-to-noise ratio is low for this category (2.10).\n\nNo penalty points were applied as the content is not outdated nor does it contradict the category, but it is only tangentially related to Product Owner accountability. This results in a low confidence and a tertiary relevance assignment.",
    "level": "Ignored"
  },
  "Site Reliability Engineering": {
    "resourceId": "Software Development",
    "category": "Site Reliability Engineering",
    "calculated_at": "2025-05-06T11:50:22",
    "ai_confidence": 19.433,
    "ai_mentions": 0.7,
    "ai_alignment": 2.8,
    "ai_depth": 2.4,
    "ai_intent": 2.2,
    "ai_audience": 5.2,
    "ai_signal": 4.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 19.0,
    "reasoning": "The content focuses on general software development methodologies and quality practices, not specifically on Site Reliability Engineering (SRE). There are no explicit or implicit references to SRE principles such as SLOs, SLIs, incident management, or reliability engineering. The only partial overlap is the mention of 'DevOps' and 'automation,' which are adjacent domains but are not discussed in the context of reliability or production systems. The depth and alignment with SRE are shallow, as the main themes center around improving software quality, team efficiency, and adaptability, rather than system reliability in production environments. The intended audience is broad and could include those tangentially interested in SRE, but it's more aligned with software engineering as a whole. Most of the content is relevant to its stated topic ('Software Development'), not SRE, so signal-to-noise is low for the SRE category. No penalties were applied as the content is neither outdated nor negative toward SRE. The confidence score accurately reflects a tertiary, tangential connection, justifying a low probability that this content truly belongs in the Site Reliability Engineering category.",
    "level": "Ignored"
  },
  "Technical Excellence": {
    "resourceId": "Software Development",
    "category": "Technical Excellence",
    "calculated_at": "2025-05-06T11:50:23",
    "ai_confidence": 61.12,
    "ai_mentions": 2.1,
    "ai_alignment": 6.7,
    "ai_depth": 6.2,
    "ai_intent": 7.4,
    "ai_audience": 7.7,
    "ai_signal": 6.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 61.0,
    "reasoning": "The content broadly discusses modern software engineering techniques and methodologies that aim for high-quality outcomes—such as Agile, DevOps, automation, and continuous improvement. This conceptually aligns with the spirit of Technical Excellence, as the text suggests automation, testing, integration, and systemic improvement are central. However, there are no explicit or frequent direct references to 'Technical Excellence' itself or the specific engineering practices named in the category definition (like TDD, CI/CD, modular architecture, or emergent design). The discussion addresses these topics in a high-level and generalized way rather than exploring their engineering-specific aspects in depth. The depth and alignment scores reflect that, as the focus is broad software quality rather than the discipline of Technical Excellence per se. The intent is clearly positive and relevant to the audience (technology practitioners, technical leaders, teams interested in improving delivery), which supports higher intent and audience scores. However, some of the content also touches on business benefits and management philosophies, lowering the signal-to-noise ratio. Since the material is current and there are no contradicting tones or outdated practices, no penalties were applied. The confidence score is weighted toward alignment and depth, resulting in a moderate overall score. The level is 'Secondary' because Technical Excellence is an important, but not the dominant, focus.",
    "level": "Secondary"
  },
  "Product Validation": {
    "resourceId": "Software Development",
    "category": "Product Validation",
    "calculated_at": "2025-05-06T11:50:25",
    "ai_confidence": 32.83,
    "ai_mentions": 1.6,
    "ai_alignment": 3.0,
    "ai_depth": 2.7,
    "ai_intent": 3.2,
    "ai_audience": 6.5,
    "ai_signal": 4.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 33.0,
    "reasoning": "The content is a general overview of software development methodologies and does not focus on, or directly discuss, product validation. \n\n- Mentions (1.6): There are no direct or explicit references to 'product validation', 'user testing', 'market fit', or the core terminology from the Product Validation category, except a tangential mention of 'evidence-based management'.\n- Alignment (3.0): The themes of iterative development, evidence-based management, and feedback are lightly adjacent to product validation, but not central or explicit. The main alignment is generic, not specific to testing product ideas with real users or validating market fit.\n- Depth (2.7): Discussion of concepts relevant to product validation is incidental—e.g., 'adapt to feedback', 'evidence-based management'—but not explored with depth or focus. The content remains at the high-level methodology layer.\n- Intent (3.2): The primary intent is to describe the holistic practice of software development, not the validation of product ideas or user engagement in validation practices.\n- Audience (6.5): The target audience (software engineers, process leaders, possibly executives) somewhat overlaps with those interested in product validation, but the primary focus is broader—on all of software development.\n- Signal (4.8): The majority of the content is relevant to software development but only marginally (not centrally) relevant to product validation, so the signal-to-noise ratio is moderate. \n\nNo penalties are applied as the content is neither outdated nor contradictory; it's simply not directly relevant. Accordingly, the level is 'Tertiary,' as Product Validation is a minor, indirect aspect in the broader context of the content.",
    "level": "Ignored"
  },
  "Experimentation": {
    "resourceId": "Software Development",
    "category": "Experimentation",
    "calculated_at": "2025-05-06T11:50:24",
    "ai_confidence": 20.747,
    "ai_mentions": 0.4,
    "ai_alignment": 2.5,
    "ai_depth": 2.3,
    "ai_intent": 2.6,
    "ai_audience": 7.0,
    "ai_signal": 6.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content broadly discusses techniques and methodologies in software development, such as Agile, Lean, and DevOps, but does not directly reference experimentation, hypothesis-driven approaches, or explicit testing of assumptions within Agile workflows. \n\nMentions (0.4): There are no explicit, direct references to 'experimentation'; the closest alignment is around continuous improvement and evidence-based management, but not in the specific sense required by the classification. \n\nConceptual Alignment (2.5): While the content mentions continuous improvement and evidence-based practices, it remains general and does not clearly address hypothesis formulation, systematic experimentation, or validation of assumptions. \n\nDepth (2.3): Experimental practices, learning from experiments, or integrating experiments with Agile ceremonies are not explored. Discussion remains on the process and benefits of software development methodologies in a broad sense. \n\nIntent (2.6): The main purpose is to inform about software development approaches, not specifically to discuss experimentation or its use in decision-making within Agile. Any connection is indirect and not central. \n\nAudience (7.0): The target audience (software practitioners, technical leaders) generally overlaps with those interested in experimentation within Agile, but the focus is not narrowed to those seeking insight on experimentation. \n\nSignal (6.0): The majority of the content is relevant to software development, but only a marginal portion touches on areas conceptually adjacent to experimentation (e.g., evidence-based management, continuous improvement). Most of the content remains off-topic with respect to the experimentation category. \n\nNo penalties were applied, as the content is recent and does not contradict or undermine the category. Overall, the content offers only a very distant connection to the strict definition of Experimentation, making it tertiary at best.",
    "level": "Ignored"
  },
  "Business Agility": {
    "resourceId": "Software Development",
    "category": "Business Agility",
    "calculated_at": "2025-05-06T11:50:28",
    "ai_confidence": 65.217,
    "ai_mentions": 2.6,
    "ai_alignment": 7.6,
    "ai_depth": 7.3,
    "ai_intent": 7.1,
    "ai_audience": 6.7,
    "ai_signal": 6.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 65.0,
    "reasoning": "The content primarily covers software development techniques and methodologies with references to Agile, Lean, and DevOps. It discusses iterative development, adaptability, continuous improvement, and responsiveness to change—principles aligned with business agility. However, 'Business Agility' as a term is not directly mentioned, and there is no explicit, focused discussion on organisational-wide business agility beyond the software development context. The depth is moderate, touching on relevant practices like automation and evidence-based management, but without deep alignment to organisational transformation or leadership topics typically central to business agility. The intent supports adaptability and innovation but within the narrow frame of software engineering rather than holistic business transformation. The audience is mainly practitioners and technical leads, not the broader executive or strategic audience usually targeted by business agility discourse. The content is largely relevant, but a portion addresses general software engineering best practices rather than the organisational agility theme—hence the signal-to-noise score. No penalties were applied, as the content is current and not contradictory. This places the classification at a solid secondary level for 'Business Agility': clearly related, providing supporting examples and concepts, but not the primary focus.",
    "level": "Secondary"
  },
  "Forecasting": {
    "resourceId": "Software Development",
    "category": "Forecasting",
    "calculated_at": "2025-05-06T11:50:27",
    "ai_confidence": 21.36,
    "ai_mentions": 0.8,
    "ai_alignment": 2.6,
    "ai_depth": 2.4,
    "ai_intent": 2.2,
    "ai_audience": 7.1,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "This content surveys best practices and methodologies within software development at a high level, with nods to Agile, Lean, and DevOps. However, it does not make direct or significant mention of forecasting or any explicit forecasting methods within Agile or Scrum. There is no reference to empirical data usage, delivery timeline prediction, risk management through forecasting, or specific forecasting artifacts (velocity, burn-down charts, etc.). The term 'predictably' appears once, but it is not synonymous with formal forecasting in the Agile/Scrum sense. Conceptual alignment is weak, as forecasting is at best implied and not substantiated or explored. The content serves a broad technical audience and is somewhat relevant to practitioners, giving it moderate scores in audience and signal, but offers little depth or direct engagement with the 'Forecasting' category. No penalties are applied, as the information is neither outdated nor contradictory. Therefore, 'Tertiary' level is appropriate, with a low final confidence reflecting its marginal relevance.",
    "level": "Ignored"
  },
  "Azure DevOps": {
    "resourceId": "Software Development",
    "category": "Azure DevOps",
    "calculated_at": "2025-05-06T11:50:30",
    "ai_confidence": 14.906,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.0,
    "ai_intent": 2.2,
    "ai_audience": 3.7,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content provides a general overview of software development methodologies and practices such as Agile, Lean, and DevOps. However, there are no explicit or implicit references to Azure DevOps itself, nor any mention of its services, tools, or best practices. \n\n- Mentions (0.2): There is no mention of Azure DevOps by name; 'DevOps' is used generically alongside Agile and Lean, so only a minimal score is warranted for even slight conceptual proximity.\n- Conceptual Alignment (1.3): The themes of the content (collaboration, iterative development, automation, testing, continuous improvement) overlap conceptually with what Azure DevOps facilitates, but these are presented generically, not specifically tied to Azure DevOps or even Microsoft's ecosystem.\n- Depth (1.0): The discussion remains on a high level, offering no details on any Azure DevOps functionalities, features, or best practices; depth relative to the category is extremely limited.\n- Intent (2.2): The intent is to inform about software development as a field, not Azure DevOps in particular. The content serves a broader purpose and does not align directly with the intent of the category.\n- Audience (3.7): The audience is general technical/software engineering practitioners. While this technically overlaps with Azure DevOps' target audience, there's no indication this is tailored at all to Azure DevOps users, so only a modest score is given.\n- Signal (2.0): Most of the content, while technical and relevant to software development, is off-topic for the category. There is some general relevance via mentioning DevOps, but not Azure DevOps directly.\n\nNo penalties are applied as there are no outdated practices or contradictory tone. The content is completely generic and, at best, tangential to the category, earning a Tertiary level.",
    "level": "Ignored"
  },
  "Working Agreements": {
    "resourceId": "Software Development",
    "category": "Working Agreements",
    "calculated_at": "2025-05-06T11:50:43",
    "ai_confidence": 28.636,
    "ai_mentions": 0.6,
    "ai_alignment": 2.5,
    "ai_depth": 2.3,
    "ai_intent": 2.9,
    "ai_audience": 7.5,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The content describes general principles, methodologies, and practices of software development (including Agile, Lean, and DevOps) focused on quality, adaptability, and team collaboration. However, it does not directly or implicitly reference working agreements, nor does it delve into the norms, guiding principles, or structured approaches that teams use to establish these agreements. There is a general mention of collaboration and culture, but this is framed within the context of broad software engineering practices rather than discussions specific to working agreements. Thus, 'Direct Mentions' is very low (0.6). 'Conceptual Alignment' (2.5) and 'Depth' (2.3) reflect the tangential relationship—team collaboration is mentioned, but without reference to the creation, implementation, or adaptation of working agreements. 'Intent' (2.9) relates to broader topics; it's not aimed at exploring the norms or rules of team interaction. 'Audience Alignment' (7.5) and 'Signal' (6.9) scores are higher, as the sort of practitioner reading about software development would also be relevant to working agreements, but most of the content is not focused on that area. No penalties are applied as the information is not outdated, nor does it undermine or contradict the core framing. The evaluation falls under 'Tertiary' because working agreements are not a central or even secondary focus—the fit is indirect at best.",
    "level": "Ignored"
  },
  "Entrepreneurship": {
    "resourceId": "Software Development",
    "category": "Entrepreneurship",
    "calculated_at": "2025-05-06T11:50:34",
    "ai_confidence": 17.882,
    "ai_mentions": 0.7,
    "ai_alignment": 2.6,
    "ai_depth": 2.9,
    "ai_intent": 2.3,
    "ai_audience": 4.8,
    "ai_signal": 4.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content primarily focuses on the practices and methodologies inherent to software engineering (e.g., Agile, Lean, DevOps) with an emphasis on process improvement, quality, and value delivery in software projects. There are no direct mentions of entrepreneurship, nor reference to entrepreneurial processes, risk-taking, or venture creation—the central tenets of the category. \n\n- Mentions (0.7): The term 'entrepreneurship' is not explicitly cited, and any references to innovation or value creation are within a software operations context, not entrepreneurial.\n- Alignment (2.6): While there are nods to 'innovation' and 'competitive advantage', the primary themes are not about founding or scaling businesses, risk management, or entrepreneurial ecosystems, but rather about engineering practices, so only minimal conceptual overlap exists.\n- Depth (2.9): The discussion is deep about software methodologies but does not develop entrepreneurial themes; 'innovation' is mentioned as promoting competitiveness, but not from a venture-creation or entrepreneurial mindset perspective.\n- Intent (2.3): The purpose is educational for software engineering improvement, not facilitating entrepreneurship; business strategy is referenced, but only in relation to improved delivery through software.\n- Audience (4.8): The audience is technical (engineers, software teams), distinct from the classic entrepreneurship audience, though there's some overlap in business contexts.\n- Signal (4.2): The content is focused on its stated topic, with very little tangential material, though only a small fraction is relevant to entrepreneurship, mostly through implication (innovation, value creation).\n\nNo penalty deductions were necessary as the content is up-to-date and does not undermine the topic. Overall, the confidence is low and at a 'Tertiary' level, indicating only incidental alignment through broad business-relevant concepts like 'innovation' or 'value creation', rather than substantive entrepreneurial discussion.",
    "level": "Ignored"
  },
  "Automated Testing": {
    "resourceId": "Software Development",
    "category": "Automated Testing",
    "calculated_at": "2025-05-06T11:50:38",
    "ai_confidence": 36.109,
    "ai_mentions": 2.8,
    "ai_alignment": 4.2,
    "ai_depth": 3.8,
    "ai_intent": 4.6,
    "ai_audience": 6.9,
    "ai_signal": 5.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 36.0,
    "reasoning": "The content provides a broad overview of software development methodologies like Agile, Lean, and DevOps, but only briefly mentions 'automation, testing, and integration' in one sentence. There is no explicit mention of 'Automated Testing' or associated key topics (e.g. types of automated tests, frameworks, tools, CI/CD strategies, or test suite maintenance). Therefore, the 'Direct Mentions' score is low (2.8), as automated testing is only implicitly referenced. \n\n'Conceptual Alignment' (4.2) is also relatively low: while the text mentions automation and testing as benefits of modern software practices, it does not center its discussion on automated testing's principles or methodologies. The 'Depth of Discussion' score (3.8) reflects the shallow treatment of automated testing—the theme is only referenced in passing, without exploration of process, impact, or specifics.\n\nThe 'Intent/Purpose Fit' score (4.6) captures that the purpose is to outline software development at large, not to inform about or elaborate on automated testing specifically; the relevance is indirect. \n\n'Audience Alignment' (6.9) is higher as the content addresses technical practitioners and organizations involved in contemporary software development, which overlaps with the automated testing audience. 'Signal-to-Noise' (5.1) is moderate; the text is generally on topic for software engineering, but only a small part pertains even indirectly to automated testing.\n\nNo penalties were applied, as the content is current, neutral in tone, and does not contradict the framing of automated testing. In summary, while there is an indirect thematic relation, automated testing is only alluded to, making the content a tertiary fit at best for the 'Automated Testing' category.",
    "level": "Ignored"
  },
  "Complexity Thinking": {
    "resourceId": "Software Development",
    "category": "Complexity Thinking",
    "calculated_at": "2025-05-06T11:50:24",
    "ai_confidence": 33.845,
    "ai_mentions": 1.2,
    "ai_alignment": 3.5,
    "ai_depth": 3.2,
    "ai_intent": 2.4,
    "ai_audience": 6.0,
    "ai_signal": 5.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 34.0,
    "reasoning": "The content provides a broad overview of software development methodology, emphasizing practices such as Agile, Lean, and DevOps, and highlighting adaptability, collaboration, and systemic perspectives. However, there is no explicit mention of 'Complexity Thinking,' its frameworks (e.g., the Cynefin Framework), or concepts such as emergence, self-organization, or non-linear dynamics. The discussion loosely references complexity in the context of 'navigating complexity and uncertainty,' but does not discuss complexity science principles directly or at depth.\n\n- Direct Mentions (1.2): There are no direct references to complexity thinking, frameworks, or terminology; the closest is the general term 'complexity and uncertainty' in decision-making, which is tangential and generic.\n- Conceptual Alignment (3.5): The themes of adaptability, systemic approaches, and navigating uncertainty resonate faintly with complexity thinking, but lack core alignment—no explicit models, theories, or language from complexity science are used.\n- Depth of Discussion (3.2): The content discusses systemic thinking and adaptability superficially, with no in-depth or explicit exploration of complexity science or its application.\n- Intent/Purpose Fit (2.4): While the content is informative for software practitioners and mentions uncertainty, the primary intent is about software engineering practices, not about the exploration of complexity theory or its application.\n- Audience Alignment (6.0): The audience (software professionals, technical leaders) could overlap with the target for complexity thinking, given that roles involved in Agile/DevOps may have interest in complexity sciences, though the content is more generally aimed.\n- Signal-to-Noise Ratio (5.5): Most content is relevant to software development and systemic improvement, with some overlap with complexity themes, but the focus is off-topic for the strict definition of 'Complexity Thinking.'\n\nNo penalties were applied, as the content is not outdated, nor does it contradict the spirit of complexity thinking, but it does not address the category directly. Overall, the confidence is low and the classification is tertiary, as the content may only be of minor incidental relevance to the category.",
    "level": "Ignored"
  },
  "Minimum Viable Product": {
    "resourceId": "Software Development",
    "category": "Minimum Viable Product",
    "calculated_at": "2025-05-06T11:50:30",
    "ai_confidence": 37.833,
    "ai_mentions": 0.4,
    "ai_alignment": 4.9,
    "ai_depth": 3.8,
    "ai_intent": 4.5,
    "ai_audience": 7.2,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "This content provides a high-level overview of software development methodologies, emphasizing practices like Agile, Lean, and DevOps. While these frameworks are closely related to the context in which Minimum Viable Product (MVP) is typically discussed, the content never directly mentions MVP, nor does it focus on MVP-specific strategies, definitions, or purposes. \n\n(1) Direct Mentions: MVP is never explicitly named or referenced. The closest relevance is the mention of Agile and Lean, both of which support MVP thinking, but the text does not link these to MVP directly (score: 0.400).\n\n(2) Conceptual Alignment: Some underlying principles (iterative development, responsiveness to change, evidence-based management) are relevant to MVP philosophy, but the main ideas are about broad software engineering practices, not the core MVP concepts of rapid hypothesis testing or minimal feature sets (score: 4.900).\n\n(3) Depth of Discussion: There is no depth on MVP topics. The content explores software lifecycle management, continuous improvement, and automation, but does not address MVP, its role, or case studies (score: 3.800).\n\n(4) Intent / Purpose Fit: The content aims to inform about modern software development, not about MVPs, so its intent only lightly aligns (score: 4.500).\n\n(5) Audience Alignment: The target audience (development professionals, technical leads, managers) overlaps with those interested in MVP methodology, hence the higher score here (score: 7.200).\n\n(6) Signal-to-Noise Ratio: The text is focused, but almost entirely about broader software development, not MVP (score: 6.700).\n\nNo penalties were applied as there are no outdated references or contradictory tones. Overall, the content is only tangentially relevant to 'Minimum Viable Product' and should be classified at a tertiary level.",
    "level": "Ignored"
  },
  "Hybrid Agile": {
    "resourceId": "Software Development",
    "category": "Hybrid Agile",
    "calculated_at": "2025-05-06T11:50:28",
    "ai_confidence": 10.23,
    "ai_mentions": 0.5,
    "ai_alignment": 1.1,
    "ai_depth": 0.9,
    "ai_intent": 0.7,
    "ai_audience": 3.0,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content provides a high-level overview of software development methodologies, mentioning Agile, Lean, and DevOps but without explicit or implicit reference to Hybrid Agile, its definition, challenges, or negative outcomes. There is no discussion of failed integrations or distinctions between agile and traditional practices, nor any critical examination of Hybrid Agile pitfalls. The content is generic, informative, and broadly targeted at practitioners or stakeholders seeking to understand core software development practices. All scores are very low: 'Mentions' is slightly above zero due to the inclusion of 'Agile' as a term, but 'Hybrid Agile' is never referenced. 'Alignment' and 'Depth' indicate little to no thematic match or exploration of the Hybrid Agile category. 'Intent' is unrelated, focusing on positive aspects of software development rather than the critique or analysis central to Hybrid Agile. 'Audience' and 'Signal' are marginally higher since the content is cleanly written and relevant to professionals, but in very general terms. No penalties are needed, as the material is current and not contradictory. The level is 'Tertiary', since Hybrid Agile is not a focus or even a side point in the content.",
    "level": "Ignored"
  },
  "Lean Thinking": {
    "resourceId": "Software Development",
    "category": "Lean Thinking",
    "calculated_at": "2025-05-06T11:50:27",
    "ai_confidence": 55.424,
    "ai_mentions": 3.1,
    "ai_alignment": 6.6,
    "ai_depth": 6.3,
    "ai_intent": 6.1,
    "ai_audience": 6.4,
    "ai_signal": 6.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 55.0,
    "reasoning": "The content discusses software development methodologies that encompass Agile, Lean, and DevOps but does so at a broad and conceptual level. \n\nMentions (3.1): 'Lean' is named explicitly only once, in a list with Agile and DevOps, with no further specific references to Lean Thinking or its key principles, concepts, tools, or practices. \n\nAlignment (6.6): The conceptual alignment is partial. The content acknowledges Lean as part of software development practices but focuses more on the broader benefits (collaboration, efficiency, value) rather than detailing Lean’s unique lens (eliminating waste, value stream mapping, etc.). The reference to 'continuous improvement' echoes Lean but lacks specificity around Lean's Kaizen, Waste Identification, etc. \n\nDepth (6.3): The discussion is not deep regarding Lean; it alludes to Lean principles within a more general context of best practices for high-quality software but provides no examples of Lean tools (e.g., 5S, Kanban, Value Stream Mapping) or deep dives into Lean culture/leadership. \n\nIntent (6.1): The intent is to inform about effective software engineering approaches, with Lean acknowledged as one methodology. Lean Thinking is not the central purpose or focus, but its inclusion is supportive and positive (i.e., not critical or tangential). \n\nAudience (6.4): The audience is broadly aligned: IT professionals, practitioners, and possibly leaders interested in software process improvement, which include those who may seek Lean Thinking discourse, but it's not targeted strictly at Lean practitioners. \n\nSignal-to-Noise (6.7): The majority of the content is relevant to process improvement and efficiency—values that intersect with Lean. However, there is generic material about software development that dilutes the Lean-specific signal.\n\nNo penalties were applied, as the information is neither outdated nor satirical/critical of Lean.\n\nOverall, the reference to Lean Thinking is secondary and supportive rather than primary. The content may introduce someone to Lean in software development but lacks detailed exploration or operationalization of the Lean Thinking category, leading to a mid-range confidence score.",
    "level": "Tertiary"
  },
  "Product Discovery": {
    "resourceId": "Software Development",
    "category": "Product Discovery",
    "calculated_at": "2025-05-06T11:50:29",
    "ai_confidence": 23.1,
    "ai_mentions": 1.5,
    "ai_alignment": 3.8,
    "ai_depth": 2.2,
    "ai_intent": 3.3,
    "ai_audience": 6.1,
    "ai_signal": 5.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 23.0,
    "reasoning": "The content is a broad overview of software development practices and methodologies, emphasizing quality, iterative development, automation, and cross-functional collaboration. \n\n1. Mentions (1.5): The term 'Product Discovery' is not mentioned at all. References to related concepts (user feedback, adapting to needs) are indirect; therefore, a minimal score is assigned.\n2. Alignment (3.8): The text tangentially references concepts adjacent to Product Discovery (user needs, responding to change, collaboration). However, core practices—such as customer interviews, prototyping, feature validation—are absent. The focus remains on delivery and general software quality rather than discovery methodologies.\n3. Depth (2.2): The discussion is high-level and surface-level regarding Product Discovery. It explores broad frameworks like Agile and Lean but not their application in the context of discovering product value or specific user research activities.\n4. Intent (3.3): The intent centers on overall improvement and value delivery in software development, not specifically on exploring or validating product features or needs. The purpose overlaps weakly with Product Discovery, mainly through continuous improvement and adaptability.\n5. Audience (6.1): The audience is practitioners and perhaps engineering leaders, overlapping partially with the Product Discovery audience (product managers, strategists, UX researchers). The technical tilt pulls it away from pure discovery roles, so a mid-to-high score is given.\n6. Signal (5.0): While the content is focused and relevant to software development, only a portion is incidentally relevant to Product Discovery. No distracting tangents, but the signal for Discovery is weak overall.\n\nNo penalties applied: There is no evidence of outdated practices or contradictory tone. \n\nIn conclusion, the content is thirdarily relevant—its broad principles enable discovery, but it lacks actionable or conceptual focus on Product Discovery methods, resulting in a low confidence score.",
    "level": "Ignored"
  },
  "Deployment Strategies": {
    "resourceId": "Software Development",
    "category": "Deployment Strategies",
    "calculated_at": "2025-05-06T11:50:25",
    "ai_confidence": 20.66,
    "ai_mentions": 0.7,
    "ai_alignment": 2.3,
    "ai_depth": 2.1,
    "ai_intent": 2.0,
    "ai_audience": 6.2,
    "ai_signal": 3.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 21.0,
    "reasoning": "The content is a broad overview of software development methodologies, describing general concepts like Agile, Lean, DevOps, automation, and testing. It does not directly mention or discuss deployment strategies such as Blue-Green Deployments, Canary Releases, Feature Toggles, or Rolling Updates. \n\n- **Mentions (0.7):** There are no explicit references to deployment strategies or named approaches; deployment is only vaguely implied by mention of 'frequent releases.'\n- **Conceptual Alignment (2.3):** Some tangential alignment is present through the mention of DevOps, automation, integration, and frequent releases, which all relate to continuous delivery/deployment in principle, but are not explored as deployment strategies.\n- **Depth (2.1):** The discussion stays at a high level, not delving into any deployment methodologies or actionable strategies specifically.\n- **Intent (2.0):** The content aims for a general overview of software engineering and quality, not deployment-specific insights, which is misaligned with the classification’s focus.\n- **Audience (6.2):** The audience includes both technical practitioners and those interested in software process; this moderately overlaps with the target audience for deployment strategies, but is broader and less focused.\n- **Signal-to-Noise Ratio (3.4):** Most content is on general software practices and philosophy, with little direct relevance to deployment; the signal for the category is weak.\n\nNo penalties are warranted: the material is not outdated nor does it contradict the category. Final confidence (20.66) correctly reflects a weak, largely tangential fit and is well within tertiary level.",
    "level": "Ignored"
  },
  "Azure Boards": {
    "resourceId": "Software Development",
    "category": "Azure Boards",
    "calculated_at": "2025-05-06T11:50:26",
    "ai_confidence": 18.424,
    "ai_mentions": 0.6,
    "ai_alignment": 1.3,
    "ai_depth": 1.7,
    "ai_intent": 2.2,
    "ai_audience": 4.8,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "Direct Mentions (0.6): The content makes no explicit reference to Azure Boards, or any work item tracking tools. Its only possible connection is the mention of 'Agile' and 'DevOps', but Azure Boards is not named or referenced even indirectly. Conceptual Alignment (1.3): The main ideas broadly discuss Agile and related methodologies within software development. There is a mild peripheral conceptual alignment through the references to iterative development and Agile, but no focus on or explicit alignment with Azure Boards as a tool. Depth (1.7): At best, the content describes broad methodologies and benefits of software development practices. There is no discussion of Azure Boards' features, work items, customization, or usage scenarios; depth is minimal with respect to the category. Intent / Purpose Fit (2.2): The intent is general education on software engineering practices. While Agile methodology is mentioned, there is no attempt to inform or discuss best practices specific to Azure Boards, so fit is weak. Audience Alignment (4.8): The content does target those involved in software development—including practitioners familiar with Agile, DevOps, and related tools—so there's some audience overlap, but it's not specific to Azure Boards-focused users. Signal-to-Noise (5.9): The content is focused on high-level software development methodology, with little noise or irrelevant content. However, virtually none of the content is directly relevant to Azure Boards; hence, the low overall score. No penalties were applied since the content is not outdated, off-tone, or inaccurate—it's simply highly generic and only tangentially related to the target category if at all. This results in a very low overall confidence, correctly mapped to 'Tertiary' as any relevance is indirect and non-specific.",
    "level": "Ignored"
  },
  "Value Delivery": {
    "resourceId": "Software Development",
    "category": "Value Delivery",
    "calculated_at": "2025-05-06T11:50:32",
    "ai_confidence": 81.81,
    "ai_mentions": 6.8,
    "ai_alignment": 8.7,
    "ai_depth": 8.9,
    "ai_intent": 8.4,
    "ai_audience": 8.1,
    "ai_signal": 7.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 82.0,
    "reasoning": "The content discusses software development broadly, with considerable focus on practices and methodologies—such as Agile, Lean, and DevOps—that directly relate to value delivery. The content specifically references iterative development, automation, testing, integration, cross-functional collaboration, and evidence-based management, all of which are tightly aligned with Value Delivery as defined. However, the main theme is 'Software Development' rather than 'Value Delivery' itself, making the category a strong secondary focus. \n\nDirect Mentions (6.8): The phrase 'deliver value' is present, and value-related concepts are referenced, but 'Value Delivery' is not a recurring explicit theme. \n\nConceptual Alignment (8.7): The text aligns well with the core meaning as it describes how methodologies (Agile, Lean, DevOps) contribute to delivering value iteratively to customers, covering satisfaction, adaptability, and business objectives.\n\nDepth of Discussion (8.9): The explanation extends beyond superficial mentions, referencing practices, culture, iterative approach, and multiple frameworks. However, it's not exclusively or deeply a Value Delivery treatise.\n\nIntent / Purpose Fit (8.4): The intent is aligned, focusing on meeting user needs and business goals through practices that facilitate value delivery, but it also encompasses the broader topic of software engineering excellence.\n\nAudience Alignment (8.1): Written for professionals involved in or overseeing software development (practitioners, strategists, technical leads), matching the likely Value Delivery audience, though with broader inclusion.\n\nSignal-to-Noise Ratio (7.9): Most of the content is on-topic, but there is some broad context (e.g., innovation, competitiveness, software quality) that is not directly value-delivery-specific.\n\nNo penalties were warranted—the content is recent and supportive of value-centric philosophies. The final result appropriately reflects a strong but secondary relationship to the Value Delivery category.",
    "level": "Primary"
  },
  "Revenue per Employee": {
    "resourceId": "Software Development",
    "category": "Revenue per Employee",
    "calculated_at": "2025-05-06T11:50:25",
    "ai_confidence": 9.183,
    "ai_mentions": 0.2,
    "ai_alignment": 1.2,
    "ai_depth": 1.1,
    "ai_intent": 1.0,
    "ai_audience": 3.1,
    "ai_signal": 2.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 9.0,
    "reasoning": "The content discusses software development methodologies (Agile, Lean, DevOps) in the context of organisational effectiveness and value delivery, but it makes no explicit or implicit reference to the 'Revenue per Employee' metric, nor does it discuss financial metrics, workforce efficiency measurement, or empirical analysis of organisational performance using data. The audience is generally practitioners and strategists in tech, which slightly overlaps with the relevant audience, but the focus is not on financial observability. There are no direct mentions (score: 0.2), the alignment is minimal as workforce efficiency is referenced only in general (score: 1.2), and depth is similarly lacking (score: 1.1). Intent and purpose do not align (score: 1.0), audience is higher (score: 3.1) because organisational topics are discussed, signal is low (score: 2.4) due to the lack of metric focus. No penalties are applied as the content is current and respectful. The overall confidence score is very low, indicating a tertiary or barely-relevant fit, largely because there is no metric-based or empirical discussion even near 'Revenue per Employee'.",
    "level": "Ignored"
  },
  "Sociotechnical Systems": {
    "resourceId": "Software Development",
    "category": "Sociotechnical Systems",
    "calculated_at": "2025-05-06T11:50:25",
    "ai_confidence": 59.248,
    "ai_mentions": 2.1,
    "ai_alignment": 7.8,
    "ai_depth": 6.7,
    "ai_intent": 7.2,
    "ai_audience": 8.5,
    "ai_signal": 8.4,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 59.0,
    "reasoning": "The content introduces software development as a discipline and provides a broad description of methods (Agile, Lean, DevOps) and high-level benefits, such as fostering collaboration, adaptability, and continuous improvement. \n\n- Mentions (2.1): There are no direct mentions of 'Sociotechnical Systems', nor explicit references to frameworks or classic theories. The focus is on software development as a whole, not on sociotechnical systems by name or explicit citation.\n- Alignment (7.8): The content aligns conceptually in parts; it describes the importance of collaboration, team adaptability, and organizational impact, which are central to sociotechnical thinking. However, the discussion is general and does not specifically emphasize the interplay between organizational (social) and technical aspects as the focal point.\n- Depth (6.7): Discussion is moderately deep regarding software development practices and organizational benefits but stays generic, lacking specific analysis of sociotechnical interactions (e.g., how org structure or culture intertwines with technical practices).\n- Intent (7.2): The intent is informative and partially aligned; it aims to educate about software development in a way that touches on aspects relevant to sociotechnical systems, but it's not dedicated to that perspective.\n- Audience (8.5): The intended audience seems to be both practitioners and organizational leaders, overlapping with the audience for sociotechnical discussions.\n- Signal (8.4): The content is mostly focused and relevant when considering modern software engineering, without significant off-topic or filler segments, but only partially overlaps with the sociotechnical category's strict remit.\n\nNo penalties were triggered: the material is up-to-date, not critical or satirical, and does not actively undermine the sociotechnical framing. There is a secondary fit because, while there is conceptual alignment with sociotechnical concerns through emphasis on collaboration, adaptability, and organizational value, it is generic and not focused on the interaction between social and technical systems as the primary topic.",
    "level": "Tertiary"
  },
  "Agile Planning Tools": {
    "resourceId": "Software Development",
    "category": "Agile Planning Tools",
    "calculated_at": "2025-05-06T11:50:28",
    "ai_confidence": 19.968,
    "ai_mentions": 0.5,
    "ai_alignment": 2.8,
    "ai_depth": 1.9,
    "ai_intent": 2.6,
    "ai_audience": 5.2,
    "ai_signal": 3.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 20.0,
    "reasoning": "The content provides a broad overview of software development techniques and methodologies, referencing Agile, Lean, and DevOps in passing, but it does not focus on Agile Planning Tools. \n\n- **Mentions (0.5):** The term 'Agile' is mentioned once along with Lean and DevOps, purely as examples of methodologies; there is no explicit or repeated reference to Agile Planning Tools or any of their features, use cases, or examples (such as Jira or backlog management).\n- **Conceptual Alignment (2.8):** While the content generally aligns with the spirit of improving collaboration and adaptability (values of Agile), it does not specifically address the use or role of planning tools within Agile frameworks.\n- **Depth (1.9):** There is minimal depth regarding planning tools—nothing is discussed about backlog management, sprint planning, or tool integration. The discussion is high-level and generic.\n- **Intent (2.6):** The main purpose is to inform about software development as a practice, not to provide actionable or insightful information about Agile Planning Tools.\n- **Audience (5.2):** The target audience appears to be broad—anyone interested in software development methodologies, not specifically Agile practitioners or those seeking tool guidance.\n- **Signal (3.3):** Only a small portion of the content is tangentially relevant—the word 'Agile' is there, but there is significant noise related to other development practices and high-level concepts.\n\nPenalties were not applied as the content is not outdated, satirical, or contradicting the category; it simply is not relevant beyond superficial mention. Overall, the confidence is very low, as the content is at best tertiary to the 'Agile Planning Tools' category.",
    "level": "Ignored"
  },
  "Backlog Refinement": {
    "resourceId": "Software Development",
    "category": "Backlog Refinement",
    "calculated_at": "2025-05-06T11:50:25",
    "ai_confidence": 13.92,
    "ai_mentions": 0.4,
    "ai_alignment": 1.9,
    "ai_depth": 1.3,
    "ai_intent": 1.8,
    "ai_audience": 3.5,
    "ai_signal": 2.1,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content broadly covers software development methodologies, mentioning Agile, Lean, and DevOps within the context of best practices for producing high-quality software. However, it never directly mentions backlog refinement, nor does it describe any techniques, processes, or tools specific to backlog refinement as delineated in the classification definition. There is mild conceptual alignment insofar as it briefly references Agile practices, but it remains very generalized and non-specific—focusing on iterative development, automation, and continuous improvement without delving into backlog refinement or associated activities (like user story writing, prioritization, or team collaboration on the backlog).\n\nScores: \n- Mentions (0.4): No specific or direct mentions of 'Backlog Refinement'; only passing reference to Agile, resulting in a near-zero score.\n- Alignment (1.9): Only tangentially aligned, as backlog refinement is an Agile practice, but the category’s main concepts are not present.\n- Depth (1.3): Does not discuss backlog refinement at any level of detail; discussion remains surface-level on software processes.\n- Intent (1.8): The broad purpose is informational about software engineering, not specifically about backlog refinement.\n- Audience (3.5): Target audience is very broad (software professionals and organizations at large), which would encompass those interested in backlog refinement, but not target them specifically.\n- Signal (2.1): Most content is general about software development; little is specifically relevant to backlog refinement, and there is considerable off-topic breadth for this category.\n\nNo penalties for outdatedness or negative tone. Since backlog refinement is at best a tertiary theme, confidence is very low.",
    "level": "Ignored"
  },
  "Definition of Done": {
    "resourceId": "Software Development",
    "category": "Definition of Done",
    "calculated_at": "2025-05-06T11:50:26",
    "ai_confidence": 14.61,
    "ai_mentions": 0.3,
    "ai_alignment": 1.9,
    "ai_depth": 2.4,
    "ai_intent": 1.2,
    "ai_audience": 2.3,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content is a broad overview of software development methodologies and principles. There are no direct mentions of the 'Definition of Done'; neither the term nor its specific criteria appear in the text, meriting a very low score for Direct Mentions (0.3). Conceptual Alignment is limited: while the text acknowledges the importance of quality, testing, and collaboration (themes adjacent to DoD), it never addresses or frames these within the core context of the doD—thus a low score (1.9). The Depth of Discussion (2.4) is still marginally higher as the content touches lightly on practices like testing and integration but lacks any exploration or structured treatment of the Definition of Done itself. The Intent/Purpose (1.2) is not focused on DoD; its main aim is general education about high-level development processes. Audience Alignment (2.3) is scored low because the description targets a broader, perhaps managerial or foundational audience, not specifically Agile practitioners concerned with DoD. Signal-to-Noise (2.5) is similarly limited: the content is almost entirely general and only minutely relevant to DoD, with scant overlap. No penalties were applied, as there is no outdated information or adverse tone detected. The final confidence score (14.61) reflects a tertiary—and extremely weak—connection to the Definition of Done, suitable only for the most peripheral mapping.",
    "level": "Ignored"
  },
  "Team Motivation": {
    "resourceId": "Software Development",
    "category": "Team Motivation",
    "calculated_at": "2025-05-06T11:50:45",
    "ai_confidence": 30.98,
    "ai_mentions": 1.4,
    "ai_alignment": 3.3,
    "ai_depth": 3.7,
    "ai_intent": 2.8,
    "ai_audience": 4.9,
    "ai_signal": 4.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 31.0,
    "reasoning": "The provided content discusses 'Software Development' in broad terms, focusing on best practices, methodologies, and frameworks such as Agile, Lean, and DevOps. While it occasionally references aspects that can relate to team dynamics (e.g., collaboration, knowledge sharing, adaptability, fostering a culture of improvement), it stops short of directly addressing the core concepts outlined in the Team Motivation category. \n\n- Mentions: The content never names 'motivation,' 'engagement,' or related terms explicitly. Team dynamics are referenced indirectly (collaboration, culture), warranting a low score (1.4).\n- Alignment: Only superficial alignment; the themes revolve more around software engineering excellence than the psychological or social motivators of agile teams (3.3).\n- Depth: Mild references to cross-functional collaboration and culture, but no in-depth exploration of motivation, trust, recognition, etc. (3.7).\n- Intent: The primary intent is informative about software development best practices, not focused on motivation or team psychology (2.8).\n- Audience: The content targets a broad software engineering audience, not specifically team leaders or coaches concerned with motivation, but is not entirely misaligned (4.9).\n- Signal: The text remains relevant to team practices in a minimal sense, but most of the content is off-topic for strict 'Team Motivation' (4.0). \n\nNo penalties were applied, as the content is not outdated and does not contradict the category. The confidence score calculation accurately reflects a tertiary, low-confidence fit: while there are glancing connections (collaboration, culture), the content neither explicitly nor substantially addresses core motivational theories, practices, or agile team dynamics.",
    "level": "Ignored"
  },
  "Personal": {
    "resourceId": "Software Development",
    "category": "Personal",
    "calculated_at": "2025-05-06T11:50:29",
    "ai_confidence": 13.553,
    "ai_mentions": 0.6,
    "ai_alignment": 1.9,
    "ai_depth": 1.5,
    "ai_intent": 2.2,
    "ai_audience": 3.1,
    "ai_signal": 3.7,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content is a general overview of Software Development, focusing heavily on technical methodologies, best practices, and systemic approaches. There are no explicit or implicit personal anecdotes, reflections, or individual insights—only abstract descriptions of techniques like Agile, Lean, and DevOps. Mentions of 'evidence-based management' and 'cross-functional collaboration' remain at a conceptual, organizational level without personal context. \n\n- Direct Mentions (0.6): The term 'personal' is not referenced, nor are there subjective experiences or reflections.\n- Conceptual Alignment (1.9): The content does not align with the 'Personal' category—it's oriented toward general methodologies rather than unique viewpoints.\n- Depth of Discussion (1.5): Discussions are broad and systemic, lacking depth on personal experience or subjective interpretation.\n- Intent (2.2): The main purpose is educational and organizational, not personal storytelling or self-reflection.\n- Audience Alignment (3.1): The target is likely professionals and organizations wanting to understand best practices, not individuals seeking or sharing personal stories, though practitioners may read it.\n- Signal-to-Noise (3.7): Content is focused, but the signal is about frameworks and practice—not about personal engagement, so much of it is off-topic for the 'Personal' category.\n\nNo penalties were applied, as the tone is neutral and there are no outdated references. The overall confidence reflects the lack of both explicit and implied personal content, making this a tertiary fit at best.",
    "level": "Ignored"
  },
  "Modern Source Control": {
    "resourceId": "Software Development",
    "category": "Modern Source Control",
    "calculated_at": "2025-05-06T11:50:43",
    "ai_confidence": 14.65,
    "ai_mentions": 0.25,
    "ai_alignment": 1.05,
    "ai_depth": 0.9,
    "ai_intent": 1.1,
    "ai_audience": 4.0,
    "ai_signal": 2.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 15.0,
    "reasoning": "The content is a broad overview of software development methodologies and approaches. There are no direct mentions of modern source control or related systems (Git, Mercurial, branching strategies, commit practices, code review, etc.), hence the mentions score is extremely low (0.25). Conceptual alignment is also very weak at 1.05, as the main ideas concern software engineering practices at large rather than version control. The depth is shallow (0.90); while concepts like DevOps and integration are referenced, there’s no substantive exploration of any source control techniques or strategies. The intent of the article is general information about software development, not source control (1.10). Audience fit is moderate (4.00), as technical practitioners might read this, but the content is too general for those specifically interested in source control practices. The signal-to-noise is low (2.50), as nearly all content is off-topic for the 'Modern Source Control' category. No outdated information or contradictory tone is present, so no penalties are applied. Overall, this resource only minimally touchpoints on adjacent themes but does not cover the classification’s required focus areas.",
    "level": "Ignored"
  },
  "Working Software": {
    "resourceId": "Software Development",
    "category": "Working Software",
    "calculated_at": "2025-05-06T11:50:27",
    "ai_confidence": 42.83,
    "ai_mentions": 1.2,
    "ai_alignment": 4.4,
    "ai_depth": 4.9,
    "ai_intent": 4.5,
    "ai_audience": 6.3,
    "ai_signal": 6.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 43.0,
    "reasoning": "The content discusses software development in general, referencing methodologies (Agile, Lean, DevOps) and practices such as iterative development, automation, and frequent releases. However, it never directly mentions 'Working Software' as an artifact or output; all references are conceptual and process-focused. \n\n1. Direct Mentions (1.2): There are no explicit mentions of 'working software.' There are allusions to 'high-quality software,' 'meeting user needs,' and 'frequent releases,' but these are indirect. \n2. Conceptual Alignment (4.4): The content partially aligns with the category by discussing value delivery, iterative cycles, and customer satisfaction, which are relevant to working software. Nonetheless, it frames these within development methodologies and practices, not as a discrete artifact or deliverable. \n3. Depth of Discussion (4.9): The discussion is moderately substantial about practices leading to high-quality deliverables and value. However, it focuses more on the software development process than on the detailed attributes or lifecycle of working software as such. \n4. Intent / Purpose Fit (4.5): The main purpose is informative about overarching practices in software engineering, not specifically about 'working software.' Its focus is wider, making its purpose slightly tangential for this category. \n5. Audience Alignment (6.3): The description suits technical practitioners interested in modern development. This overlaps with an audience interested in working software but is broader, also including non-Agile-specific and managerial readers. \n6. Signal-to-Noise Ratio (6.6): Most of the content is relevant to effective development practices (signal); however, relevance to 'working software' as a concept is less direct, and some sections address systemic/organizational advantages (noise).\n\nPenalties are not applied: the content is current, neutral, and does not undermine the category definition.\n\nOverall, while the source touches on related activities and outcomes, it lacks the explicitness, focus, and artifact-centered discussion required for high confidence that it fits the 'Working Software' category. Its coverage is general and indirect, assigning it a Tertiary level.",
    "level": "Tertiary"
  },
  "Organisational Culture": {
    "resourceId": "Software Development",
    "category": "Organisational Culture",
    "calculated_at": "2025-05-06T11:50:28",
    "ai_confidence": 52.83,
    "ai_mentions": 3.1,
    "ai_alignment": 5.8,
    "ai_depth": 5.6,
    "ai_intent": 3.6,
    "ai_audience": 6.2,
    "ai_signal": 6.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content primarily focuses on practices, methodologies, and the systematic approach to software development, with surface-level references to culture. The phrase 'fostering a culture of continuous improvement and responsiveness to change' is the only explicit cultural mention, though it's not deeply explored. Most of the text emphasizes workflow improvements (e.g., automation, testing, iterative development), team collaboration, and the pursuit of high-quality outcomes, which are generally aligned with good organisational culture but are not discussed through a cultural lens.\n\nMentions (3.1): The category 'organisational culture' is not directly named or frequently referenced—only a single mention to 'culture of continuous improvement' is present, and it's embedded rather than foregrounded.\n\nConceptual Alignment (5.8): The main ideas—collaboration, continuous improvement, adaptability—are partially aligned with organisational culture but are discussed more as process benefits than as cultural traits. The piece doesn't specifically analyze how culture enables or hinders these outcomes.\n\nDepth (5.6): Discussion of culture is shallow, referenced briefly without substantial examination of leadership, values, norms, or change strategies. Most depth is around technical or process best practices.\n\nIntent (3.6): The purpose is to inform about software development broadly, not to explore or promote organisational culture explicitly. Culture is incidental rather than intentional.\n\nAudience (6.2): The audience includes those concerned with high-level software engineering (practitioners, managers), which overlaps with the category's intended audience, but it's not specifically focused on cultural leaders or strategists.\n\nSignal-to-Noise (6.3): The content is focused on software development quality and methodologies, so it is on-topic for engineering but only tangentially relevant to organisational culture, which makes for moderate signal from the culture category perspective.\n\nNo penalties were needed, as the content is contemporary, constructive, and not contradictory to the category definition. Overall, cultural aspects are present but ancillary, making this a tertiary fit for the 'Organisational Culture' category.",
    "level": "Tertiary"
  },
  "Kanban": {
    "resourceId": "Software Development",
    "category": "Kanban",
    "calculated_at": "2025-05-06T11:50:28",
    "ai_confidence": 13.7,
    "ai_mentions": 0.8,
    "ai_alignment": 1.5,
    "ai_depth": 1.2,
    "ai_intent": 2.0,
    "ai_audience": 3.5,
    "ai_signal": 2.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 14.0,
    "reasoning": "The content provides a very high-level overview of software development methodologies but does not directly mention Kanban at all — hence the very low 'Direct Mentions' score (0.8). There are broad references to Agile and Lean, and to concepts like continuous improvement and iterative development, which are compatible with Kanban but not specific to it, resulting in a low 'Conceptual Alignment' (1.5). There are no detailed discussions about Kanban’s core principles: no mention of visualization, WIP limits, managing flow, or Kanban-specific metrics, so the 'Depth of Discussion' is extremely thin (1.2). The 'Intent' of the content is general (2.0)—it's about the broad landscape of software methodologies, not Kanban specifically. The 'Audience Alignment' is slightly higher (3.5) because the general software development audience could overlap with the Kanban audience, but the focus is not clear enough. The 'Signal-to-Noise Ratio' is low (2.2) because almost all the content is focused on general software practices without any Kanban-specific relevance. No penalties were applied because the content is not outdated, incorrect, or satirical. The level is 'Tertiary' because Kanban is at best a distant tangential implication, not a focus. Overall, the evidence for Kanban is extremely weak.",
    "level": "Ignored"
  },
  "Agnostic Agile": {
    "resourceId": "Software Development",
    "category": "Agnostic Agile",
    "calculated_at": "2025-05-06T11:50:29",
    "ai_confidence": 24.103,
    "ai_mentions": 0.3,
    "ai_alignment": 2.2,
    "ai_depth": 2.9,
    "ai_intent": 2.6,
    "ai_audience": 3.7,
    "ai_signal": 3.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 24.0,
    "reasoning": "The content provides a general overview of software development techniques, referencing Agile, Lean, and DevOps as part of broader best practices but never mentioning Agnostic Agile directly or indirectly. There is no explicit discussion of the principles, ethos, or unique approaches of Agnostic Agile. Conceptual alignment is weak; while the content touches on adaptability and value delivery, it lacks the specific context-driven, ethical, and principle-based focus central to Agnostic Agile. Depth is shallow with respect to the category, as frameworks are merely mentioned without any analysis or comparison. The intent is to inform about broad software development methodologies rather than advocate or elaborate on Agnostic Agile—thus, the fit is tangential at best. The audience is technical and overlaps somewhat with Agnostic Agile practitioners, but the signal-to-noise ratio shows much of the content is not targeted to the movement. No relevant penalties are applied because there is no outdated material or contradictory tone. Overall, the content barely fits as tertiary; it may be discoverable by those interested in a wide range of agile ideas but is not specifically or intentionally related.",
    "level": "Ignored"
  },
  "Sensemaking": {
    "resourceId": "Software Development",
    "category": "Sensemaking",
    "calculated_at": "2025-05-06T11:50:32",
    "ai_confidence": 42.19,
    "ai_mentions": 1.8,
    "ai_alignment": 4.4,
    "ai_depth": 4.1,
    "ai_intent": 4.7,
    "ai_audience": 7.3,
    "ai_signal": 7.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 42.0,
    "reasoning": "Direct Mentions: The content does not mention 'sensemaking' by name, nor does it reference any frameworks like Cynefin. There is a brief reference to 'navigating complexity and uncertainty' and to 'informed decision-making,' which are only loosely related. (1.8)\n\nConceptual Alignment: The main focus is on software engineering techniques rather than on sensemaking itself. There are slight touches on managing complexity and adapting to change (common in sensemaking), but those are incidental and in service of software development goals, not primary explorations of sensemaking or its principles. (4.4)\n\nDepth of Discussion: Discussion of complexity, uncertainty, or interpretation processes is only surface-level. There are no in-depth explorations of frameworks, collective sensemaking practices, or decision-making models—just high-level allusions. (4.1)\n\nIntent/Purpose Fit: The content is not primarily about organisational sensemaking or collective understanding of complexity. Its intent is to offer an overview of good practices in software development, with some secondary relevance to responsive adaptation. (4.7)\n\nAudience Alignment: The content targets a professional or practitioner audience similar to that of sensemaking resources, but its actual target is engineers and technical leaders rather than strategists or executive decision-makers in complexity contexts. (7.3)\n\nSignal-to-Noise Ratio: Nearly all the content is focused on the stated topic (software development), which maintains good signal, but less than 20% overlaps even incidentally with sensemaking themes. (7.8)\n\nPenalties: No penalties are warranted; the content is not outdated, nor is it mocking or critical of the sensemaking approach. \n\nLevel: Tertiary — sensemaking is a peripheral, not a core or secondary, aspect of the content. The few relevant points are not the main thrust, which is on methodologies for engineering rather than frameworks for interpreting complexity. \n\nIn summary, the content is firmly about software engineering practices, only occasionally and lightly intersecting with aspects of sensemaking (complexity, adaptation, decision-making), justifying a low tertiary confidence score.",
    "level": "Tertiary"
  },
  "Liberating Structures": {
    "resourceId": "Software Development",
    "category": "Liberating Structures",
    "calculated_at": "2025-05-06T11:50:27",
    "ai_confidence": 6.41,
    "ai_mentions": 0.0,
    "ai_alignment": 0.4,
    "ai_depth": 0.3,
    "ai_intent": 0.5,
    "ai_audience": 1.0,
    "ai_signal": 0.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 6.0,
    "reasoning": "The content never directly mentions Liberating Structures or any specific facilitation technique (mentions: 0.00). Conceptual alignment is extremely weak (0.40): while general collaboration, Agile, and DevOps are discussed, there is no focus on facilitation toolkits, structured team interactions, or methods like those in Liberating Structures. Depth is nearly non-existent (0.30), as the discussion is entirely general about best practices in software engineering. Intent is also only faintly relevant (0.50); while it covers team practices, it does not aim to inform about Liberating Structures specifically. The audience is broad, and the content could possibly attract facilitators among other software professionals (audience: 1.00), but this is only marginal. Signal is low but not zero (0.80), as the content is technically focused without significant filler, but contains nothing substantively relevant to Liberating Structures. No outdated or negative context exists; thus, no penalties were applied. This clearly places the content at 'Tertiary' level—a distant, indirect, and insubstantial connection to the Liberating Structures category.",
    "level": "Ignored"
  },
  "Increment": {
    "resourceId": "Software Development",
    "category": "Increment",
    "calculated_at": "2025-05-06T11:50:31",
    "ai_confidence": 25.019,
    "ai_mentions": 1.2,
    "ai_alignment": 3.6,
    "ai_depth": 3.4,
    "ai_intent": 2.9,
    "ai_audience": 5.0,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 25.0,
    "reasoning": "The content focuses broadly on software development methodologies, such as Agile, Lean, and DevOps, but does not make any direct mention of 'Increment' or the concept of tangible, usable outputs at the end of Agile iterations. \n\nMentions (1.2): The word 'increment' is never used, nor are synonymous terms such as 'working software increment.' The closest relevant phrases are 'iterative development' and 'frequent releases,' which only tangentially touch on Increment.\n\nAlignment (3.6): The themes of iterative development, predictability, and customer value align partially with the Increment category. However, the main message is about overarching software engineering practices, not specifically about increments as Scrum artifacts or outputs.\n\nDepth (3.4): While the description does cover the value of iteration, delivery cycles, and adaptability, it lacks any detailed exploration of increments, their role, measurement, or Scrum-specific interpretation.\n\nIntent (2.9): The main purpose is to provide an overview of modern software development methodologies, not to educate about or advocate for Increment as an Agile/Scrum artifact.\n\nAudience (5.0): The intended audience is general software practitioners or organizations seeking improvement, which partially overlaps with the audience for Increment discussions but is much broader and less specialized.\n\nSignal (7.3): The content is concise and relevant to software development, with minimal off-topic information or filler. However, only a small fraction (references to iterative and frequent release) is even slightly relevant to Increment.\n\nPenalties: None applied, as the content is current, neutral in tone, and not misleading.\n\nOverall, Increment is only extremely loosely connected to the content; it could possibly arise as a subtopic, but the focus is on the broad landscape of software development, not on the Increment concept itself.",
    "level": "Ignored"
  },
  "Customer Feedback Loops": {
    "resourceId": "Software Development",
    "category": "Customer Feedback Loops",
    "calculated_at": "2025-05-06T11:50:33",
    "ai_confidence": 28.77,
    "ai_mentions": 1.4,
    "ai_alignment": 3.6,
    "ai_depth": 3.3,
    "ai_intent": 2.9,
    "ai_audience": 6.6,
    "ai_signal": 5.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 29.0,
    "reasoning": "The provided content offers a broad, high-level overview of software development methodologies and practices (Agile, Lean, DevOps, evidence-based management), but only tangentially references aspects related to feedback. There is a brief mention of 'iterative development' enabling teams to 'quickly adapt to feedback and evolving requirements,' but this is a general reference and does not directly discuss mechanisms for collecting, analysing, or acting on customer feedback specifically. \n\n1. Mentions (1.4): There is no direct reference to 'Customer Feedback Loops,' nor is there explicit mention of any specific feedback loop by name. The only relevant language is a single, non-specific sentence about responding to feedback in the context of iteration.\n2. Alignment (3.6): The main ideas are not closely aligned with the definition. While the value of 'feedback' is referenced as part of iterative development, the primary focus is on general software engineering approaches.\n3. Depth (3.3): The discussion about feedback is surface-level, serving as a passing benefit of iterative practices, with no detail on collection, analysis, or integration. No tools, frameworks, methods, or case studies are mentioned.\n4. Intent (2.9): The purpose of the content is to provide an overview of software development methodologies, not to focus on feedback loops or how they shape product evolution.\n5. Audience (6.6): The intended audience (software developers, engineering leaders, product managers) somewhat overlaps with an audience interested in customer feedback loops, but the content is not directly tailored to those specifically seeking feedback loop strategies.\n6. Signal (5.8): The topic remains generally relevant to software process improvement, but the proportion addressing customer feedback loops is minimal compared to other content themes.\n\nNo penalties were applied, as the content is not outdated nor does it contradict the topic area. Overall, the confidence score is low and at the 'Tertiary' level, reflecting that references to the category are incidental rather than primary or secondary.",
    "level": "Ignored"
  },
  "Strategic Goals": {
    "resourceId": "Software Development",
    "category": "Strategic Goals",
    "calculated_at": "2025-05-06T11:50:36",
    "ai_confidence": 64.35,
    "ai_mentions": 2.6,
    "ai_alignment": 7.2,
    "ai_depth": 6.8,
    "ai_intent": 6.1,
    "ai_audience": 7.0,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 64.0,
    "reasoning": "The content primarily focuses on describing software development methodologies and their benefits, with occasional references to long-term objectives, business competitiveness, and alignment with strategic goals. \n\n- Mentions (2.6): The explicit mention of 'strategic goals' appears only near the end, without elaboration. Most of the content discusses broader software development practices and does not directly center on the category.\n- Alignment (7.2): While much of the discussion is about fostering competitive advantage, adaptability, and continuous improvement—elements relevant to strategic goals—the framing keeps the spotlight on software engineering methods rather than organizational strategy-setting.\n- Depth (6.8): The discussion around agile, Lean, DevOps, and evidence-based management relates to long-term success, but the text does not deeply examine frameworks for goal-setting, measurement, or organizational alignment. The strategic aspect is referenced, not truly explored.\n- Intent (6.1): The main purpose appears to be describing best practices in software development, not an in-depth instructional or analytical discussion of strategic goals. The strategic content is present, but not primary.\n- Audience (7.0): The audience includes technical practitioners as well as managers, which is somewhat aligned with those interested in strategic goals but not exclusively targeted to strategists or executive decision-makers.\n- Signal (7.3): The majority of the content remains relevant to organizational improvement and some strategic issues; there is minimal off-topic material, but the focus is not squarely on strategic goals throughout.\n\nNo penalties were applied as the material is current, constructive, and not contradictory to the category framework. Ultimately, while there is some substantial connection to strategic goals—especially in the concluding paragraphs—these are secondary to the main thrust of the content, which is operational and methodological, not predominantly strategic.",
    "level": "Secondary"
  },
  "Market Share": {
    "resourceId": "Software Development",
    "category": "Market Share",
    "calculated_at": "2025-05-06T11:50:28",
    "ai_confidence": 16.342,
    "ai_mentions": 0.3,
    "ai_alignment": 1.7,
    "ai_depth": 2.3,
    "ai_intent": 1.0,
    "ai_audience": 5.2,
    "ai_signal": 2.8,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 16.0,
    "reasoning": "The content makes no direct mention of 'market share' or any of the precise subtopics detailed in the category definition. It focuses primarily on methodologies and philosophies (Agile, Lean, DevOps) that support software engineering excellence, with some indirect references to competitiveness and sustainable advantage. However, these are discussed in the context of improving internal practices and software quality—there is no direct or substantive exploration of strategies or metrics for increasing market share, nor any actionable analysis relevant to the category. Mentions and alignment scores are near the minimum: 'market share' is not named or clearly referenced (mentions: 0.3), and the conceptual overlap is weak (alignment: 1.7), as it conflates being competitive in general with developing specific market presence. Depth (2.3) reflects only light, tangential connection; the discussion is about process benefits, not market expansion. Intent is off-purpose (1.0); the aim is improving engineering, not market positioning. Audience receives a mid score (5.2) since practitioners/readers in software organisations might ultimately care about competitiveness, but not from a strictly market-share standpoint. Signal (2.8) is low due to the lack of on-topic focus; much of the content is irrelevant to market share. No penalties for datedness or tone are necessary. On balance, the content is tertiary to the category: it is mostly unrelated, with only faint, incidental competitive implications.",
    "level": "Ignored"
  },
  "System Configuration": {
    "resourceId": "Software Development",
    "category": "System Configuration",
    "calculated_at": "2025-05-06T11:50:32",
    "ai_confidence": 18.44,
    "ai_mentions": 0.4,
    "ai_alignment": 2.3,
    "ai_depth": 2.0,
    "ai_intent": 1.7,
    "ai_audience": 5.8,
    "ai_signal": 3.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 18.0,
    "reasoning": "The content 'Software Development' is almost entirely focused on methodologies and techniques for building software at a broad level, such as Agile, Lean, and DevOps. There is no direct mention of 'system configuration' as a term, nor are there explicit references to any of the subtopics outlined, such as configuration management tools, integration of hardware and software, or maintenance of system configurations. \n\n1. Mentions (0.4): 'System configuration' is neither named nor synonymously referenced. The closest relevant touchpoint is a passing mention of 'automation,' but it is not in a configuration management context. \n\n2. Alignment (2.3): The overall theme does not align with 'System Configuration.' While terms like 'DevOps' and 'automation' could relate to configuration in broad practice, their appearance here is only as facets of a general software engineering discussion, not from a configuration management perspective. \n\n3. Depth (2.0): There is no substantive exploration of the complexities, tools, or best practices of system configuration. Any mention of configuration is extremely shallow or implied. \n\n4. Intent (1.7): The content’s purpose is aligned with educating and informing about software engineering practices, which is tangential to, but not central to, system configuration. \n\n5. Audience (5.8): The audience is likely technical practitioners—overlapping in some scenarios with those interested in system configuration, but not targeted at them specifically. \n\n6. Signal (3.2): Most of the content is focused on software development—content relevant to system configuration would be limited to indirect overlap via automation or DevOps, but this is a small fraction.\n\nNo penalties applied: The content is current and does not contradict the category explicitly. \n\nLevel is 'Tertiary' because any intersection with the 'System Configuration' category is extremely indirect and residual, not intentional or prominent.\n",
    "level": "Ignored"
  },
  "Hypothesis Driven Development": {
    "resourceId": "Software Development",
    "category": "Hypothesis Driven Development",
    "calculated_at": "2025-05-06T11:50:28",
    "ai_confidence": 26.931,
    "ai_mentions": 0.2,
    "ai_alignment": 1.3,
    "ai_depth": 1.1,
    "ai_intent": 0.9,
    "ai_audience": 8.2,
    "ai_signal": 6.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 27.0,
    "reasoning": "The content provided is a broad overview of software development methodologies and practices, focusing on general themes such as Agile, Lean, automation, testing, and continuous improvement. While it references iterative development and evidence-based management, there is no explicit mention or substantial discussion of Hypothesis Driven Development (HDD) or its core practices, such as hypothesis formulation, experimentation, validated learning, or data-driven iteration. \n\n- For **Direct Mentions (0.2/10)**: The term 'Hypothesis Driven Development' is never stated, nor are any synonymous phrases clearly present. \n- **Conceptual Alignment (1.3/10)**: Though 'evidence-based management' is briefly referenced, and iterative/feedback-driven development is mentioned, the alignment is very weak since formulating and testing hypotheses is missing. \n- **Depth of Discussion (1.1/10)**: There is no exploration of HDD concepts, no mention of experimentation, data analysis, or iteration based on validated learning. \n- **Intent/Purpose Fit (0.9/10)**: The main intent is to describe general software engineering approaches, not HDD. Any overlap is indirect and tangential. \n- **Audience Alignment (8.2/10)**: The general content would appeal to practitioners and strategists in software engineering, who are also the likely audience for HDD, so the fit here is high. \n- **Signal-to-Noise Ratio (6.9/10)**: Almost all content is on-topic for software development, but very little is relevant specifically to HDD, so this is moderate. \n\nNo penalties were applied, as there is no evidence of outdated info or contradictory tone. Overall, the content barely meets the threshold for relevance: HDD is not mentioned, and related concepts are covered only peripherally. The classification is clearly 'Tertiary', signifying distant and marginal fit.",
    "level": "Ignored"
  },
  "Product Strategy": {
    "resourceId": "Software Development",
    "category": "Product Strategy",
    "calculated_at": "2025-05-06T11:50:31",
    "ai_confidence": 40.075,
    "ai_mentions": 1.8,
    "ai_alignment": 4.35,
    "ai_depth": 4.2,
    "ai_intent": 3.85,
    "ai_audience": 3.65,
    "ai_signal": 4.05,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 40.0,
    "reasoning": "The content focuses extensively on methodologies and practices for high-quality software engineering, such as Agile, Lean, DevOps, testing, automation, and continuous improvement. While these approaches are somewhat related to product strategy in the sense that they support sustainable and competitive product delivery, the discussion centers primarily on the software development process itself rather than on defining vision, product roadmaps, competitive positioning, or customer-centric strategy. \n\n1. **Direct Mentions (1.800):** 'Product Strategy' is not directly referenced. Strategic goals are alluded to, but this is generic and not explicitly aligned with strategy as defined in the classification.\n2. **Conceptual Alignment (4.350):** Some connection to product strategy exists where the content mentions aligning software development with business objectives and achieving a competitive advantage. However, the overall framing leans toward execution (how to build software), not strategic formulation (what to build and why).\n3. **Depth of Discussion (4.200):** The discussion is moderately detailed on development methodologies, but does not examine product strategy concepts (vision, roadmap, market analysis) in depth.\n4. **Intent / Purpose Fit (3.850):** The core intent is to inform about software engineering best practices, not to guide or discuss product strategy frameworks or approaches.\n5. **Audience Alignment (3.650):** The target audience seems to be software engineering professionals and teams, not primarily product strategists or executives.\n6. **Signal-to-Noise Ratio (4.050):** Most content is relevant to software development, with only some overlap to strategy in a general sense. There is little off-topic noise, but the relevance to the Product Strategy category is diffused.\n\nNo penalties were applied, as the material is current, neutral in tone, and does not reference obsolete practices. The overall confidence is low-to-moderate (tertiary level) because the content fits mostly at a peripheral level to the core criteria for Product Strategy. Specific elements (alignment with business objectives, sustainable advantage) offer light overlap, but the treatment is neither explicit nor substantial regarding product strategy themes.",
    "level": "Ignored"
  },
  "Continuous Delivery": {
    "resourceId": "Software Development",
    "category": "Continuous Delivery",
    "calculated_at": "2025-05-06T11:50:37",
    "ai_confidence": 37.15,
    "ai_mentions": 0.5,
    "ai_alignment": 4.4,
    "ai_depth": 4.0,
    "ai_intent": 3.0,
    "ai_audience": 7.1,
    "ai_signal": 7.5,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 37.0,
    "reasoning": "The content is best categorized as a general overview of software development practices, with a broad focus on methodologies (Agile, Lean, DevOps), iterative development, automation, and systemic improvement. \n\n1. Mentions (0.5): The term 'Continuous Delivery' is never explicitly named, nor are its synonyms. References to automation, integration, and frequent releases hint at related practices but do not make direct or frequent mention.\n\n2. Conceptual Alignment (4.4): There is partial thematic overlap: the text mentions iterative development, automation, and frequent releases, which conceptually parallel some principles of Continuous Delivery. However, the primary focus is on the broader discipline of Software Development, not specifically on Continuous Delivery principles or practices.\n\n3. Depth (4.0): The discussion touches on underlying themes of Continuous Delivery (automation, testing, short cycles), but at a surface level, lacking detailed exploration into practices, frameworks, or case studies unique to Continuous Delivery. The depth into CD is minimal, with the majority of exploration being general or applicable to multiple methodologies.\n\n4. Intent (3.0): The purpose is to inform about broad software engineering excellence rather than focused education, support, or advocacy specific to Continuous Delivery.\n\n5. Audience (7.1): The language aims at practitioners and organizations involved in software engineering, which may overlap with the intended audience for Continuous Delivery, although it includes a broader stakeholder set as well.\n\n6. Signal-to-Noise (7.5): The content is fairly focused, with little filler or digression, but only a fraction of it is relevant to Continuous Delivery. Most of the 'signal' serves the broader software development context.\n\nNo penalties were required as the content is neither outdated nor does it contradict the framing. Overall, the indirect and partial fit positions this content as 'Tertiary'—it may provide valuable background for Continuous Delivery discussions but does not itself directly, deeply, or explicitly serve the category.",
    "level": "Ignored"
  },
  "Competence": {
    "resourceId": "Software Development",
    "category": "Competence",
    "calculated_at": "2025-05-06T11:50:29",
    "ai_confidence": 53.31,
    "ai_mentions": 1.9,
    "ai_alignment": 6.7,
    "ai_depth": 6.5,
    "ai_intent": 6.1,
    "ai_audience": 8.0,
    "ai_signal": 7.2,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 53.0,
    "reasoning": "The content provides a broad overview of software development best practices, referencing methodologies like Agile, Lean, and DevOps—which do frequently emphasize competence. However, the text does not explicitly mention 'competence' or directly discuss skill development, capability, or professional mastery. Direct mentions are nearly absent (mentions: 1.9). The conceptual alignment is moderate (6.7) because the themes of continual improvement, adaptability, and evidence-based management can foster competence, but these are discussed at a process or organizational level rather than focusing on individual or team competence. \n\nDepth is moderate (6.5): While the content references holistic practices (continuous improvement, knowledge sharing, innovation), it does not delve into how competence is developed, measured, or maintained—nor does it differentiate between activity and genuine progress, or discuss mastery. Intent/purpose (6.1) is somewhat aligned; the main aim is to inform about comprehensive software development approaches rather than specifically promoting or analyzing competence itself. The audience targeting (8.0) fits well—software professionals who would be the natural audience for competence discussions, but without competence as the intent, this elevates the score only partially. Signal/noise ratio is decent (7.2) since the content is focused, relevant, and free of filler, but little of it is directly on competence. \n\nNo penalties are applied: the content is not outdated, satirical, nor does it undermine the value of competence. The level is 'Tertiary' because any connection to 'Competence' is indirect and subordinate to the main topic of general software development practices. While much of what is described would, in robust implementations, promote competence, it is not the main thrust of the content.",
    "level": "Tertiary"
  },
  "Product Delivery": {
    "resourceId": "Software Development",
    "category": "Product Delivery",
    "calculated_at": "2025-05-06T11:50:32",
    "ai_confidence": 61.78,
    "ai_mentions": 3.3,
    "ai_alignment": 7.1,
    "ai_depth": 6.8,
    "ai_intent": 6.7,
    "ai_audience": 7.2,
    "ai_signal": 7.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 62.0,
    "reasoning": "The content covers a broad perspective on software development with some alignment to Product Delivery practices, but it is not explicitly or solely focused on the core scope of Product Delivery as narrowly defined. \n\n1. Mentions (3.3): The content mentions relevant concepts (e.g., Agile, DevOps, iterative development, customer satisfaction, delivery cycles), but does not directly mention 'product delivery' or focus tactically on it—references are implied, not direct.\n\n2. Conceptual Alignment (7.1): There is a strong overlap with key aspects of Product Delivery (Agile, Lean, DevOps, testing, automation, integration, releases), but these are positioned as part of broader software development rather than with exclusive focus on the delivery process itself.\n\n3. Depth of Discussion (6.8): The discussion provides some substance on practices relevant to Product Delivery (e.g., iterative development, automation, testing, feedback loops, cross-functional teams), but remains at a high, generic level—there are no in-depth explorations of delivery-centric topics like deployment automation, delivery KPIs, or release management.\n\n4. Intent / Purpose Fit (6.7): The intent is to inform about best practices in high-quality software engineering, which overlaps with and supports delivery, but is not centered on delivery to customers or the challenges/strategies therein.\n\n5. Audience Alignment (7.2): The audience appears to be practitioners and teams engaged in software engineering, which aligns moderately well with the target Product Delivery audience, though perhaps with a slightly broader or more general focus.\n\n6. Signal-to-Noise Ratio (7.6): Most content is relevant and focused; there is little off-topic or filler material. However, some of the discussion drifts into 'holistic approaches' and 'evidence-based management', which, while related, are peripheral to direct Product Delivery concerns.\n\nNo penalty deductions were applied, as the content is generally current, neutral in tone, and does not reference outdated or obsolete practices.\n\nOverall, the content is relevant to Product Delivery as a secondary theme (level: Secondary), but does not display direct focus or depth in dedicated delivery methodologies, best practices, or KPIs.",
    "level": "Secondary"
  },
  "Trend Analysis": {
    "resourceId": "Software Development",
    "category": "Trend Analysis",
    "calculated_at": "2025-05-06T11:50:29",
    "ai_confidence": 38.44,
    "ai_mentions": 2.3,
    "ai_alignment": 4.4,
    "ai_depth": 3.8,
    "ai_intent": 4.9,
    "ai_audience": 6.7,
    "ai_signal": 7.3,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 38.0,
    "reasoning": "The content primarily describes general software development practices, with a focus on methodologies like Agile, Lean, and DevOps. While these terms are related to trend analysis, the content does not explicitly mention trend analysis, nor does it delve into the analysis of emerging patterns, shifts, or the strategic impacts of trends in these areas. \n\nDirect Mentions (2.3): The term 'trend analysis' is not used directly, nor are related phrases prominent; some related words (e.g., 'continuous improvement', 'evolving requirements', 'responsiveness to change') hint at adaptability, but this is not equivalent to explicit mention of trends or their analysis.\n\nConceptual Alignment (4.4): The content loosely aligns by discussing adaptability and improvement (which can result from understanding trends), but does not explicitly analyze trends, shifting practices, or data-driven trend identification, as the definition requires.\n\nDepth (3.8): The discussion remains at a high level, focusing on standard descriptions of best practices without examining specific trends, empirical shifts, or providing case studies/tools for trend analysis.\n\nIntent/Purpose Fit (4.9): The main intent is to inform about best practices in software development; any insight into trends is indirect and not the primary purpose.\n\nAudience Alignment (6.7): The audience (software/dev teams, managers, decision makers) overlaps with that of trend analysis in Agile/DevOps, though the piece is not targeted to those specifically seeking trend insights.\n\nSignal-to-Noise (7.3): The content is focused and relevant to software development, but much of it is peripheral to the narrow focus on trend analysis.\n\nNo penalties were applied because the content is not outdated, satirical, nor contradictory; it simply lacks focused relevance to trend analysis. Thus, this content is only of tertiary relevance for the Trend Analysis category.",
    "level": "Ignored"
  },
  "Organisational Change": {
    "resourceId": "Software Development",
    "category": "Organisational Change",
    "calculated_at": "2025-05-06T11:50:32",
    "ai_confidence": 31.85,
    "ai_mentions": 1.7,
    "ai_alignment": 2.8,
    "ai_depth": 2.4,
    "ai_intent": 3.1,
    "ai_audience": 5.3,
    "ai_signal": 5.6,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 32.0,
    "reasoning": "The content primarily discusses software development practices with a focus on methodologies (Agile, Lean, DevOps) as applied to building high-quality software. While some tangential concepts—such as adaptability, culture, continuous improvement, and evidence-based management—could overlap with organisational change principles, the explicit focus remains on engineering, automation, and team-level efficiency rather than top-level organisational transformation. \n\nMentions: The content does not directly reference 'organisational change' or its major frameworks; references to Agile/Lean are in a technical, developmental rather than organisational context (score: 1.7). \n\nAlignment: The underlying themes of adaptability and a culture of improvement partially align but lack a direct or primary focus on organisational change frameworks and processes (score: 2.8). \n\nDepth: Organisational change is not explored as a main subject—the depth is on software engineering approaches, with only surface overlap to change management at the team/process level (score: 2.4). \n\nIntent: The piece is written to inform about software development methodologies, not about organisational transformation or leading change (score: 3.1). \n\nAudience: Aimed at practitioners of software engineering, not executive change leaders or organisational strategists (score: 5.3). \n\nSignal: Most content is relevant to software development and only minimally intersects with organisational change topics (score: 5.6). \n\nNo penalties were applied, as the content is neither outdated nor overtly critical of the organisational change perspective. This content should at best be considered as 'tertiary' relevance, since it touches upon principles (e.g., adaptability, continuous improvement) which are also present in organisational change literature, but without meeting the substance, intent, and audience fit required for the category.",
    "level": "Ignored"
  },
  "Organisational Psychology": {
    "resourceId": "Software Development",
    "category": "Organisational Psychology",
    "calculated_at": "2025-05-06T11:50:35",
    "ai_confidence": 9.751,
    "ai_mentions": 0.6,
    "ai_alignment": 1.4,
    "ai_depth": 1.1,
    "ai_intent": 1.7,
    "ai_audience": 1.0,
    "ai_signal": 2.0,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 10.0,
    "reasoning": "The content primarily discusses technical methodologies related to software engineering such as Agile, Lean, and DevOps, focusing on process improvements, engineering quality, and delivery efficiency. While it references concepts like collaboration, culture, and innovation, these are presented in support of technical and business strategy objectives rather than as psychological constructs. There is no explicit mention of organisational psychology or its core theories, such as motivation, leadership, or team dynamics rooted in psychological principles. Thus, 'Direct Mentions' and 'Conceptual Alignment' scores are very low, as are 'Depth of Discussion' and 'Signal-to-Noise', since the content remains technical and process-focused throughout. Although the audience (software professionals, team leads) could have some overlap with organisational psychology, the primary intent is delivery methodology. No penalties were necessary, as the content is current and does not critique or satirise organisational psychology. Overall, this resource may be tangentially relevant at a tertiary level for organisational psychology only insofar as team collaboration is mentioned, but it does not substantively fit the category focus.",
    "level": "Ignored"
  },
  "Cross Functional Teams": {
    "resourceId": "Software Development",
    "category": "Cross Functional Teams",
    "calculated_at": "2025-05-06T11:50:38",
    "ai_confidence": 43.866,
    "ai_mentions": 2.7,
    "ai_alignment": 4.6,
    "ai_depth": 3.8,
    "ai_intent": 4.2,
    "ai_audience": 5.1,
    "ai_signal": 5.9,
    "ai_penalties_applied": false,
    "ai_penalty_points": 0,
    "ai_penalty_details": "none",
    "final_score": 44.0,
    "reasoning": "The content provides a broad overview of software development methodologies, mentioning Agile and the importance of collaboration and adaptability. While it references 'cross-functional collaboration and knowledge sharing among team members,' direct mentions of 'cross-functional teams' are minimal and lack detail. The conceptual alignment is partial—collaboration is promoted, but the specific structure, characteristics, or practices related to cross-functional teams in Agile are not explored. The depth is surface-level on this topic, as the primary focus is on general software development methods and benefits rather than an in-depth examination of cross-functional teams. The intent is informative about software development broadly, not specifically about cross-functional teams. The audience is somewhat aligned (practitioners and strategists in software development), but not precisely targeted at those specifically interested in cross-functional teams. The signal-to-noise ratio is moderate—the content stays generally on-topic for software development, but the focus on cross-functional teams is diluted. There are no penalties applied for outdatedness or undermining tone. Thus, the content only meets the category at a tertiary level, referencing the concept peripherally but not substantively.",
    "level": "Tertiary"
  }
}